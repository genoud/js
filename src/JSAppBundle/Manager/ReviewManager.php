<?php
/**
 * Created by PhpStorm.
 * User: magloire
 * Date: 30/06/2016
 * Time: 21:19
 */

namespace JSAppBundle\Manager;

use JSAppBundle\Dao\ReviewRepository;
use JSAppBundle\Entity\Review;
use JSAppBundle\Entity\StatutManuscrit;
use JSAppBundle\Entity\Utilisateur;
use Symfony\Component\DependencyInjection\ContainerInterface as Container;
class ReviewManager extends CoreManager
{
    public function __construct(Container $container, CoreService $core)
    {
        $entityClass="JSAppBundle\Entity\Review";
        parent::__construct($container, $core, $entityClass);
    }

    /**
     * @param Utilisateur $reviewer
     * @param string $status
     * @param string $query
     * @return int
     */
    public function countAllByReviewerByStatus($reviewer, $status, $query=null){

        $repo=$this->getRepository();
        return $repo->countByReviewerByStatus($reviewer, $status, $query);

    }

    /**
     * @param Utilisateur $reviewer
     * @param string $status
     * @param int $page
     * @param int $limit
     * @param string $query
     * @return Review[]
     */
    public function findByReviewerByStatus($reviewer, $status, $page, $limit, $query){

        $repo=$this->getRepository();
        return $repo->findByReviewerByStatus($reviewer, $status, $page, $limit,  $query);

    }

    /**
     * @return ReviewRepository
     */
    public function getRepository()
    {
        return parent::getRepository();
    }

    /**
     * @param Review $review
     * @return Review
     */
    public function submitReview($review)
    {
        $review->setStatut(Review::$REVIEW_SUBMITTED);

        $review= parent::update($review);

        $files=array();
        foreach($review->getFichiers() as $fichier){
            $files[]=$fichier->getUrl();
        }

        //Sent email the the author
        $this->sendEmail("Review submitted", $review->getReviewer()->getPersonne()->getEmail(),
            $this->renderView("JSAppBundle:Emails:reviewSubmitted.html.twig", array(
                "review" => $review,
                "user" => $this->getConnectedUser(),
            )),"contact@capvcm.com",$files
        );

        return $review;
    }

    /**
     * @param Review $review
     * @return Review
     * @throws \Exception
     */
    public function validateReview($review)
    {
        $state=$this->beginTransaction();
        try{
            $review->setStatut(Review::$REVIEW_VALIDATED);
            $article=$review->getArticle();

            if($review->isNeedReview()){
                if($article->getStatut()!=StatutManuscrit::$SOUMISSION_EN_ATTENTE_DE_REVISION["code"]){
                    $article->setStatut(StatutManuscrit::$SOUMISSION_EN_ATTENTE_DE_REVISION["code"]);
                    $articleManager=$this->getCore()->getArticleManager();
                    $articleManager->update($article);
                }
            }


            $review= $this->update($review);

            $files=array();
            foreach($review->getFichiers() as $fichier){
                $files[]=$fichier->getUrl();
            }

            //Sent email the the author
            $this->sendEmail("Review Validated", $review->getReviewer()->getPersonne()->getEmail(),
                $this->renderView("JSAppBundle:Emails:reviewValidated.html.twig", array(
                    "review" => $review,
                    "user" => $this->getConnectedUser(),
                )),"contact@capvcm.com",$files
            );

            $this->commitTransaction($state);
            return $review;
        }
        catch(\Exception $ex){
            $this->rollbackTransaction($state);
            throw $ex;
        }

    }

    /**
     * @param Review $review
     * @return Review
     */
    public function rejectReview($review)
    {
        $review->setStatut(Review::$REVIEW_REJECTED);

        $review= $this->update($review);

        $files=array();
        foreach($review->getFichiers() as $fichier){
            $files[]=$fichier->getUrl();
        }

        //Sent email the the author
        $this->sendEmail("Review rejected", $review->getReviewer()->getPersonne()->getEmail(),
            $this->renderView("JSAppBundle:Emails:reviewRejected.html.twig", array(
                "review" => $review,
                "user" => $this->getConnectedUser(),
            )),"contact@capvcm.com",$files
        );

        return $review;
    }

    /**
     * @param int $id
     * @return null|Review
     */
    public function load($id)
    {
        return parent::load($id); // TODO: Change the autogenerated stub
    }

    /**
     * @param Review $review
     * @return Review
     */
    public function update($review)
    {
        return parent::update($review); // TODO: Change the autogenerated stub
    }

}