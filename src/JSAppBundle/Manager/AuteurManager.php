<?php
/**
 * Created by PhpStorm.
 * User: magloire
 * Date: 30/06/2016
 * Time: 21:18
 */

namespace JSAppBundle\Manager;

use JSAppBundle\Dao\AuteurRepository;
use JSAppBundle\Entity\Auteur;
use JSAppBundle\Entity\Personne;
use JSAppBundle\Entity\Role;
use JSAppBundle\Entity\Utilisateur;
use Symfony\Component\DependencyInjection\ContainerInterface as Container;
class AuteurManager extends CoreManager
{

    public function __construct(Container $container, CoreService $core)
    {
        $entityClass="JSAppBundle\Entity\Auteur";
        parent::__construct($container, $core, $entityClass);
    }

    /**
     * @param Auteur $auteur
     * @return Auteur
     * @throws \Exception
     */
    public function create($auteur){

        $state=$this->beginTransaction();
        try{
            $userManager=$this->getCore()->getUtilisateurManager();
            $personneManager=$this->getCore()->getPersonneManager();

            $roleManager=$this->getCore()->getRoleManager();
            $roleAuteur=$roleManager->getRoleByCode(Role::$ROLE_AUTEUR["code"]);
            $rolePublic=$roleManager->getRoleByCode(Role::$ROLE_PUBLIC["code"]);
            $roleReviewer=$roleManager->getRoleByCode(Role::$ROLE_REVIEWER["code"]);



            $personne=$personneManager->create($auteur->getPersonne());
            $auteur= parent::create($auteur);

            $user=new Utilisateur();
            $user->setUsername($personne->getEmail());

            $user->addRole($roleAuteur);
            $user->addRole($rolePublic);
            $user->addRole($roleReviewer);

            $userManager->create($user);

            $this->commitTransaction($state);
            return $auteur;
        }
        catch(\Exception $ex){
            $this->rollbackTransaction($state);
            throw $ex;
        }

    }

    /**
     * @param Personne $person
     * @return Auteur|null
     */
    public function findByPerson($person){
        $repo=$this->getRepository();
        $authors=$repo->findByPersonne($person);
        if(isset($authors) && count($authors)>0){
            return $authors[0];
        }
        return null;
    }

    public function findByQueryString($page, $limit, $query)
    {
        $repo=$this->getRepository();
        return $repo->findByQyery($page, $limit, $query);
    }

    public function countByQueryString($query)
    {
        $repo=$this->getRepository();
        return $repo->countByQyery( $query);
    }

    /**
     * @return AuteurRepository
     */
    public function getRepository()
    {
        return parent::getRepository(); // TODO: Change the autogenerated stub
    }
}