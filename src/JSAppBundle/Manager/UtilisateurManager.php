<?php
/**
 * Created by PhpStorm.
 * User: magloire
 * Date: 30/06/2016
 * Time: 21:29
 */

namespace JSAppBundle\Manager;

use JSAppBundle\Dao\UtilisateurRepository;
use JSAppBundle\Entity\Role;
use JSAppBundle\Entity\Utilisateur;
use JSAppBundle\Tools\Tools;
use Symfony\Component\DependencyInjection\ContainerInterface as Container;
class UtilisateurManager extends CoreManager
{
    public function __construct(Container $container, CoreService $core)
    {
        $entityClass="JSAppBundle\Entity\Utilisateur";
        parent::__construct($container, $core, $entityClass);
    }

    /**
     * @param Utilisateur $user
     * @return Utilisateur
     */
    public function create($user){
        $logger=$this->getLogger();

        $logger->info("Création de l'utilisateur");
        $password=$user->getMotDePasse();

        if(!isset($password) || $password==""){
            $password=Tools::randomWithNumbers(8);
        }
        $motDePasseClair=$password;

        $logger->info("Création de l'utilisateur: Login: ". $user->getUsername()." Mot de passe: ". $password);
        $cryptedPassword=$this->cryptPassword($user, $password);
        $logger->info("Création de l'utilisateur Mot de passe crypté: ". $cryptedPassword);
        $user->setMotDePasse($cryptedPassword);
        $logger->info("Création de l'utilisateur Roles 1: ". $user->getRolesEntity()[0]->getLibelle());

        //Envoyé le mail avec les paramètres

        $this->sendEmail("Registration completed", $user->getPersonne()->getEmail(),
            $this->renderView("JSAppBundle:Emails:loginInfos.html.twig", array(
                "user" => $user,
                "motDePasseClair" => $motDePasseClair,
            )),"contact@capvcm.com",array()
        );

        return parent::create($user);

    }

    /**
     * @param Utilisateur $user
     * @return mixed
     */
    public function register($user)
    {
        $logger=$this->getLogger();

        $logger->info("Création de l'utilisateur");
        $password=$user->getMotDePasse();

        if(!isset($password) || $password==""){
            $password=Tools::randomWithNumbers(8);
        }
        $motDePasseClair=$password;

        $logger->info("Création de l'utilisateur: Login: ". $user->getUsername()." Mot de passe: ". $password);
        $cryptedPassword=$this->cryptPassword($user, $password);
        $logger->info("Création de l'utilisateur Mot de passe crypté: ". $cryptedPassword);
        $user->setMotDePasse($cryptedPassword);
//        $logger->info("Création de l'utilisateur Roles 1: ". $user->getRolesEntity()[0]->getLibelle());

        $roleManager=$this->getCore()->getRoleManager();
        $authorRole=$roleManager->getRoleByCode(Role::$ROLE_AUTEUR["code"]);
        $rviewerRole=$roleManager->getRoleByCode(Role::$ROLE_REVIEWER["code"]);

        $user->addRole($authorRole);
        $user->addRole($rviewerRole);


        $user->setActive(true);
        $user->setUsername($user->getPersonne()->getEmail());
        $user=parent::create($user);

        //Envoyé le mail avec les paramètres

        $this->sendEmail("Registration completed", $user->getPersonne()->getEmail(),
            $this->renderView("JSAppBundle:Emails:loginInfos.html.twig", array(
                "user" => $user,
                "motDePasseClair" => $motDePasseClair,
            )),"contact@capvcm.com",array()
        );

        return $user;
    }

    /**
     * @param Utilisateur $user
     * @param string $passClair
     * @return string
     */
    public function cryptPassword($user, $passClair) {
        $factory = $this->getCore()->getEncoderFactory();
        $salt = null;
        $user->setSalt($salt);

        $encoder = $factory->getEncoder($user);
        $passCrypt = $encoder->encodePassword($passClair, $salt);
        return $passCrypt;
    }

    public function findByQueryString($page, $limit, $query)
    {
        $repo=$this->getRepository();
        return $repo->findByQuery($page, $limit, $query);
    }

    public function countByQueryString($query)
    {
        $repo=$this->getRepository();
        return $repo->countByQuery($query);
    }

    /**
     * @return UtilisateurRepository
     */
    public function getRepository()
    {
        return parent::getRepository(); // TODO: Change the autogenerated stub
    }

    public function loadByUsername($username)
    {
        $repo=$this->getRepository();
        return $repo->loadUserByUsername($username);
    }

    public function findEditorsByQueryString($page, $limit, $query)
    {
        $repo=$this->getRepository();
        return $repo->findEditorsByQuery($page, $limit, $query);
    }

    public function countEditorsByQueryString($query)
    {
        $repo=$this->getRepository();
        return $repo->countEditorsByQuery( $query);
    }

    public function findReviewersByQueryString($page, $limit, $query)
    {
        $repo=$this->getRepository();
        return $repo->findReviewersByQuery($page, $limit, $query);
    }

    public function countReviewersByQueryString($query)
    {
        $repo=$this->getRepository();
        return $repo->countReviewersByQuery( $query);
    }


}