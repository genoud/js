<?php
/**
 * Created by PhpStorm.
 * User: maglo
 * Date: 02/11/2016
 * Time: 21:56
 */

namespace JSAppBundle\Manager;


use JSAppBundle\Dao\CoAuteurRepository;
use JSAppBundle\Entity\CoAuteur;
use Symfony\Component\DependencyInjection\ContainerInterface as Container;

class CoAuteurManager extends CoreManager
{

    public function __construct(Container $container, CoreService $core)
    {
        $entityClass="JSAppBundle\Entity\CoAuteur";
        parent::__construct($container, $core, $entityClass);
    }

    /**
     * @param CoAuteur $coAuteur
     * @return mixed
     * @throws \Exception
     */
    public function createCoAuteur(CoAuteur $coAuteur){

        $state=$this->beginTransaction();
        try{
            if($coAuteur->isPrincipal()){
                $coAuteurArticle=$this->getCoauteursByArticle($coAuteur->getArticle());
                foreach($coAuteurArticle as $ca){
                    $ca->setPrincipal(false);
                    $this->update($ca);
                }
            }
            $coAuteur=$this->create($coAuteur);

            $this->commitTransaction($state);
            return $coAuteur;
        }
        catch(\Exception $ex){
            $this->rollbackTransaction($state);
            throw $ex;
        }
    }

    public function updateCoAuteur(CoAuteur $coAuteur){

        $state=$this->beginTransaction();
        try{
            if($coAuteur->isPrincipal()){
                $coAuteurArticle=$this->getCoauteursByArticle($coAuteur->getArticle());
                foreach($coAuteurArticle as $ca){
                    if($ca->getId()!=$coAuteur->getId()){
                        $ca->setPrincipal(false);
                        $this->update($ca);
                    }
                }
            }
            $coAuteur=$this->update($coAuteur);

            $this->commitTransaction($state);
            return $coAuteur;
        }
        catch(\Exception $ex){
            $this->rollbackTransaction($state);
            throw $ex;
        }
    }

    /**
     * Return the author of an article
     * @param $article
     * @return CoAuteur[]
     */
    public function getCoauteursByArticle($article){
        $repo=$this->getRepository();
        $data=$repo->findByArticle($article);
        return $data;
    }

    /**
     * @return CoAuteurRepository
     */
    public function getRepository()
    {
        return parent::getRepository(); // TODO: Change the autogenerated stub
    }
}