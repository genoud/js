              <parameterAssignment expression="$familyRelationsRoyalty.originAndProvenanceSow" variable="gsFieldValue"/>
                                <parameterAssignment expression="'1640'" variable="gsFieldId"/>
                            </parameterAssignments>
                        </component>
                    </customContainer>
                    <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutFullWidthElement"
                        htmlId="='auaFamilyRoyaltyCountries' &amp; $familyRelationsRoyalty.getId()" id="233">
                        <component class="com.nm.sdk.data.pages.views.components.Template" id="234" screenId="UI_TemplateMultiFieldSet">
                            <component class="com.nm.sdk.data.pages.views.components.TemplateArea" id="235" name="CONTENT">
                                <component class="com.nm.sdk.data.pages.views.components.Include" id="236" screenId="CMN_IncludeOtherInheritorDonatorsExposure">
                                    <parameterAssignments>
                                        <parameterAssignment expression="$isReadOnly" variable="isReadOnly"/>
                                        <parameterAssignment expression="$validationManager" variable="validationManager"/>
                                        <parameterAssignment expression="CAST(CMN_KycBusinessExposure, $currentCountriesBusinessExposure.value)" variable="inheritorDonator"/>
                                        <parameterAssignment expression="$adaptiveFlowLayoutConfiguration" variable="adaptiveFlowLayoutConfiguration"/>
                                    </parameterAssignments>
                                </component>
                            </component>
                            <component class="com.nm.sdk.data.pages.views.components.TemplateArea" id="237" name="COMPACTCONTENT">
                                <component class="com.nm.sdk.data.pages.views.components.If" condition="$currentCountriesBusinessExposure.value != null &amp;&amp; ISA($currentCountriesBusinessExposure.value, 'CMN_KycBusinessExposure')" id="269">
                                    <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.floatlayout.FloatLayout" id="238">
                                        <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.floatlayout.FloatLayoutElement" id="239">
                                            <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="240" text="=CAST(CMN_KycBusinessExposure, $currentCountriesBusinessExposure.value).toString()"/>
                                            <property name="align"/>
                                        </customContainer>
                                    </customContainer>
                                </component>
                            </component>
                            <parameterAssignments>
                                <parameterAssignment expression="$adaptiveFlowLayoutConfiguration" variable="adaptiveFlowLayoutConfiguration"/>
                                <parameterAssignment expression="$isReadOnly" variable="isReadOnly"/>
                                <parameterAssignment expression="true" variable="compactMode"/>
                                <parameterAssignment expression="'CMN_KycBusinessExposure'" variable="objectType"/>
                                <parameterAssignment expression="$currentCountriesBusinessExposure" variable="currentElement"/>
                                <parameterAssignment expression="$familyRelationsRoyalty.countriesBusinessExposure" variable="collection"/>
                                <parameterAssignment expression="'auaFamilyRoyaltyCountries' &amp; $familyRelationsRoyalty.getId()" variable="externalAjaxUpdateAreas"/>
                                <parameterAssignment expression="1" variable="minCardinality"/>
                                <parameterAssignment expression="'[LABEL:COB_kyc.sow.country.sow.generated.family]'" variable="fieldSetTitle"/>
                            </parameterAssignments>
                        </component>
                    </customContainer>
                    <component class="com.nm.sdk.data.pages.views.components.If" collapsed="true" condition="false" editorDescription="Task #18635" id="271">
                        <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutFullWidthElement" id="251">
                            <component class="com.nm.sdk.data.pages.views.components.Template" id="252" screenId="UI_TemplateMultiFieldSet">
                                <component class="com.nm.sdk.data.pages.views.components.TemplateArea" id="253" name="CONTENT">
                                    <component class="com.nm.sdk.data.pages.views.components.Include" id="254" screenId="CMN_IncludeHyperlink">
                                        <parameterAssignments>
                                            <parameterAssignment expression="$isReadOnly" variable="isReadOnly"/>
                                            <parameterAssignment expression="CAST(CMN_hyperlink, $currentSowOtherHyperLink.value)" variable="hyperlink"/>
                                        </parameterAssignments>
                                    </component>
                                </component>
                                <component class="com.nm.sdk.data.pages.views.components.TemplateArea" id="255" name="COMPACTCONTENT">
                                    <component class="com.nm.sdk.data.pages.views.components.If" condition="$currentSowOtherHyperLink.value != null &amp;&amp; ISA($currentSowOtherHyperLink.value, 'CMN_hyperlink')" id="270">
                                        <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="256" text="=If $currentSowOtherHyperLink.value != null Then&#xa;   Return CAST(CMN_hyperlink, $currentSowOtherHyperLink.value).toString();&#xa;Else&#xa;   Return '';&#xa;End"/>
                                    </component>
                                </component>
                                <parameterAssignments>
                                    <parameterAssignment expression="$adaptiveFlowLayoutConfiguration" variable="adaptiveFlowLayoutConfiguration"/>
                                    <parameterAssignment expression="'Hyperlink'" variable="elementTitle"/>
                                    <parameterAssignment expression="$isReadOnly" variable="isReadOnly"/>
                                    <parameterAssignment expression="'CMN_hyperlink''" variable="objectType"/>
                                    <parameterAssignment expression="true" variable="compactMode"/>
                                    <parameterAssignment expression="'[LABEL:COB_kyc.sow.verification.documents]'" variable="fieldSetTitle"/>
                                    <parameterAssignment expression="$currentSowOtherHyperLink" variable="currentElement"/>
                                    <parameterAssignment expression="$familyRelationsRoyalty.evidences" variable="collection"/>
                                </parameterAssignments>
                            </component>
                        </customContainer>
                    </component>
                    <property name="groupHasLayout" value="false"/>
                    <property name="groupTitle" value="[LABEL:COB_kyc.sow.family.relations.royalty.area]"/>
                    <property name="inheritAllParentProperties" value="true"/>
                    <property name="labelWidthPercentage"/>
                    <property name="labelWidthPixels"/>
                    <property name="labelWidthType"/>
                    <property name="maxElementPixelWidth"/>
                    <property name="maxElementsPerRow"/>
                    <property name="targetElementPixelWidth"/>
                    <property name="topLabelCutoff"/>
                </customContainer>
                <property name="labelWidthPercentage"/>
                <property name="labelWidthPixels"/>
                <property name="labelWidthType"/>
                <property name="maxElementPixelWidth" value="=$adaptiveFlowLayoutConfiguration.maxElementPixelWidth"/>
                <property name="maxElementsPerRow" value="=$adaptiveFlowLayoutConfiguration.maxElementsPerRow;"/>
                <property name="targetElementPixelWidth" value="=$adaptiveFlowLayoutConfiguration.targetElementPixelWidth"/>
                <property name="topLabelCutoff" value="=$adaptiveFlowLayoutConfiguration.topLabelCutOff"/>
            </customContainer>
        </component>
    </view>
</screen>

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      1,956,568,0
<?xml version="1.0" encoding="UTF-8"?>
<object xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="object.xsd">
    <id>CMN_IncludePartyEnhancedVigilance.vigilance.first.memo.date</id>
    <uuid>c9f7d9f9-e29e-431d-b2d9-701b6ebec525</uuid>
    <type>Label</type>
    <name>CMN_IncludePartyEnhancedVigilance.vigilance.first.memo.date</name>
    <description/>
    <creator>segafredo</creator>
    <creationTime>1473241994330</creationTime>
    <modifier>segafredo</modifier>
    <modificationTime>1473242022607</modificationTime>
    <active>true</active>
    <versionUuid>9ab5df4e-3a90-49ef-88b8-b8be912e1edc</versionUuid>
    <parentVersionUuid/>
    <timestamp>1475260129806</timestamp>
    <systemId>h-global-predev.appway.com</systemId>
    <copyOfUuid>a217227e-5b2f-40e8-a8dc-fe470337b313</copyOfUuid>
    <committed>true</committed>
    <deleted>false</deleted>
    <userId>magloire</userId>
    <metaData/>
</object>

<?xml version="1.0" encoding="UTF-8"?>
<label version="1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="label.xsd">
    <text language="de">First Vigilance identification date</text>
    <text language="en">First Vigilance identification date</text>
    <text language="fr">First Vigilance identification date</text>
    <text language="it">First Vigilance identification date</text>
    <text language="pt">First Vigilance identification date</text>
    <text language="sp">First Vigilance identification date</text>
</label>

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              1,886,663,0
<?xml version="1.0" encoding="UTF-8"?>
<object xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="object.xsd">
    <id>DOCUMENT_TITLE-CMN_G11IBInternetBankingApplicationForm__CI</id>
    <uuid>e1210ff5-5478-40cb-a336-ad02fb58e2bb</uuid>
    <type>Label</type>
    <name/>
    <description/>
    <creator>bernard</creator>
    <creationTime>1473176815077</creationTime>
    <modifier>bernard</modifier>
    <modificationTime>1473176815077</modificationTime>
    <active>true</active>
    <versionUuid>998fcd34-3f61-4d71-ba30-e4f562a9ea3d</versionUuid>
    <parentVersionUuid/>
    <timestamp>1475260129806</timestamp>
    <systemId>h-global-predev.appway.com</systemId>
    <copyOfUuid>8abf69dc-58f1-4c20-bfa0-7804e921afae</copyOfUuid>
    <committed>true</committed>
    <deleted>false</deleted>
    <userId>magloire</userId>
    <metaData/>
</object>

<?xml version="1.0" encoding="UTF-8"?>
<label version="1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="label.xsd">
    <text language="ch">G11 - Internet Banking Application Form</text>
    <text language="de">G11 - Internet Banking Application Form</text>
    <text language="en">G11 - Internet Banking Application Form</text>
    <text language="fr">G11 - Internet Banking Application Form</text>
    <text language="it">G11 - Internet Banking Application Form</text>
    <text language="pt">G11 - Internet Banking Application Form</text>
    <text language="sp">G11 - Internet Banking Application Form</text>
</label>

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     1,916,4424,0
<?xml version="1.0" encoding="UTF-8"?>
<object xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="object.xsd">
    <id>CMN_EnhancedVigilance</id>
    <uuid>7990d1b6-45ef-436d-8fbb-1df74ad74193</uuid>
    <type>DataStructure</type>
    <name/>
    <description/>
    <creator>segafredo</creator>
    <creationTime>1473082739138</creationTime>
    <modifier>segafredo</modifier>
    <modificationTime>1473845984985</modificationTime>
    <active>true</active>
    <versionUuid>aa5292f5-378d-49aa-a478-13b039379ec9</versionUuid>
    <parentVersionUuid>40fde40a-7786-41a3-830e-f6fb7a85335b</parentVersionUuid>
    <timestamp>1475260129806</timestamp>
    <systemId>h-global-predev.appway.com</systemId>
    <copyOfUuid>6469db7c-33b5-4b89-adad-0dae0e3a81e1</copyOfUuid>
    <committed>true</committed>
    <deleted>false</deleted>
    <userId>magloire</userId>
    <metaData/>
</object>

<?xml version="1.0" encoding="UTF-8"?>
<class dname="" name="CMN_EnhancedVigilance" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="dataitemclass.xsd">
    <superclasses/>
    <properties>
        <property collection="none" description="" name="accompaniment" reference="false" sequenceNr="0" type="CMN_Accompaniment" userId="segafredo" uuid="59f2c86c-97eb-48c9-838e-4a1868caa6b2"/>
        <property collection="none" description="" name="category" reference="false" sequenceNr="0" type="String" userId="segafredo" uuid="915121ed-a0ae-4944-b86c-c3224753abe0"/>
        <property collection="none" description="" name="firstMemoDate" reference="false" sequenceNr="0" type="Date" userId="segafredo" uuid="b2287ec8-1052-43c2-9cbe-66b9a6cc31c5"/>
        <property collection="none" description="is the vigilance active ?" name="isVigilanceActive" reference="false" sequenceNr="0" type="Boolean" userId="segafredo" uuid="da410cb9-3763-4a8e-8fce-1ed010242d3d"/>
        <property collection="none" description="" name="lastReviewDate" reference="false" sequenceNr="0" type="Date" userId="segafredo" uuid="6c8f4da7-9811-40b5-bb17-4c44d08e65fe"/>
        <property collection="none" description="" name="mitigatingAction" reference="false" sequenceNr="0" type="String" userId="segafredo" uuid="b765e3a0-bdfe-474f-9e0d-3c3013d1b0f1"/>
        <property collection="none" description="" name="nextReviewDate" reference="false" sequenceNr="0" type="Date" userId="segafredo" uuid="be10ef8d-0366-436a-9eaa-7717694620df"/>
        <property collection="none" description="" name="reason" reference="false" sequenceNr="0" type="String" userId="segafredo" uuid="7ec3f2f6-006d-4862-8c65-92ea68cf621a"/>
    </properties>
    <methods>
        <method name="activateVigilance" userId="segafredo" uuid="00000000-46c0-1a53-0000-000000000000">
            <definition><![CDATA[Function activateVigilance() : Nothing Begin
   $this.isVigilanceActive := true;
End]]></definition>
        </method>
        <method name="getAgeVigilanceCategory" userId="segafredo" uuid="ffffffff-aa7c-6a5b-0000-000000000000">
            <definition><![CDATA[StaticFunction getAgeVigilanceCategory() : String Begin
   Return 'overAged';
End]]></definition>
        </method>
        <method name="hasAgeVigilanceCategory" userId="segafredo" uuid="ffffffff-cdfe-239f-0000-000000000000">
            <definition><![CDATA[Function hasAgeVigilanceCategory() : Boolean Begin
   Return NotEmpty($this.category) and $this.category.contains(CMN_EnhancedVigilance.getAgeVigilanceCategory());
End]]></definition>
        </method>
        <method name="hasCategoryEnforcingAccompaniment" userId="segafredo" uuid="00000000-5120-b7e2-0000-000000000000">
            <definition><![CDATA[Function hasCategoryEnforcingAccompaniment() : Boolean Begin
   If EMPTY($this.category) Then
      Return false;
   Else
      Record $r;
      Indexed String $accompanimentCategories := MAP(RECORDS('CMN_VigilanceCategories__selector', {'onlyWithAccompaniment'=true}:Any), TOSTRING($r.getValue('id')), $r, String);
      String $ctg;
      Return SIZE(FILTER($accompanimentCategories, $this.category.contains($ctg), $ctg)) > 0;
   End
End]]></definition>
        </method>
        <method name="NEW" userId="segafredo" uuid="00000000-0001-2d80-0000-000000000000">
            <definition><![CDATA[Function NEW() : Nothing Begin
   $this.isVigilanceActive := null;
   $this.accompaniment := NEW(CMN_Accompaniment);
End]]></definition>
        </method>
        <method name="preloadAgeVigilanceCategory" userId="segafredo" uuid="00000000-7657-f18e-0000-000000000000">
            <definition><![CDATA[Function preloadAgeVigilanceCategory() : Nothing Begin
   If EMPTY($this.category) Then
      $this.category := CMN_EnhancedVigilance.getAgeVigilanceCategory();
   ElseIf ! $this.category.contains(CMN_EnhancedVigilance.getAgeVigilanceCategory()) Then
      $this.category := CONCAT($this.category, '|', CMN_EnhancedVigilance.getAgeVigilanceCategory());
   End
End]]></definition>
        </method>
        <method name="setAccompanimentAsMandatory" userId="segafredo" uuid="00000000-1001-fea0-0000-000000000000">
            <definition><![CDATA[Function setAccompanimentAsMandatory() : Nothing Begin
   $this.activateVigilance();
   $this.accompaniment.toBeAccompanied := 'mandatory';
End]]></definition>
        </method>
    </methods>
</class>

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     1,862,1818,2
<?xml version="1.0" encoding="UTF-8"?>
<object xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="object.xsd">
    <id>CMN_G11IBInternetBankingTC__CI</id>
    <uuid>2f611575-3ae3-443b-8b03-1597805b3ea6</uuid>
    <type>PdfOutput</type>
    <name/>
    <description/>
    <creator>bernard</creator>
    <creationTime>1472830059612</creationTime>
    <modifier>bernard</modifier>
    <modificationTime>1472830083424</modificationTime>
    <active>true</active>
    <versionUuid>ae2d196e-dae7-40dc-85ae-695cac6f2b47</versionUuid>
    <parentVersionUuid/>
    <timestamp>1475260129806</timestamp>
    <systemId>h-global-predev.appway.com</systemId>
    <copyOfUuid>a521890e-0d95-4623-8c66-797349208fee</copyOfUuid>
    <committed>true</committed>
    <deleted>false</deleted>
    <userId>magloire</userId>
    <metaData/>
</object>

<?xml version="1.0" encoding="UTF-8"?>
<outputform version="1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="pdfoutput.xsd">
    <parameterDefinitions/>
    <originalfile>PBCI-InternetBankingTandC.pdf</originalfile>
    <sourcefileversion/>
    <languageid>en</languageid>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
</outputform>

pdfFile=8703af29-8567-413d-8be1-bdc1844e233f
pdffile=8703af29-8567-413d-8be1-bdc1844e233f
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               1,910,684,0
<?xml version="1.0" encoding="UTF-8"?>
<object xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="object.xsd">
    <id>DOCUMENT_TITLE-COB_US02AddDelete__US</id>
    <uuid>f6a9ca3e-4d57-43a8-88c5-ae5d64deb0a5</uuid>
    <type>Label</type>
    <name/>
    <description/>
    <creator>bellanca</creator>
    <creationTime>1453805592859</creationTime>
    <modifier>43368599</modifier>
    <modificationTime>1473885187751</modificationTime>
    <active>true</active>
    <versionUuid>3004d584-3cc6-4195-9d70-bac409e695e0</versionUuid>
    <parentVersionUuid>50af6e89-2945-409e-92bc-916b5d772543</parentVersionUuid>
    <timestamp>1475260129806</timestamp>
    <systemId>HSBC COB US DEV</systemId>
    <copyOfUuid>16dfa102-f825-4b61-8222-dc17a881330c</copyOfUuid>
    <committed>true</committed>
    <deleted>false</deleted>
    <userId>magloire</userId>
    <metaData/>
</object>

<?xml version="1.0" encoding="UTF-8"?>
<label version="1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="label.xsd">
    <text language="ch">Amendment to Add/Delete Authorized Signers</text>
    <text language="de">Amendment to Add/Delete Authorized Signers</text>
    <text language="en">Amendment to Add/Delete Authorized Signers</text>
    <text language="fr">Amendment to Add/Delete Authorized Signers</text>
    <text language="it">Amendment to Add/Delete Authorized Signers</text>
    <text language="pt">Amendment to Add/Delete Authorized Signers</text>
    <text language="sp">Amendment to Add/Delete Authorized Signers</text>
</label>

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        1,857,20838,0
<?xml version="1.0" encoding="UTF-8"?>
<object xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="object.xsd">
    <id>CMN_IncludeAccompaniment</id>
    <uuid>05694a2b-db2e-4be5-8acf-1e71a06a627a</uuid>
    <type>Screen</type>
    <name/>
    <description/>
    <creator>segafredo</creator>
    <creationTime>1473768041998</creationTime>
    <modifier>segafredo</modifier>
    <modificationTime>1474019467584</modificationTime>
    <active>true</active>
    <versionUuid>eff89baf-1e07-48d5-89c4-8455b008c967</versionUuid>
    <parentVersionUuid/>
    <timestamp>1475260129806</timestamp>
    <systemId>h-global-predev.appway.com</systemId>
    <copyOfUuid>5ba8f39e-2df4-4030-a884-9d037f2b83c7</copyOfUuid>
    <committed>true</committed>
    <deleted>false</deleted>
    <userId>magloire</userId>
    <metaData/>
</object>

<?xml version="1.0" encoding="UTF-8"?>
<screen version="1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="screen.xsd">
    <parameterDefinitions>
        <parameterDefinition collectionType="none" defaultExpression="" description="" mode="assigned" type="CMN_EnhancedVigilance" variable="enhancedVigilance"/>
        <parameterDefinition collectionType="none" defaultExpression="" description="" mode="assigned" type="String" variable="externalAua"/>
        <parameterDefinition collectionType="none" defaultExpression="$enhancedVigilance.accompaniment" description="" mode="local" type="CMN_Accompaniment" variable="accompaniment"/>
        <parameterDefinition collectionType="none" defaultExpression="" description="" mode="assigned" type="CMN_ValidationManager" variable="validationManager"/>
        <parameterDefinition collectionType="none" defaultExpression="NEW(LIB_GenericWrapper)" description="" mode="local" type="LIB_GenericWrapper" variable="currentAccompanier"/>
        <parameterDefinition collectionType="none" defaultExpression="" description="" mode="assigned" type="Boolean" variable="hasCategoryEnforcingAccompaniment"/>
    </parameterDefinitions>
    <view class="com.nm.sdk.data.pages.views.components.View" id="0">
        <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutGroup" id="1">
            <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="2">
                <component class="com.nm.sdk.data.pages.views.components.Template" id="3" screenId="CMN_TemplateValidationBox">
                    <component class="com.nm.sdk.data.pages.views.components.TemplateArea" id="4" name="CONTENT">
                        <component class="com.nm.sdk.data.pages.views.components.Group" disabled="$hasCategoryEnforcingAccompaniment" id="42" name="">
                            <component class="com.nm.sdk.data.pages.views.components.Infobox" id="5" label="[LABEL:CMN_IncludePartyEnhancedVigilance.offer.of.accompaniment]" orientation="vertical">
                                <component binding="$accompaniment.toBeAccompanied" class="com.nm.sdk.data.pages.views.components.RadiobuttonList" id="6" orientation="horizontal" valign="middle">
                                    <action class="com.nm.sdk.data.pages.views.actions.ExpressionAction" eventType="onchange" expression="$enhancedVigilance.accompaniment.accompaniedByStatus := null" phase="process"/>
                                    <action class="com.nm.sdk.data.pages.views.actions.AjaxUpdateAreaAction" eventType="onchange" htmlIds="=$externalAua" validationScope="limited"/>
                                    <dataSource catalogueId="CMN_AccompanimentOffers" class="com.nm.sdk.data.pages.views.options.CatalogueDataSource" columnName="description"/>
                                </component>
                            </component>
                        </component>
                    </component>
                    <parameterAssignments>
                        <parameterAssignment expression="NotEmpty($enhancedVigilance.accompaniment.toBeAccompanied)" variable="isValid"/>
                        <parameterAssignment expression="'toBeAccompanied'" variable="itemId"/>
                        <parameterAssignment expression="'[LABEL:CMN_IncludePartyEnhancedVigilance.accompaniment.validation.error]'" variable="messageWhenNotValid"/>
                        <parameterAssignment expression="$validationManager" variable="validationManager"/>
                    </parameterAssignments>
                </component>
            </customContainer>
            <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="7">
                <component class="com.nm.sdk.data.pages.views.components.Template" id="8" screenId="CMN_TemplateValidationBox">
                    <component class="com.nm.sdk.data.pages.views.components.TemplateArea" id="9" name="CONTENT">
                        <component class="com.nm.sdk.data.pages.views.components.Infobox" id="10" label="[LABEL:CMN_IncludePartyEnhancedVigilance.accompaniment.status]" orientation="vertical">
                            <component binding="$accompaniment.accompaniedByStatus" class="com.nm.sdk.data.pages.views.components.RadiobuttonList" id="11" orientation="horizontal" valign="middle">
                                <action class="com.nm.sdk.data.pages.views.actions.SkipPhaseAction" eventType="onchange" skipValidatePhase="true"/>
                                <action class="com.nm.sdk.data.pages.views.actions.ExpressionAction" eventType="onchange"
                                    expression="If ! $accompaniment.isAccompanimentAccepted() Then&#xa;   $accompaniment.accompaniers.clear();&#xa;Else&#xa;   $accompaniment.accompaniedByStatusReason := null;&#xa;End" phase="process"/>
                                <action class="com.nm.sdk.data.pages.views.actions.AjaxUpdateAreaAction" eventType="onchange" htmlIds="auaAccompaniers" validationScope="limited"/>
                                <dataSource class="com.nm.sdk.data.pages.views.options.ExpressionDataSource" collection="RECORDS('CMN_AccompanimentStatues', {'accompanimentOffer'=$accompaniment.toBeAccompanied}:Any)" collectionType="none" id="TOSTRING($item.getValue('id'))"
                                    label="TOSTRING($item.getValue('description'))" type="Record" variable="item"/>
                            </component>
                        </component>
                    </component>
                    <parameterAssignments>
                        <parameterAssignment expression="$validationManager" variable="validationManager"/>
                        <parameterAssignment expression="'accompaniedByStatus'" variable="itemId"/>
                        <parameterAssignment expression="'[LABEL:CMN_IncludePartyEnhancedVigilance.accompaniment.status.validation.error]'" variable="messageWhenNotValid"/>
                        <parameterAssignment expression="&#xa;NotEmpty($enhancedVigilance.accompaniment.accompaniedByStatus)" variable="isValid"/>
                    </parameterAssignments>
                </component>
            </customContainer>
            <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutGroup" htmlId="auaAccompaniers" id="12">
                <component class="com.nm.sdk.data.pages.views.components.If" condition="$enhancedVigilance.accompaniment.isAccompanimentAccepted()" id="13">
                    <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutFullWidthElement" editorDescription="Accompaniers" id="14">
                        <component class="com.nm.sdk.data.pages.views.components.Template" id="15" screenId="UI_TemplateMultiFieldSet">
                            <component class="com.nm.sdk.data.pages.views.components.TemplateArea" id="16" name="COMPACTCONTENT">
                                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.floatlayout.FloatLayout" id="17">
                                    <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.floatlayout.FloatLayoutElement" id="18">
                                        <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="19" text="=CAST(CMN_Accompanier, $currentAccompanier.value).name"/>
                                        <property name="align"/>
                                    </customContainer>
                                    <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.floatlayout.FloatLayoutElement" id="20">
                                        <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="21" text="=CAST(CMN_Accompanier, $currentAccompanier.value).relationship"/>
                                        <property name="align" value="Left"/>
                                    </customContainer>
                                </customContainer>
                            </component>
                            <component class="com.nm.sdk.data.pages.views.components.TemplateArea" id="22" name="CONTENT">
                                <component class="com.nm.sdk.data.pages.views.components.Include" id="23" screenId="CMN_IncludeAccompanier">
                                    <parameterAssignments>
                                        <parameterAssignment expression="CAST(CMN_Accompanier, $currentAccompanier.value)" variable="accompanier"/>
                                        <parameterAssignment expression="$validationManager" variable="validationManager"/>
                                    </parameterAssignments>
                                </component>
                            </component>
                            <parameterAssignments>
                                <parameterAssignment expression="'CMN_Accompanier'" variable="objectType"/>
                                <parameterAssignment expression="32" variable="maxCardinality"/>
                                <parameterAssignment expression="$currentAccompanier" variable="currentElement"/>
                                <parameterAssignment expression="'Accompanier'" variable="elementTitle"/>
                                <parameterAssignment expression="true" variable="compactMode"/>
                                <parameterAssignment expression="1" variable="minCardinality"/>
                                <parameterAssignment expression="$accompaniment.accompaniers" variable="collection"/>
                                <parameterAssignment expression="'[LABEL:CMN_IncludeAccompaniment.accompanied.by]'" variable="fieldSetTitle"/>
                            </parameterAssignments>
                        </component>
                    </customContainer>
                </component>
                <component class="com.nm.sdk.data.pages.views.components.ElseIf" condition="NotEmpty($accompaniment.toBeAccompanied) and NotEmpty($accompaniment.accompaniedByStatus)" id="41">
                    <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutFullWidthElement" id="25">
                        <component class="com.nm.sdk.data.pages.views.components.Template" id="26" screenId="CMN_TemplateValidationBox">
                            <component class="com.nm.sdk.data.pages.views.components.TemplateArea" id="27" name="CONTENT">
                                <component class="com.nm.sdk.data.pages.views.components.Infobox" id="28" label="[LABEL:CMN_IncludePartyEnhancedVigilance.no.accompaniment.offer.reason]" orientation="vertical">
                                    <component binding="$accompaniment.accompaniedByStatusReason" class="com.nm.sdk.data.pages.views.components.TextArea" id="29" rows="4">
                                        <style>
                                            <property name="max-width" value="none"/>
                                        </style>
                                    </component>
                                </component>
                            </component>
                            <parameterAssignments>
                                <parameterAssignment expression="true" variable="isValid"/>
                                <parameterAssignment expression="'accompaniedByStatusReason'" variable="itemId"/>
                                <parameterAssignment expression="$validationManager" variable="validationManager"/>
                            </parameterAssignments>
                        </component>
                    </customContainer>
                </component>
                <property name="groupHasLayout" value="false"/>
                <property name="groupTitle"/>
                <property name="inheritAllParentProperties" value="true"/>
                <property name="labelWidthPercentage"/>
                <property name="labelWidthPixels"/>
                <property name="labelWidthType"/>
                <property name="maxElementPixelWidth"/>
                <property name="maxElementsPerRow"/>
                <property name="targetElementPixelWidth"/>
                <property name="topLabelCutoff"/>
                <property name="validationExpression"/>
                <property name="validationMessage"/>
            </customContainer>
            <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="31">
                <component class="com.nm.sdk.data.pages.views.components.Template" id="32" screenId="CMN_TemplateValidationBox">
                    <component class="com.nm.sdk.data.pages.views.components.TemplateArea" id="33" name="CONTENT">
                        <component class="com.nm.sdk.data.pages.views.components.Infobox" id="34" label="[LABEL:CMN_IncludeAccompaniment.last.offer.date]" orientation="vertical">
                            <customControl adapterName="ComponentExtension" binding="$accompaniment.lastOfferDate" class="com.nm.sdk.data.pages.views.components.CustomControl" componentClass="com.nm.extensions.widgets.datepicker.DatePicker" id="35">
                                <converter class="com.nm.sdk.data.pages.views.converters.ExpressionConverter" input="IF(CMN_DateFormatValidator($value), LIB_DateHelper.parse($value), null)" output="LIB_DateHelper.formatDate($value)" variable="value" variableCollectionType="none" variableType="Date"/>
                                <validator class="com.nm.sdk.data.pages.views.validators.FunctionValidator" enabledCondition="true" functionName="CMN_DateFormatValidator" message="='[LABEL:CMN_date.invalid.format]' &amp; ' ' &amp; LIB_ConfigHelper.getDateFormat()" validationValue="InputValue"/>
                                <action class="com.nm.sdk.data.pages.views.actions.SkipPhaseAction" eventType="onchange" skipValidatePhase="true"/>
                                <action class="com.nm.sdk.data.pages.views.actions.AjaxUpdateAreaAction" eventType="onchange" htmlIds="auaNextOffer" validationScope="limited"/>
                                <property name="disableTyping" value="false"/>
                                <property name="format" value="=&#xa;LIB_ConfigHelper.getDatePickerFormat()"/>
                                <property name="maxDate"/>
                                <property name="minDate"/>
                                <property name="showButtonPanel" value="false"/>
                                <property name="showMonthDropdown" value="true"/>
                                <property name="showYearDropdown" value="true"/>
                                <property name="startDayIndex" value="-1"/>
                                <property name="textIfDisabled" value="false"/>
                                <property name="validateMinMaxDate" value="true"/>
                                <property name="yearRange" value="c-10:c+10"/>
                            </customControl>
                        </component>
                    </component>
                    <parameterAssignments>
                        <parameterAssignment expression="$validationManager" variable="validationManager"/>
                        <parameterAssignment expression="'[LABEL:CMN_IncludePartyEnhancedVigilance.last.accompaniment.offer.validation.error]'" variable="messageWhenNotValid"/>
                        <parameterAssignment expression="'lastOfferDate'" variable="itemId"/>
                        <parameterAssignment expression="$enhancedVigilance.accompaniment.lastOfferDate != null" variable="isValid"/>
                    </parameterAssignments>
                </component>
            </customContainer>
            <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" htmlId="auaNextOffer" id="36">
                <component class="com.nm.sdk.data.pages.views.components.Template" id="37" screenId="CMN_TemplateValidationBox">
                    <component class="com.nm.sdk.data.pages.views.components.TemplateArea" id="38" name="CONTENT">
                        <component class="com.nm.sdk.data.pages.views.components.Infobox" id="39" label="[LABEL:CMN_IncludeAccompaniment.next.offer.date]" orientation="vertical">
                            <customControl adapterName="ComponentExtension" binding="$accompaniment.nextOfferDate" class="com.nm.sdk.data.pages.views.components.CustomControl" componentClass="com.nm.extensions.widgets.datepicker.DatePicker" id="40">
                                <converter class="com.nm.sdk.data.pages.views.converters.ExpressionConverter" input="IF(CMN_DateFormatValidator($value), LIB_DateHelper.parse($value), null)" output="LIB_DateHelper.formatDate($value)" variable="value" variableCollectionType="none" variableType="Date"/>
                                <validator class="com.nm.sdk.data.pages.views.validators.FunctionValidator" enabledCondition="true" functionName="CMN_DateFormatValidator" message="='[LABEL:CMN_date.invalid.format]' &amp; ' ' &amp; LIB_ConfigHelper.getDateFormat()" validationValue="InputValue"/>
                                <property name="disableTyping" value="false"/>
                                <property name="format" value="=&#xa;LIB_ConfigHelper.getDatePickerFormat()"/>
                                <property name="maxDate"/>
                                <property name="minDate"/>
                                <property name="showButtonPanel" value="false"/>
                                <property name="showMonthDropdown" value="true"/>
                                <property name="showYearDropdown" value="true"/>
                                <property name="startDayIndex" value="-1"/>
                                <property name="textIfDisabled" value="false"/>
                                <property name="validateMinMaxDate" value="true"/>
                                <property name="yearRange" value="c-10:c+10"/>
                            </customControl>
                        </component>
                    </component>
                    <parameterAssignments>
                        <parameterAssignment expression="$validationManager" variable="validationManager"/>
                        <parameterAssignment expression="'[LABEL:CMN_IncludePartyEnhancedVigilance.next.accompaniment.offer.validation.error]'" variable="messageWhenNotValid"/>
                        <parameterAssignment expression="'nextOfferDate'" variable="itemId"/>
                        <parameterAssignment expression="$enhancedVigilance.accompaniment.lastOfferDate == null or $enhancedVigilance.accompaniment.nextOfferDate != null" variable="isValid"/>
                    </parameterAssignments>
                </component>
            </customContainer>
            <property name="groupHasLayout" value="true"/>
            <property name="groupTitle" value="[LABEL:CMN_IncludeAccompaniment.accompaniment]"/>
            <property name="inheritAllParentProperties" value="true"/>
            <property name="labelWidthPercentage"/>
            <property name="labelWidthPixels"/>
            <property name="labelWidthType"/>
            <property name="maxElementPixelWidth"/>
            <property name="maxElementsPerRow"/>
            <property name="targetElementPixelWidth"/>
            <property name="topLabelCutoff"/>
            <property name="validationExpression"/>
            <property name="validationMessage"/>
        </customContainer>
    </view>
</screen>

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 1,950,9934,2
<?xml version="1.0" encoding="UTF-8"?>
<object xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="object.xsd">
    <id>COB_US29TaxAttachmentX__US</id>
    <uuid>e2691d7c-5166-4034-a6e2-8bb5bccc2794</uuid>
    <type>PdfOutput</type>
    <name>COB_US29TaxAttachmentX__US</name>
    <description/>
    <creator>pbgbtestuser100</creator>
    <creationTime>1473316835098</creationTime>
    <modifier>pbgbtestuser104</modifier>
    <modificationTime>1474051540222</modificationTime>
    <active>true</active>
    <versionUuid>b221ad22-c56c-4fc2-9eeb-463949239047</versionUuid>
    <parentVersionUuid>a721dcd1-2bd6-44f9-a6d7-042beef0df15</parentVersionUuid>
    <timestamp>1475260129806</timestamp>
    <systemId>HSBC COB US DEV</systemId>
    <copyOfUuid>b2dd9bb9-74be-4ca8-847b-549bfe7e7d80</copyOfUuid>
    <committed>true</committed>
    <deleted>false</deleted>
    <userId>magloire</userId>
    <metaData/>
</object>

<?xml version="1.0" encoding="UTF-8"?>
<outputform version="1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="pdfoutput.xsd">
    <parameterDefinitions>
        <parameterDefinition collectionType="none" defaultExpression="" description="" mode="assigned" type="CMN_BusinessRelationship" variable="businessRelationship"/>
        <parameterDefinition collectionType="none" defaultExpression="NEW(CMN_DocumentHelperBusinessRelationship, $businessRelationship)" description="" mode="local" type="CMN_DocumentHelperBusinessRelationship" variable="businessRelationshipHelper"/>
        <parameterDefinition collectionType="none" defaultExpression="" description="" mode="assigned" type="CMN_Party" variable="party"/>
        <parameterDefinition collectionType="none" defaultExpression="CAST(CMN_DocumentHelperPhysicalPerson, CMN_DocumentHelperParty.getInstance(CAST(CMN_PhysicalPerson, $party)))" description="" mode="local" type="CMN_DocumentHelperPhysicalPerson" variable="partyHelper"/>
    </parameterDefinitions>
    <originalfile>Tax-AttachmentX.pdf</originalfile>
    <sourcefileversion/>
    <languageid>en</languageid>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
        <formfield>
            <name>Account name</name>
            <description/>
            <formfieldid>field_1473317128680_0</formfieldid>
            <nextformfieldid/>
            <replicationstrategy>0</replicationstrategy>
            <emptyvisibility>false</emptyvisibility>
            <transparency>1.0</transparency>
            <fieldMarkerExpression/>
            <fieldMarkerVisible>false</fieldMarkerVisible>
            <copy>nocopy</copy>
            <height>21.6</height>
            <leftposition>128.0</leftposition>
            <topposition>313.6</topposition>
            <width>388.8</width>
            <zindex>1</zindex>
            <expression>$partyHelper.getFullName()</expression>
            <visibility/>
            <blank>false</blank>
            <valuefieldtype>TEXT</valuefieldtype>
        </formfield>
        <formfield>
            <name>US mailing address</name>
            <description/>
            <formfieldid>field_1473318807921_1</formfieldid>
            <nextformfieldid/>
            <replicationstrategy>0</replicationstrategy>
            <emptyvisibility>false</emptyvisibility>
            <transparency>1.0</transparency>
            <fieldMarkerExpression/>
            <fieldMarkerVisible>false</fieldMarkerVisible>
            <copy>nocopy</copy>
            <height>39.2</height>
            <leftposition>36.8</leftposition>
            <topposition>585.6</topposition>
            <width>176.0</width>
            <zindex>1</zindex>
            <expression>$partyHelper.getUsMailDropAdress()</expression>
            <visibility/>
            <blank>false</blank>
            <valuefieldtype>TEXT</valuefieldtype>
        </formfield>
        <formfield>
            <name>US residence Address</name>
            <description/>
            <formfieldid>field_1473319430091_2</formfieldid>
            <nextformfieldid/>
            <replicationstrategy>0</replicationstrategy>
            <emptyvisibility>false</emptyvisibility>
            <transparency>1.0</transparency>
            <fieldMarkerExpression/>
            <fieldMarkerVisible>false</fieldMarkerVisible>
            <copy>nocopy</copy>
            <height>39.2</height>
            <leftposition>214.4</leftposition>
            <topposition>584.8</topposition>
            <width>175.2</width>
            <zindex>1</zindex>
            <expression>$partyHelper.getAddressOneLine()</expression>
            <visibility/>
            <blank>false</blank>
            <valuefieldtype>TEXT</valuefieldtype>
        </formfield>
        <formfield>
            <name>US phone numbers</name>
            <description/>
            <formfieldid>field_1473319689029_3</formfieldid>
            <nextformfieldid/>
            <replicationstrategy>0</replicationstrategy>
            <emptyvisibility>false</emptyvisibility>
            <transparency>1.0</transparency>
            <fieldMarkerExpression/>
            <fieldMarkerVisible>false</fieldMarkerVisible>
            <copy>nocopy</copy>
            <height>38.4</height>
            <leftposition>392.8</leftposition>
            <topposition>584.8</topposition>
            <width>175.2</width>
            <zindex>1</zindex>
            <expression>$partyHelper.getPhone1().getNumber()</expression>
            <visibility/>
            <blank>false</blank>
            <valuefieldtype>TEXT</valuefieldtype>
        </formfield>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
        <formfield>
            <name>US address reason</name>
            <description/>
            <formfieldid>field_1473324612888_9</formfieldid>
            <nextformfieldid/>
            <replicationstrategy>0</replicationstrategy>
            <emptyvisibility>false</emptyvisibility>
            <transparency>1.0</transparency>
            <fieldMarkerExpression/>
            <fieldMarkerVisible>false</fieldMarkerVisible>
            <copy>nocopy</copy>
            <height>28.0</height>
            <leftposition>70.4</leftposition>
            <topposition>549.6</topposition>
            <width>485.6</width>
            <zindex>1</zindex>
            <expression>$partyHelper.getUsAddressReasonAndDetails()</expression>
            <visibility/>
            <blank>false</blank>
            <valuefieldtype>TEXT</valuefieldtype>
        </formfield>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
        <formfield>
            <name>Reason fro US phone numbers</name>
            <description/>
            <formfieldid>field_1473324284068_7</formfieldid>
            <nextformfieldid/>
            <replicationstrategy>0</replicationstrategy>
            <emptyvisibility>false</emptyvisibility>
            <transparency>1.0</transparency>
            <fieldMarkerExpression/>
            <fieldMarkerVisible>false</fieldMarkerVisible>
            <copy>nocopy</copy>
            <height>56.0</height>
            <leftposition>54.607958984375</leftposition>
            <topposition>194.4</topposition>
            <width>506.4</width>
            <zindex>1</zindex>
            <expression>$partyHelper.getUsPhoneFaxReasonAndDetails()</expression>
            <visibility/>
            <blank>false</blank>
            <valuefieldtype>TEXT</valuefieldtype>
        </formfield>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
        <formfield>
            <name>name</name>
            <description/>
            <formfieldid>field_1473323926594_4</formfieldid>
            <nextformfieldid/>
            <replicationstrategy>0</replicationstrategy>
            <emptyvisibility>false</emptyvisibility>
            <transparency>1.0</transparency>
            <fieldMarkerExpression/>
            <fieldMarkerVisible>false</fieldMarkerVisible>
            <copy>nocopy</copy>
            <height>17.6</height>
            <leftposition>166.4</leftposition>
            <topposition>500.0</topposition>
            <width>372.0</width>
            <zindex>1</zindex>
            <expression>$partyHelper.getFullName()</expression>
            <visibility/>
            <blank>false</blank>
            <valuefieldtype>TEXT</valuefieldtype>
        </formfield>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
        <formfield>
            <name>Print Name</name>
            <description/>
            <formfieldid>field_1473324004685_5</formfieldid>
            <nextformfieldid/>
            <replicationstrategy>0</replicationstrategy>
            <emptyvisibility>false</emptyvisibility>
            <transparency>1.0</transparency>
            <fieldMarkerExpression/>
            <fieldMarkerVisible>false</fieldMarkerVisible>
            <copy>nocopy</copy>
            <height>30.4</height>
            <leftposition>45.6</leftposition>
            <topposition>281.6</topposition>
            <width>147.2</width>
            <zindex>1</zindex>
            <expression>$partyHelper.getFullName()</expression>
            <visibility/>
            <blank>false</blank>
            <valuefieldtype>TEXT</valuefieldtype>
        </formfield>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
        <formfield>
            <name>Account name</name>
            <description/>
            <formfieldid>field_1473324097480_6</formfieldid>
            <nextformfieldid/>
            <replicationstrategy>0</replicationstrategy>
            <emptyvisibility>false</emptyvisibility>
            <transparency>1.0</transparency>
            <fieldMarkerExpression/>
            <fieldMarkerVisible>false</fieldMarkerVisible>
            <copy>nocopy</copy>
            <height>19.2</height>
            <leftposition>164.047998046875</leftposition>
            <topposition>153.552001953125</topposition>
            <width>358.4</width>
            <zindex>1</zindex>
            <expression>$partyHelper.getFullName()</expression>
            <visibility/>
            <blank>false</blank>
            <valuefieldtype>TEXT</valuefieldtype>
        </formfield>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
</outputform>

pdfFile=f37197f6-8d16-4f4a-8d84-450fa0718c1c
pdffile=f37197f6-8d16-4f4a-8d84-450fa0718c1c
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   1,1023,270061,0
<?xml version="1.0" encoding="UTF-8"?>
<object xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="object.xsd">
    <id>INT_SILMappingCMNtoSIL_v1</id>
    <uuid>1112cddd-8471-4578-96ef-cf29e75cae57</uuid>
    <type>DataStructure</type>
    <name/>
    <description/>
    <creator>vincent</creator>
    <creationTime>1470396413615</creationTime>
    <modifier>pezzi</modifier>
    <modificationTime>1474625251274</modificationTime>
    <active>true</active>
    <versionUuid>fb2c60e7-7166-41d9-8415-15d309bf745a</versionUuid>
    <parentVersionUuid>c8a9e9a0-9d14-4bb6-9885-1ca7fc12948d</parentVersionUuid>
    <timestamp>1475260129806</timestamp>
    <systemId>h-global-predev.appway.com</systemId>
    <copyOfUuid>c1d33680-43b0-4782-a3bc-efbb88dc2457</copyOfUuid>
    <committed>true</committed>
    <deleted>false</deleted>
    <userId>magloire</userId>
    <metaData>
        <property name="Refactoring-ChangeID" value="INT_SILMapping>INT_SILMappingCMNtoSIL"/>
    </metaData>
</object>

<?xml version="1.0" encoding="UTF-8"?>
<class dname="" name="INT_SILMappingCMNtoSIL_v1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="dataitemclass.xsd">
    <superclasses>
        <superclass class="INT_Mapping"/>
    </superclasses>
    <properties/>
    <methods>
        <method name="_compareEntities" userId="pezzi" uuid="ffffffff-8892-8987-0000-000000000000">
            <definition><![CDATA[/**
  Description of function '_compareEntities'.
  @param $modifiedEntity Modified object
  @param $unmodifiedEntity Unmodified Object
  @return       The new object contain only add or removed value in the secondDataEntity
*/
StaticFunction _compareEntities(Any $modifiedEntity, Any $initialEntity) : Any Begin
   If NOTEQUAL($modifiedEntity.getDataEntityType(), $initialEntity.getDataEntityType()) Then
      FAIL('NOT SAME TYPE OF ENTITY');
   End
   If $modifiedEntity == $initialEntity Then
      If INT_Mapping._isPrimitiveType($modifiedEntity) Then
         Return NEW($initialEntity.getDataEntityType());
      Else
         Return CreateSkeletonDataClass($initialEntity.getDataEntityType());
      End
   End
   If ISA($modifiedEntity, com.nm.sdk.data.dataitems.DataObject) and ISA($initialEntity, com.nm.sdk.data.dataitems.DataObject) Then
      com.nm.sdk.data.dataitems.DataObject $modifiedDataObject := CAST(com.nm.sdk.data.dataitems.DataObject, $modifiedEntity);
      com.nm.sdk.data.dataitems.DataObject $initialDataObject := CAST(com.nm.sdk.data.dataitems.DataObject, $initialEntity);
      //For each property of the object
      ForEach Any $propertyName In $initialDataObject.getPropertiesMap().keySet() Do
         Any $modifiedProperty := $modifiedDataObject.getProperty($propertyName);
         Any $initialProperty := $initialDataObject.getProperty($propertyName);
         If $modifiedProperty == $initialProperty Then
            //We do nothing if it is the same entity, we remove it from the modifiedEntity
            $modifiedDataObject.removeProperty($propertyName);
         Else
            PRINTLN('different property: ', $propertyName);
            //properties are different, null or not null
            If $initialProperty != null Then
               //initialProperty is not null
               If $modifiedProperty != null Then
                  //PRINTLN('both are not null');
                  //modified is not null so they are different, we keep B if it's a primitive, 
                  If not INT_Mapping._isPrimitiveType($initialProperty) Then
                     //is a collection
                     If TypeOf($initialProperty, false).isCollectionType() Then
                        //PRINTLN('is a collection');
                        //call the function on each of the object of the Collection
                        Integer $subObjectIter := 1;
                        For $subObjectIter := 1 Condition $subObjectIter <= CAST(Indexed Any, $initialProperty).size() Step $subObjectIter := $subObjectIter + 1 Do
                           Any $initialSubObject := CAST(Indexed Any, $initialProperty)[$subObjectIter];
                           If ISA($initialSubObject, com.nm.sdk.data.dataitems.DataObject) Then
                              String $silId := TOSTRING(CAST(com.nm.sdk.data.dataitems.DataObject, $initialSubObject).getProperty('id'));
                              If NotEmpty($silId) Then
                                 //has a SIL ID
                                 Boolean $foundObjectWithSameSILID := false;
                                 ForEach Any $modifiedSubObject In CAST(Indexed Any, $modifiedProperty) Do
                                    If ISA($modifiedSubObject, com.nm.sdk.data.dataitems.DataObject) and EQUAL(TOSTRING(CAST(com.nm.sdk.data.dataitems.DataObject, $modifiedSubObject).getProperty('id')), $silId) Then
                                       $modifiedSubObject := INT_SILMappingCMNtoSIL_v1._compareEntities($modifiedSubObject, $initialSubObject);
                                       $foundObjectWithSameSILID := true;
                                    End
                                 End
                                 If not $foundObjectWithSameSILID Then
                                    //we must delete the ressource from first list
                                 End
                              End
                           Else
                              //We do nothing, we send the new list
                           End
                        End
                     Else
                        //is not a collection
                        PRINTLN('comparing complex data: ', $propertyName);
                        com.nm.sdk.data.dataitems.DataObject $modifiedMappedProperty := CAST(com.nm.sdk.data.dataitems.DataObject, $modifiedProperty);
                        com.nm.sdk.data.dataitems.DataObject $initialMappedProperty := CAST(com.nm.sdk.data.dataitems.DataObject, $initialProperty);
                        INT_SILMappingCMNtoSIL_v1._compareEntities($modifiedMappedProperty, $initialMappedProperty);
                     End
                  Else
                     //we keep the modified property as it has been modified and is primitive
                  End
               Else
                  //the data do not exist anymore, we must send an empty object
                  If not INT_Mapping._isPrimitiveType($initialProperty) Then
                     $modifiedDataObject.setProperty($propertyName, CreateSkeletonDataClass($initialProperty.getDataEntityType()));
                  Else
                     $modifiedDataObject.setProperty($propertyName, NEW($initialProperty.getDataEntityType()));
                  End
               End
            Else
               //initial property is null
               If $modifiedProperty != null Then
                  //we keep the modified property as it has been modified
               Else
                  FAIL('impossible ' & TOSTRING($propertyName));
                  //impossible because they are equal (null)
               End
            End
         End
      End
   End
   Return $modifiedEntity;
End]]></definition>
        </method>
        <method name="convertCMNBusinessRelationshipToSILAccount" userId="mathieu" uuid="ffffffff-aab3-ba3b-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'convertCMNBusinessRelationshipToSILAccount'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction convertCMNBusinessRelationshipToSILAccount(String $value) : Nothing Begin
   PRINTLN('Running Function convertCMNBusinessRelationshipToSILAccount');
End]]></definition>
        </method>
        <method name="convertCMNPartyToSILInvolvedParty" userId="43880320-CH01" uuid="ffffffff-a03a-def9-0000-000000000000">
            <definition><![CDATA[/** 
	Converts a CMN_Paty to an SIL_InvolvedParty. Always use this function to map Individual / Legal. 
    @params $cmnParty is the CMN_Party object
**/
StaticFunction convertCMNPartyToSILInvolvedParty(CMN_Party $cmnParty) : SIL_INVOLVEDPARTYinvolvedParty Begin
   SIL_INVOLVEDPARTYinvolvedParty $silInvolvedParty;
   /******************** SELECT USE CASE **********************/
   Try
      If $cmnParty.type.isPhysicalPerson() Then
         $silInvolvedParty := INT_SILMappingCMNtoSIL_v1.createSILIndividual(CAST(CMN_PhysicalPerson, $cmnParty));
      ElseIf $cmnParty.type.isLegalEntity() Then
         $silInvolvedParty := INT_SILMappingCMNtoSIL_v1.createSILOrganization(CAST(CMN_LegalEntity, $cmnParty));
      Else
         LIB_Logger.integrationError('UNKNOWN Party TYPE CONVERT: ' & TOSTRING($cmnParty));
      End
   Catch
      LIB_Logger.integrationError('[INT_SILMapping]: ' & $exception.getMessage());
   End
   /***********************************************************/
   //IF($cmnParty.type.getTypeId() != null, $silInvolvedParty.type := LIST($cmnParty.type.getTypeId(), 'CMN_PartyTypes', 'description'));
   IF($cmnParty.label != null, $silInvolvedParty.clientIdentification := $cmnParty.label);
   IF($cmnParty.fiscalDomicile != null, $silInvolvedParty.domicile := $cmnParty.fiscalDomicile);
   IF($cmnParty.tin != null, $silInvolvedParty.taxId := $cmnParty.tin);
   IF($cmnParty.getSILID() != null, $silInvolvedParty.id := $cmnParty.getSILID());
   
   Return $silInvolvedParty;
End]]></definition>
        </method>
        <method name="createSILAccount" userId="pezzi" uuid="00000000-6536-5e93-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILAccount'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILAccount(CMN_BusinessRelationship $cmnBusinessRelationship, SIL_ACCOUNTaccount $silAccount := null) : SIL_ACCOUNTaccount Begin
   If $silAccount == null Then
      $silAccount := CAST(SIL_ACCOUNTaccount, CreateSkeletonDataClass(SIL_ACCOUNTaccount));
   End
   /*************************************** GENERAL FIELDS ***********************************************/
   IF($cmnBusinessRelationship.getSILID() != null, $silAccount.accountId := $cmnBusinessRelationship.getSILID());
   //IF($cmnBusinessRelationship.kytProfile.generalInformation.fccrmLegalEntityStructure != null, $silAccount.accountType := $cmnBusinessRelationship.kytProfile.generalInformation.fccrmLegalEntityStructure);
   IF($cmnBusinessRelationship.openingDate != null, $silAccount.openingDate := $cmnBusinessRelationship.openingDate);
   //IF($cmnBusinessRelationship.kytProfile.referrals.isWalkInClient != null, $silAccount.clientNature := INT_SILMatchingTools_v1.matchCMNBooleanToSILYesNo($cmnBusinessRelationship.kytProfile.referrals.isWalkInClient));
   IF($cmnBusinessRelationship.openingTeamGroup != null, $silAccount.team := $cmnBusinessRelationship.openingTeamGroup);
   //IF($cmnBusinessRelationship.kytProfile.generalInformation.accountHeadingType != null, $silAccount.clientCategory := $cmnBusinessRelationship.kytProfile.generalInformation.accountHeadingType);
   If $cmnBusinessRelationship.currency != null Then
      $silAccount.defaultCurrency := CAST(SIL_STATICCurrency, CreateSkeletonDataClass(SIL_STATICCurrency));
      $silAccount.defaultCurrency.code := $cmnBusinessRelationship.currency;
   End
   IF(NotEmpty($cmnBusinessRelationship.getName()), $silAccount.longName := $cmnBusinessRelationship.getName());
   /******** KYT - General Information ************/
   $silAccount.society := LIST($cmnBusinessRelationship.bookingCenter, 'CMN_BookingCenter__selector', 'locationCode', 'id');
   /*If NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.businessAreaDeskHead) Then
      LIB_User $deskHead := NEW(LIB_User, $cmnBusinessRelationship.kytProfile.generalInformation.businessAreaDeskHead);
      $silAccount.accountIPRelations[1].employee := CAST(SIL_BANKemployee, CreateSkeletonDataClass(SIL_BANKemployee));
      $silAccount.accountIPRelations[1].employee.peopleSoftId := $deskHead.getUserId();
      $silAccount.accountIPRelations[1].employee.firstName := $deskHead.getFirstName();
      $silAccount.accountIPRelations[1].employee.lastName := $deskHead.getLastName();
   End*/
   /******** Relationship Manager ************/
   $silAccount.accountRelations := NewIndexed(SIL_RELATIONrelation);
   SIL_RELATIONmessageRelation $silINVOLVEDPARTYRELATIONemployeeContractRelation := CAST(SIL_RELATIONmessageRelation, CreateSkeletonDataClass(SIL_RELATIONmessageRelation));
   SIL_INVOLVEDPARTYrelationshipManager $silINVOLVEDPARTYrelationshipManager := CAST(SIL_INVOLVEDPARTYrelationshipManager, CreateSkeletonDataClass(SIL_INVOLVEDPARTYrelationshipManager));
   $silINVOLVEDPARTYRELATIONemployeeContractRelation.employeeRole := $silINVOLVEDPARTYrelationshipManager;
   //$silAccount.accountRelations.addElement($silINVOLVEDPARTYRELATIONemployeeContractRelation);
   IF(NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.accountManager), $silINVOLVEDPARTYrelationshipManager.type := LIST($cmnBusinessRelationship.kytProfile.generalInformation.accountManager, 'CMN_KYTAccountManager__selector', 'sil_id'));
   If EQUAL($cmnBusinessRelationship.kytProfile.generalInformation.accountManager, 'pbrs') or EQUAL($cmnBusinessRelationship.kytProfile.generalInformation.accountManager, 'pblu') or EQUAL($cmnBusinessRelationship.kytProfile.generalInformation.accountManager, 'pbus') or EQUAL($cmnBusinessRelationship.kytProfile.generalInformation.accountManager, 'autp') or EQUAL($cmnBusinessRelationship.kytProfile.generalInformation.accountManager, 'mfo') Then
      If NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.companyName) and (EMPTY($cmnBusinessRelationship.kytProfile.generalInformation.firstName) and NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.lastName)) Then
         $silINVOLVEDPARTYrelationshipManager.party := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
      ElseIf EMPTY($cmnBusinessRelationship.kytProfile.generalInformation.companyName) and (NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.firstName) or NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.lastName)) Then
         $silINVOLVEDPARTYrelationshipManager.party := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
      Else
         $silINVOLVEDPARTYrelationshipManager.party := CAST(SIL_INVOLVEDPARTYInvolvedParty, CreateSkeletonDataClass(SIL_INVOLVEDPARTYInvolvedParty));
         LIB_Logger.integrationWarn('Unable to map account is managed by to identified type: ' & $cmnBusinessRelationship.kytProfile.generalInformation.companyName & ', ' & $cmnBusinessRelationship.kytProfile.generalInformation.firstName & ', ' & $cmnBusinessRelationship.kytProfile.generalInformation.lastName);
      End
      IF($cmnBusinessRelationship.kytProfile.generalInformation.id != null, $silINVOLVEDPARTYrelationshipManager.party.id := $cmnBusinessRelationship.kytProfile.generalInformation.id);
      //IF($cmnBusinessRelationship.kytProfile.generalInformation.id != null, $silAccount.internalAccountOfficer := $cmnBusinessRelationship.kytProfile.generalInformation.id);
      $silINVOLVEDPARTYrelationshipManager.party.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName);
      If NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.companyName) Then
         SIL_INVOLVEDPARTYorganizationName $businessName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
         $businessName.businessName := $cmnBusinessRelationship.kytProfile.generalInformation.companyName;
         $silINVOLVEDPARTYrelationshipManager.party.names.addElement($businessName);
      End
      If NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.firstName) or NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.lastName) Then
         SIL_INVOLVEDPARTYindividualName $rmName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
         IF($cmnBusinessRelationship.kytProfile.generalInformation.firstName != null, $rmName.firstName := $cmnBusinessRelationship.kytProfile.generalInformation.firstName);
         IF($cmnBusinessRelationship.kytProfile.generalInformation.lastName != null, $rmName.lastName := $cmnBusinessRelationship.kytProfile.generalInformation.lastName);
         $silINVOLVEDPARTYrelationshipManager.party.names.addElement($rmName);
      End
      If NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.country) Then
         SIL_INVOLVEDPARTYdepartment $silDepartment := CAST(SIL_INVOLVEDPARTYdepartment, CreateSkeletonDataClass(SIL_INVOLVEDPARTYdepartment));
         $silDepartment.country := INT_SILMappingCMNtoSIL_v1.createSILCountry($cmnBusinessRelationship.kytProfile.generalInformation.country);
         $silINVOLVEDPARTYrelationshipManager.inContext := $silDepartment;
      End
   ElseIf EQUAL($cmnBusinessRelationship.kytProfile.generalInformation.accountManager, 'grou') Then
      If NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.hsbcEntityCountry) Then
         SIL_INVOLVEDPARTYdepartment $silDepartment := CAST(SIL_INVOLVEDPARTYdepartment, CreateSkeletonDataClass(SIL_INVOLVEDPARTYdepartment));
         String $countryCode := LIST($cmnBusinessRelationship.kytProfile.generalInformation.hsbcEntityCountry, 'CMN_ReferralEntity__selector', 'sil_id');
         $silDepartment.country := INT_SILMappingCMNtoSIL_v1.createSILCountry($countryCode);
         $silDepartment.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName);
         SIL_INVOLVEDPARTYorganizationName $businessName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
         $businessName.businessName := $cmnBusinessRelationship.kytProfile.generalInformation.getHSBCEntityName();
         $silDepartment.names.addElement($businessName);
         $silINVOLVEDPARTYrelationshipManager.inContext := $silDepartment;
      End
   End
   /******** Portfolio Manager ************/
   $silAccount.portfolios := INT_SILMappingCMNtoSIL_v1.createSILPortfolios($cmnBusinessRelationship);
   Return $silAccount;
End]]></definition>
        </method>
        <method name="createSILAccountFunding" userId="pezzi" uuid="00000000-0ba9-00ea-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILAccountFunding'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILAccountFunding(CMN_BusinessRelationship $cmnBusinessRelationship, SIL_ACCOUNTaccountFunding $silAccountFunding := null) : SIL_ACCOUNTaccountFunding Begin
   If $silAccountFunding == null Then
      $silAccountFunding := CAST(SIL_ACCOUNTaccountFunding, CreateSkeletonDataClass(SIL_ACCOUNTaccountFunding));
   End
   //IF($cmnBusinessRelationship.kytProfile.purposeOfAccount.expectedAccountSize != null, $silAccountFunding.totalValueOfFundsFirstYearInUSD := TODOUBLE($cmnBusinessRelationship.kytProfile.purposeOfAccount.expectedAccountSize));
   //IF($cmnBusinessRelationship.kytProfile.initialFunding.getFundsTotal() != null, $silAccountFunding.expectedAmount := $cmnBusinessRelationship.kytProfile.initialFunding.getFundsTotal());
   IF($cmnBusinessRelationship.kytProfile.purposeOfAccount.expectedAccountSize != null, $silAccountFunding.expectedAmount := TODOUBLE($cmnBusinessRelationship.kytProfile.purposeOfAccount.expectedAccountSize));
   IF($cmnBusinessRelationship.kytProfile.purposeOfAccount.deadlineToFundAccount != null && $cmnBusinessRelationship.kytProfile.purposeOfAccount.deadlineToFundAccount != 0, $silAccountFunding.expectedAmountDeadline := DATEPARSE(TOSTRING($cmnBusinessRelationship.kytProfile.purposeOfAccount.deadlineToFundAccount), 'y', LIB_ConfigHelper.getDefaultLocale('en'), 'UTC'));
   IF($cmnBusinessRelationship.kytProfile.purposeOfAccount.comments != null, $silAccountFunding.comments := $cmnBusinessRelationship.kytProfile.purposeOfAccount.comments);
   IF(NotEmpty($cmnBusinessRelationship.kytProfile.initialFunding.getSILID()), $silAccountFunding.id := $cmnBusinessRelationship.kytProfile.initialFunding.getSILID());
   IF($cmnBusinessRelationship.kytProfile.initialFunding.fundsExplanation != null, $silAccountFunding.initialFundingExplanation := $cmnBusinessRelationship.kytProfile.initialFunding.fundsExplanation);
   //IF($cmnBusinessRelationship.kytProfile.initialOverallRiskAssessment.hasInitialFunding != null, $silAccountFunding.largePhysicalAssetDepositIndicator := $cmnBusinessRelationship.kytProfile.initialOverallRiskAssessment.hasInitialFunding);
   SIL_ORDERtransfer $silORDERtransfer;
   Return $silAccountFunding;
End]]></definition>
        </method>
        <method name="createSILAccountFundingTransfer" userId="pezzi" uuid="00000000-2969-92f5-0000-000000000000">
            <definition><![CDATA[StaticFunction createSILAccountFundingTransfer(CMN_BusinessRelationship $cmnBusinessRelationship, Indexed SIL_ORDERtransfer $silAccountFundingTransfers := null) : Indexed SIL_ORDERtransfer Begin
   If not LIB_Validator.validateNotEmptyIndexed($silAccountFundingTransfers) Then
      $silAccountFundingTransfers := NewIndexed(SIL_ORDERtransfer);
   End
   SIL_ORDERtransfer $silORDERtransfer;
   /********************* SOURCE OF FUNDS ***************************/
   If $cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsCashAmount != null Then
      $silORDERtransfer := INT_SILMappingCMNtoSIL_v1.createSILTransfer($cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsCashAmount, '6');
      If $silORDERtransfer != null Then
         $silORDERtransfer.id := $cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsCashAmountId;
         $silAccountFundingTransfers.addElement($silORDERtransfer);
      End
   End
   If $cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsPreciousMetalAmount != null Then
      $silORDERtransfer := INT_SILMappingCMNtoSIL_v1.createSILTransfer($cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsPreciousMetalAmount, '8');
      If $silORDERtransfer != null Then
         $silORDERtransfer.id := $cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsPreciousMetalAmountId;
         $silAccountFundingTransfers.addElement($silORDERtransfer);
      End
   End
   If $cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsSecuritiesAmount != null Then
      $silORDERtransfer := INT_SILMappingCMNtoSIL_v1.createSILTransfer($cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsSecuritiesAmount, '9');
      If $silORDERtransfer != null Then
         $silORDERtransfer.id := $cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsSecuritiesAmountId;
         $silAccountFundingTransfers.addElement($silORDERtransfer);
      End
   End
   /********************* CHEQUE Transfers ***************************/
   CMN_KYTSourceOfFund $cmnKYTSourceOfFund;
   If LIB_Validator.validateNotEmptyIndexed($cmnBusinessRelationship.kytProfile.initialFunding.cheque) Then
      ForEach $cmnKYTSourceOfFund In $cmnBusinessRelationship.kytProfile.initialFunding.cheque Do
         If $cmnKYTSourceOfFund.expectedAmount != 0.0 Then
            $silORDERtransfer := INT_SILMappingCMNtoSIL_v1.createSILTransfer($cmnKYTSourceOfFund.expectedAmount, '5', $cmnKYTSourceOfFund, $cmnBusinessRelationship);
            If $silORDERtransfer != null Then
               $silAccountFundingTransfers.addElement($silORDERtransfer);
            End
         End
      End
   End
   /********************* WIRE Transfers ***************************/
   If LIB_Validator.validateNotEmptyIndexed($cmnBusinessRelationship.kytProfile.initialFunding.wireTransfers) Then
      ForEach $cmnKYTSourceOfFund In $cmnBusinessRelationship.kytProfile.initialFunding.wireTransfers Do
         $silORDERtransfer := INT_SILMappingCMNtoSIL_v1.createSILTransfer($cmnKYTSourceOfFund.expectedAmount, '3', $cmnKYTSourceOfFund, $cmnBusinessRelationship);
         If $silORDERtransfer != null Then
            $silAccountFundingTransfers.addElement($silORDERtransfer);
         End
      End
   End
   /********************* SECURITY Transfers ***************************/
   If LIB_Validator.validateNotEmptyIndexed($cmnBusinessRelationship.kytProfile.initialFunding.securities) Then
      ForEach $cmnKYTSourceOfFund In $cmnBusinessRelationship.kytProfile.initialFunding.securities Do
         $silORDERtransfer := INT_SILMappingCMNtoSIL_v1.createSILTransfer($cmnKYTSourceOfFund.expectedAmount, '4', $cmnKYTSourceOfFund, $cmnBusinessRelationship);
         If $silORDERtransfer != null Then
            $silAccountFundingTransfers.addElement($silORDERtransfer);
         End
      End
   End
   Return $silAccountFundingTransfers;
End]]></definition>
        </method>
        <method name="createSILAccountProfile" userId="vincent" uuid="00000000-1797-c796-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILAccountProfile'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILAccountProfile(CMN_BusinessRelationship $cmnBusinessRelationship, SIL_ACCOUNTaccount $silACCOUNTaccount := null) : SIL_ACCOUNTaccount Begin
   If $silACCOUNTaccount == null Then
      $silACCOUNTaccount := CAST(SIL_ACCOUNTaccount, CreateSkeletonDataClass(SIL_ACCOUNTaccount));
   End
   If $cmnBusinessRelationship == null Then
      Return $silACCOUNTaccount;
   End
   If $silACCOUNTaccount.initialVisit == null Then
      $silACCOUNTaccount.initialVisit := CAST(SIL_ACCOUNTaccountInitialVisit, CreateSkeletonDataClass(SIL_ACCOUNTaccountInitialVisit));
   End
   If $silACCOUNTaccount.accountProfile == null Then
      $silACCOUNTaccount.accountProfile := CAST(SIL_ACCOUNTaccountProfile, CreateSkeletonDataClass(SIL_ACCOUNTaccountProfile));
   End
   If $cmnBusinessRelationship.kytProfile.visitation.hasCustomerVisitedPremises != null Then
      $silACCOUNTaccount.accountProfile.hasClientBeenVisited := $cmnBusinessRelationship.kytProfile.visitation.hasCustomerVisitedPremises;
   End
   If $cmnBusinessRelationship.kytProfile.referrals != null Then
      $silACCOUNTaccount.accountProfile.isReferred := INT_SILMatchingTools_v1.matchCMNBooleanToSILYesNo($cmnBusinessRelationship.kytProfile.referrals.isReferred);
   End
   $silACCOUNTaccount.accountProfile.addtionalSafeNeeded := $cmnBusinessRelationship.kytProfile.purposeOfAccount.hasRelationshipSafeAttorneyOrHolder($cmnBusinessRelationship);
   If $cmnBusinessRelationship.kytProfile.visitation.hasCustomerVisitedPremises != null Then
      If $cmnBusinessRelationship.kytProfile.visitation.hasCustomerVisitedPremises Then
         If LIB_Validator.validateNotEmptyIndexed($cmnBusinessRelationship.kytProfile.visitation.placesFirstVisit) Then
            $silACCOUNTaccount.initialVisit.initialVisitLocations := NewIndexed(SIL_STATICLocation);
            ForEach String $location In $cmnBusinessRelationship.kytProfile.visitation.placesFirstVisit Do
               SIL_STATICLocation $silSTATIClocation := CAST(SIL_STATICLocation, CreateSkeletonDataClass(SIL_STATICLocation));
               If $location.equals('others') && NotEmpty($cmnBusinessRelationship.kytProfile.visitation.othersPlacesVisit) Then
                  $silSTATIClocation.name := $cmnBusinessRelationship.kytProfile.visitation.othersPlacesVisit;
               End
               $silSTATIClocation.type := LIST($location, 'CMN_PlaceOfFirstVisit__selector', 'sil_id', 'id');
               $silACCOUNTaccount.initialVisit.initialVisitLocations.addElement($silSTATIClocation);
            End
         End
         IF($cmnBusinessRelationship.kytProfile.visitation.descriptionFirstVisitNewClient != null, $silACCOUNTaccount.initialVisit.report := $cmnBusinessRelationship.kytProfile.visitation.descriptionFirstVisitNewClient);
         If LIB_Validator.validateNotEmptyIndexed($cmnBusinessRelationship.kytProfile.partners) Then
            $silACCOUNTaccount.initialVisit.contactActivities := NewIndexed(SIL_CONTACTACTIVITYvisitComplete);
            SIL_CONTACTACTIVITYvisitComplete $silCONTACTACTIVITYcontactActivity;
            ForEach CMN_Partner $cmnPartner In $cmnBusinessRelationship.kytProfile.partners Do
               If $cmnPartner.isVisited Then
                  $silCONTACTACTIVITYcontactActivity := CAST(SIL_CONTACTACTIVITYvisitComplete, CreateSkeletonDataClass(SIL_CONTACTACTIVITYvisitComplete));
                  SIL_INVOLVEDPARTYcustomerRole $silINVOLVEDPARTYinvolvedPartyRole := CAST(SIL_INVOLVEDPARTYcustomerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcustomerRole));
                  $silINVOLVEDPARTYinvolvedPartyRole.party := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
                  IF(NotEmpty($cmnPartner.id), $silINVOLVEDPARTYinvolvedPartyRole.party.id := $cmnPartner.id);
                  If NotEmpty($cmnPartner.getFullName()) Then
                     $silINVOLVEDPARTYinvolvedPartyRole.party.names := NewIndexed(SIL_INVOLVEDPARTYindividualName);
                     SIL_INVOLVEDPARTYindividualName $silINVOLVEDPARTYindividualName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
                     $silINVOLVEDPARTYindividualName.firstName := $cmnPartner.firstName;
                     $silINVOLVEDPARTYindividualName.lastName := $cmnPartner.lastName;
                     $silINVOLVEDPARTYindividualName.fullName := $cmnPartner.getFullName();
                     $silINVOLVEDPARTYinvolvedPartyRole.party.names[1] := $silINVOLVEDPARTYindividualName;
                  End
                  //Descoped
                  If false && NotEmpty($cmnPartner.role) Then
                     ForEach String $role In SPLIT($cmnPartner.role, ',') Do
                        If EMPTY($silINVOLVEDPARTYinvolvedPartyRole.type) Then
                           $silINVOLVEDPARTYinvolvedPartyRole.type := TRANSLATE($role, 'en');
                        Else
                           $silINVOLVEDPARTYinvolvedPartyRole.type := CONCAT($silINVOLVEDPARTYinvolvedPartyRole.type, ',', TRANSLATE($role, 'en'));
                        End
                     End
                  End
                  IF($cmnPartner.visitedDate != null, $silCONTACTACTIVITYcontactActivity.dateOfVisit := $cmnPartner.visitedDate);
                  $silCONTACTACTIVITYcontactActivity.responsibleRole := CAST(SIL_INVOLVEDPARTYemployeeRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYemployeeRole));
                  $silCONTACTACTIVITYcontactActivity.responsibleRole.party := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
                  $silCONTACTACTIVITYcontactActivity.responsibleRole.party.names := NewIndexed(SIL_INVOLVEDPARTYindividualName);
                  SIL_INVOLVEDPARTYindividualName $individualName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
                  IF($cmnPartner.visitedbyFirstName != null, $individualName.firstName := $cmnPartner.visitedbyFirstName);
                  IF($cmnPartner.visitedbyLastName != null, $individualName.lastName := $cmnPartner.visitedbyLastName);
                  $silCONTACTACTIVITYcontactActivity.responsibleRole.party.names.addElement($individualName);
                  $silCONTACTACTIVITYcontactActivity.visitedRoles := NewIndexed(SIL_INVOLVEDPARTYaccountPartyRole);
                  $silCONTACTACTIVITYcontactActivity.visitedRoles.addElement($silINVOLVEDPARTYinvolvedPartyRole);
                  $silACCOUNTaccount.initialVisit.contactActivities.addElement($silCONTACTACTIVITYcontactActivity);
               End
            End
         End
      Else
         IF($cmnBusinessRelationship.kytProfile.visitation.reasonCustomerNotVisited != null, $silACCOUNTaccount.initialVisit.nextVisitPlanDescription := $cmnBusinessRelationship.kytProfile.visitation.reasonCustomerNotVisited);
         IF($cmnBusinessRelationship.kytProfile.visitation.plannedFirstVisitDate != null, $silACCOUNTaccount.initialVisit.nextVisitDate := $cmnBusinessRelationship.kytProfile.visitation.plannedFirstVisitDate);
      End
   End
   Return $silACCOUNTaccount;
End]]></definition>
        </method>
        <method name="createSILAccountPurpose" userId="pezzi" uuid="00000000-1ce5-3b0b-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILPurposeAccount'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILAccountPurpose(CMN_BusinessRelationship $cmnBusinessRelationship, SIL_ACCOUNTaccount $silAccount) : SIL_ACCOUNTaccount Begin
   If $silAccount == null Then
      $silAccount := CAST(SIL_ACCOUNTaccount, CreateSkeletonDataClass(SIL_ACCOUNTaccount));
   End
   If $cmnBusinessRelationship == null Then
      Return $silAccount;
   End
   /************** Puprpose of account *****************/
   $silAccount.accountPurposes := NewIndexed(SIL_ACCOUNTaccountPurpose);
   If LIB_Validator.validateNotEmptyIndexed($cmnBusinessRelationship.kytProfile.purposeOfAccount.purposeSelection) Then
      ForEach String $cmnAccountPurpose In $cmnBusinessRelationship.kytProfile.purposeOfAccount.purposeSelection Do
         SIL_ACCOUNTaccountPurpose $silAccountPurpose := CAST(SIL_ACCOUNTaccountPurpose, CreateSkeletonDataClass(SIL_ACCOUNTaccountPurpose));
         $silAccountPurpose.purposeType := INT_SILMatchingTools_v1.matchCMNIdToSILAccountPurposeId($cmnAccountPurpose);
         IF($cmnAccountPurpose == 'others', $silAccountPurpose.description := $cmnBusinessRelationship.kytProfile.purposeOfAccount.otherPurpose);
         $silAccount.accountPurposes.addElement($silAccountPurpose);
      End
   End
   IF($cmnBusinessRelationship.kytProfile.purposeOfAccount.reasonAccountOpened != null, $silAccount.openingReason := $cmnBusinessRelationship.kytProfile.purposeOfAccount.reasonAccountOpened);
   //IF($cmnBusinessRelationship.kytProfile.purposeOfAccount.actualRelationshipSize != null, $silAccount.accountReferrals.actualAumSizeInUSD := TODOUBLE($cmnBusinessRelationship.kytProfile.purposeOfAccount.actualRelationshipSize));
   Return $silAccount;
End]]></definition>
        </method>
        <method name="createSILAccountReferral" userId="vincent" uuid="ffffffff-ec0c-fb50-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILAccountReferral'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILAccountReferral(CMN_BusinessRelationship $cmnBusinessRelationship, SIL_ACCOUNTaccountReferral $silAccountReferral := null) : SIL_ACCOUNTaccountReferral Begin
   If $silAccountReferral == null Then
      $silAccountReferral := CAST(SIL_ACCOUNTaccountReferral, CreateSkeletonDataClass(SIL_ACCOUNTaccountReferral));
   End
   /********************** Refered Partner ***************************/
   If $cmnBusinessRelationship.kytProfile.referrals != null Then
      CMN_KYTReferrals $referrals := $cmnBusinessRelationship.kytProfile.referrals;
      IF(NotEmpty($cmnBusinessRelationship.kytProfile.referrals.getSILID()), $silAccountReferral.id := $cmnBusinessRelationship.kytProfile.referrals.getSILID());
      $silAccountReferral.referredPartnerRoles := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyRole);
      SIL_INVOLVEDPARTYcustomerRole $silINVOLVEDPARTYinvolvedPartyRole := CAST(SIL_INVOLVEDPARTYcustomerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcustomerRole));
      $silAccountReferral.referredPartnerRoles.addElement($silINVOLVEDPARTYinvolvedPartyRole);
      IF($referrals.isWalkInClient != null, $silINVOLVEDPARTYinvolvedPartyRole.isWalkInClient := $referrals.isWalkInClient);
      If $referrals.isReferred and LIB_Validator.validateNotEmptyIndexed($cmnBusinessRelationship.kytProfile.partners) Then
         ForEach CMN_Partner $cmnpartner In $cmnBusinessRelationship.kytProfile.partners Do
            If $cmnpartner.isReferred() Then
               SIL_INVOLVEDPARTYindividual $silINVOLVEDPARTYindividual := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
               IF(NotEmpty($cmnpartner.id), $silINVOLVEDPARTYindividual.id := $cmnpartner.id);
               $silINVOLVEDPARTYindividual.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName);
               SIL_INVOLVEDPARTYindividualName $silINVOLVEDPARTYindividualName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
               IF($cmnpartner.firstName != null, $silINVOLVEDPARTYindividualName.firstName := $cmnpartner.firstName);
               IF($cmnpartner.lastName != null, $silINVOLVEDPARTYindividualName.lastName := $cmnpartner.lastName);
               IF($cmnpartner.getFullName() != null, $silINVOLVEDPARTYindividualName.fullName := $cmnpartner.getFullName());
               $silINVOLVEDPARTYindividual.names.addElement($silINVOLVEDPARTYindividualName);
               $silINVOLVEDPARTYinvolvedPartyRole.party := $silINVOLVEDPARTYindividual;
               //IF(NotEmpty($cmnpartner.id), $silINVOLVEDPARTYinvolvedPartyRole.id := $cmnpartner.id);
               //Descoped
               If false && NotEmpty($cmnpartner.role) Then
                  ForEach String $role In SPLIT($cmnpartner.role, ',') Do
                     If EMPTY($silINVOLVEDPARTYinvolvedPartyRole.type) Then
                        $silINVOLVEDPARTYinvolvedPartyRole.type := TRANSLATE($role, 'en');
                     Else
                        $silINVOLVEDPARTYinvolvedPartyRole.type := CONCAT($silINVOLVEDPARTYinvolvedPartyRole.type, ',', TRANSLATE($role, 'en'));
                     End
                  End
               End
               Break;
            End
         End
      End
      SIL_INVOLVEDPARTYreferrerRole $silNVOLVEDPARTYreferrerRole := CAST(SIL_INVOLVEDPARTYreferrerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYreferrerRole));
      $silAccountReferral.referrerRole := $silNVOLVEDPARTYreferrerRole;
      If NotEmpty($referrals.isAnExistingPbrsClient6months) Then
         $silNVOLVEDPARTYreferrerRole.referredByType := '08';
      End
      If NotEmpty($referrals.referredType) Then
         $silNVOLVEDPARTYreferrerRole.referredByType := LIST($referrals.referredType, 'CMN_ReferralReferredParty', 'sil_id');
         /************************ Referring Party ***************************/
         If $referrals.isHSBCGroup() or $referrals.isHSBCGroupPrivateBanking() Then
            SIL_INVOLVEDPARTYorganization $silOrganization := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
            SIL_INVOLVEDPARTYincorporation $silIncorporation := CAST(SIL_INVOLVEDPARTYincorporation, CreateSkeletonDataClass(SIL_INVOLVEDPARTYincorporation));
            If NotEmpty($referrals.referredBy.hsbcGroupCountry) Then
               String $countryCode := LIST($referrals.referredBy.hsbcGroupCountry, 'CMN_ReferralEntity__selector', 'countryCode');
               $silIncorporation.incorporateCountry := INT_SILMappingCMNtoSIL_v1.createSILCountry($countryCode);
               $silOrganization.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName);
               SIL_INVOLVEDPARTYorganizationName $businessName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
               $silOrganization.id := LIST($referrals.referredBy.hsbcGroupCountry, 'CMN_ReferralEntity__selector', 'sil_id');
               $businessName.businessName := $referrals.referredBy.hsbcGroupCountry;
               $businessName.fullName := $referrals.referredBy.hsbcGroupCountry;
               $silOrganization.names.addElement($businessName);
               $silOrganization.documentationItems := NewIndexed(SIL_INVOLVEDPARTYdocumentationItem);
               $silOrganization.documentationItems.addElement($silIncorporation);
               $silNVOLVEDPARTYreferrerRole.party := $silOrganization;
            End
         Else
            SIL_INVOLVEDPARTYindividual $silIndividual := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
            SIL_INVOLVEDPARTYindividualName $silIndividualName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
            IF($referrals.referredBy.firstName != null, $silIndividualName.firstName := $referrals.referredBy.firstName);
            IF($referrals.referredBy.surname != null, $silIndividualName.lastName := $referrals.referredBy.surname);
            IF($referrals.referredBy.getFullName() != null, $silIndividualName.fullName := $referrals.referredBy.getFullName());
            $silIndividual.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName);
            $silIndividual.names.addElement($silIndividualName);
            IF($referrals.referredBy.id != null, $silIndividual.id := $referrals.referredBy.id);
            IF($referrals.referredBy.relationship != null, $silNVOLVEDPARTYreferrerRole.relationshipWithReferredPartner := $referrals.referredBy.relationship);
            $silNVOLVEDPARTYreferrerRole.party := $silIndividual;
         End
         IF($referrals.referredBy.referredDate != null, $silNVOLVEDPARTYreferrerRole.knowsReferredPartnerSince := $referrals.referredBy.referredDate);
      End
   End
   Return $silAccountReferral;
End]]></definition>
        </method>
        <method name="createSILAccountRelation" userId="pezzi" uuid="ffffffff-f612-79af-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILAccountRelation'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILAccountRelation(CMN_BusinessRelationship $cmnBusinessRelationship, Indexed SIL_INVOLVEDPARTYcustomerRole $silINVOLVEDPARTYaccountPartyRoleList := null) : Indexed SIL_INVOLVEDPARTYcustomerRole Begin
   If not LIB_Validator.validateNotEmptyIndexed($silINVOLVEDPARTYaccountPartyRoleList) Then
      $silINVOLVEDPARTYaccountPartyRoleList := NewIndexed(SIL_INVOLVEDPARTYcustomerRole);
   End
   Record $iRecord;
   SIL_INVOLVEDPARTYcustomerRole $silAcountPartyRoler;
   //$silAccount.accountReferrals.isAnExistingCustomer := INT_SILMatchingTools_v1.matchCMNBooleanToSILYesNo($cmnParty.hasRelationshipHSBCGroup);
   Indexed Record $parties := NewIndexed(Record);
   ForEach $iRecord In RECORDS('SIL_BusinessRelationshipRoles__selector') Do
      String $roleID := TOSTRING($iRecord.getValue($cmnBusinessRelationship.useCase));
      If NotEmpty($roleID) Then
         ForEach CMN_Party $aParty In UNION($cmnBusinessRelationship.getRoleManager().getPartiesInRole($roleID), ERROR($cmnBusinessRelationship.getMainCustomer().getRoleManager($cmnBusinessRelationship).getPartiesInRole($roleID), null)) Do
            Record $record := NEW(Record);
            $record.setValue('role', $iRecord.getValue('id'));
            //$record.setValue('silRole', $roleID);
            $record.setValue('party', $aParty);
            $parties.addElement($record);
         End
      End
   End
   If LIB_Validator.validateNotEmptyIndexed($parties) Then
      ForEach Record $partyRecord In $parties Do
         String $roleID := TOSTRING($partyRecord.getValue('role'));
         CMN_Party $party := CAST(CMN_Party, $partyRecord.getValue('party'));
         If $party.type.isHSBCEntity() Then
            CMN_LegalEntityHSBC $hsbcEntity := CAST(CMN_LegalEntityHSBC, $party);
            ForEach String $entity In $hsbcEntity.hsbcEntities Do
               $silAcountPartyRoler := CAST(SIL_INVOLVEDPARTYcustomerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcustomerRole));
               $silAcountPartyRoler.party := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
               $silAcountPartyRoler.party.id := LIST($entity, 'CMN_HSBCEntities__selector', 'crmId');
               $silAcountPartyRoler.type := $roleID;
               $silINVOLVEDPARTYaccountPartyRoleList.addElement($silAcountPartyRoler);
            End
         Else
            $silAcountPartyRoler := CAST(SIL_INVOLVEDPARTYcustomerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcustomerRole));
            If $party.type.isPhysicalPerson() Then
               $silAcountPartyRoler.party := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
            ElseIf $party.type.isTrustOrFoundation() Then
               $silAcountPartyRoler.party := CAST(SIL_INVOLVEDPARTYtrust, CreateSkeletonDataClass(SIL_INVOLVEDPARTYtrust));
            ElseIf $party.type.isLegalEntity() Then
               $silAcountPartyRoler.party := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
            Else
               LIB_Logger.integrationError('UNKNOWN ENTITY TYPE: ' & TOSTRING($party));
            End
            $silAcountPartyRoler.party.id := $party.getSILID();
            IF(EMPTY($party.getSILID()), LIB_Logger.integrationWarn('Party has no SIL ID: ' & $party.getFullName()));
            $silAcountPartyRoler.type := $roleID;
            IF(EMPTY($silAcountPartyRoler.type), LIB_Logger.integrationWarn('Corresponding BR Role was not found: ' & $roleID));
            $silINVOLVEDPARTYaccountPartyRoleList.addElement($silAcountPartyRoler);
         End
      End
   End
   Return $silINVOLVEDPARTYaccountPartyRoleList;
End]]></definition>
        </method>
        <method name="createSILAccountSubAccounts" userId="pezzi" uuid="00000000-3526-1db3-0000-000000000000">
            <definition><![CDATA[StaticFunction createSILAccountSubAccounts(CMN_BusinessRelationship $cmnBusinessRelationship, Indexed SIL_ACCOUNTsubAccount $silSubAccounts := null) : Indexed SIL_ACCOUNTsubAccount Begin
   If $silSubAccounts == null Then
      $silSubAccounts := NewIndexed(SIL_ACCOUNTsubAccount);
   End
   IF($silSubAccounts.size() < 1, $silSubAccounts.addElement(NewObject(SIL_ACCOUNTsubAccount)));
   Return $silSubAccounts;
End]]></definition>
        </method>
        <method name="createSILAccountTaxInformation" userId="pezzi" uuid="00000000-2929-21f4-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILAccountTaxInformation'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILAccountTaxInformation(CMN_BusinessRelationship $cmnBusinessRelationship) : SIL_INVOLVEDPARTYtaxInformation Begin
   If $cmnBusinessRelationship == null Then
      Return null;
   End
   SIL_INVOLVEDPARTYtaxInformation $silTaxInformation := CAST(SIL_INVOLVEDPARTYtaxInformation, CreateSkeletonDataClass(SIL_INVOLVEDPARTYtaxInformation));
   /************************************** FATCA **********************/
   CMN_RegulatoryProfileRelation $cmnRegulatoryProfileRelation := $cmnBusinessRelationship.regulatoryProfile;
   If $cmnRegulatoryProfileRelation != null Then
      /**************************** VAT *******************************/
      IF($cmnRegulatoryProfileRelation.vat.vatStatus != null, $silTaxInformation.subjectToVATIndicator := INT_SILMatchingTools_v1.matchCMNYNDToSILBoolean($cmnRegulatoryProfileRelation.vat.vatStatus));
      /**************************** RUBIK *******************************/
      IF($cmnRegulatoryProfileRelation.rubik.rubikStatus != null, $silTaxInformation.subjectToRubikIndicator := INT_SILMatchingTools_v1.matchCMNYNDToSILBoolean($cmnRegulatoryProfileRelation.rubik.rubikStatus));
      /**************************** EMIR *******************************/
      IF($cmnRegulatoryProfileRelation.emir.isEmirRelevant != null, $silTaxInformation.subjectToEMIRIndicator := $cmnRegulatoryProfileRelation.emir.isEmirRelevant);
      /*$silTaxInformation.taxDetails := NewIndexed(SIL_INVOLVEDPARTYtaxDetail);
      ForEach CMN_Party $cmnParty In $cmnBusinessRelationship.getInvolvedParties(false) Do
         If $cmnParty.type.isLegalEntity() Then
            CMN_RegulatoryProfileLegal $cmnRegulatoryProfileLegal := CAST(CMN_LegalEntity, $cmnParty).regulatoryProfile;
            CMN_FatcaProfileLegal $cmnFatcaProfileLegal := $cmnRegulatoryProfileLegal.fatcaProfile;
            SIL_INVOLVEDPARTYusTaxPolicy $silUsTaxPolicy := CAST(SIL_INVOLVEDPARTYusTaxPolicy, CreateSkeletonDataClass(SIL_INVOLVEDPARTYusTaxPolicy));
            $silTaxInformation.taxDetails.addElement($silUsTaxPolicy);
            IF($cmnFatcaProfileLegal.chapterThree != null, $silUsTaxPolicy.chapter3Status := LIST($cmnFatcaProfileLegal.chapterThree, 'CMN_ChapterThree', 'sil_Id'));
            IF($cmnFatcaProfileLegal.w8FormClassification != null, $silUsTaxPolicy.w8Classification := LIST($cmnFatcaProfileLegal.w8FormClassification, 'CMN_W8FormClassification', 'sil_Id'));
            $silUsTaxPolicy.finalClassification := CAST(SIL_FATCAfinalClassification, CreateSkeletonDataClass(SIL_FATCAfinalClassification));
            IF(NotEmpty($cmnFatcaProfileLegal.fatcaClassification), $silUsTaxPolicy.finalClassification.classification := LIST($cmnFatcaProfileLegal.fatcaClassification, 'CMN_FatcaClassificationList', 'sil_Id'));
         End
      End*/
   End
   Return $silTaxInformation;
End]]></definition>
        </method>
        <method name="createSILAccountTransferActivity" userId="pezzi" uuid="ffffffff-d3b3-10cd-0000-000000000000">
            <definition><![CDATA[StaticFunction createSILAccountTransferActivity(CMN_BusinessRelationship $cmnBusinessRelationship, Indexed SIL_KYCaccountTransferActivity $silAccountTransferActivities := null) : Indexed SIL_KYCaccountTransferActivity Begin
   If $silAccountTransferActivities == null Then
      $silAccountTransferActivities := NewIndexed(SIL_KYCaccountTransferActivity);
   End
   If $cmnBusinessRelationship == null || $cmnBusinessRelationship.kytProfile.expectedAccountActivity == null Then
      Return $silAccountTransferActivities;
   End
   CMN_KYTExpectedAccountActivity $expectedAccountActivity := $cmnBusinessRelationship.kytProfile.expectedAccountActivity;
   SIL_KYCaccountTransferActivity $silAccountTransferActivity;
   CMN_KYTTransferActivity $kytTransferActivity;
   /*If not $expectedAccountActivity.hasExpectedInflowsOrOutflows Then
      Return $silAccountTransferActivities;
   End*/
   //If $expectedAccountActivity.hasExpectedInflowsOrOutflows Then
   //If $expectedAccountActivity.transferIn != null Then
   //If $silAccountTransferActivities.size() == 1 Then
   Indexed String $availableTransferTypes := ['6', '9', '8', '5', '4', '3']:String;
   ForEach String $transferType In $availableTransferTypes Do
      /******************** Account Activity IN ********************/
      $silAccountTransferActivity := CAST(SIL_KYCaccountTransferInActivity, CreateSkeletonDataClass(SIL_KYCaccountTransferInActivity));
      $silAccountTransferActivity.reason := $cmnBusinessRelationship.kytProfile.expectedAccountActivity.inflowsOrOutflowsReason;
      $silAccountTransferActivity.isAnyTransferExpected := $expectedAccountActivity.hasExpectedInflowsOrOutflows;
      $kytTransferActivity := $expectedAccountActivity.transferIn;
      ForEach SIL_KYCaccountTransferActivity $otherSilAccountTransferActivity In $silAccountTransferActivities Do
         If $otherSilAccountTransferActivity.transferType == $transferType and ISA($otherSilAccountTransferActivity, SIL_KYCaccountTransferInActivity) Then
            $silAccountTransferActivity := $otherSilAccountTransferActivity;
            Break;
         End
      End
      If $kytTransferActivity != null Then
         If $transferType == '6' Then
            $silAccountTransferActivity.totalAmount := $kytTransferActivity.cashTotalAmount;
            $silAccountTransferActivity.totalNumberOfTransactions := $kytTransferActivity.cashTransNumber;
            $silAccountTransferActivity.transferType := '6';
         ElseIf $transferType == '9' Then
            $silAccountTransferActivity.totalAmount := $kytTransferActivity.securitiesTotalAmount;
            $silAccountTransferActivity.totalNumberOfTransactions := $kytTransferActivity.securitiesTransNumber;
            $silAccountTransferActivity.transferType := '9';
         ElseIf $transferType == '8' Then
            $silAccountTransferActivity.totalAmount := $kytTransferActivity.preciousMetalTotalAmount;
            $silAccountTransferActivity.totalNumberOfTransactions := $kytTransferActivity.preciousMetalTransNumber;
            $silAccountTransferActivity.transferType := '8';
         ElseIf $transferType == '5' Then
            $silAccountTransferActivity.totalAmount := $kytTransferActivity.chequeTotalAmount;
            $silAccountTransferActivity.totalNumberOfTransactions := $kytTransferActivity.chequeTransNumber;
            If NotEmpty($kytTransferActivity.chequeCountries) Then
               $silAccountTransferActivity.fromCountries := NewIndexed(SIL_STATICcountry);
               $silAccountTransferActivity.fromCountries.addElement(INT_SILMappingCMNtoSIL_v1.createSILCountry($kytTransferActivity.chequeCountries));
            End
            $silAccountTransferActivity.transferType := '5';
         ElseIf $transferType == '4' Then
            $silAccountTransferActivity.totalAmount := $kytTransferActivity.nonPhySecuritiesTotalAmount;
            $silAccountTransferActivity.totalNumberOfTransactions := $kytTransferActivity.nonPhySecuritiesTransNumber;
            If NotEmpty($kytTransferActivity.nonPhySecurietiesCountries) Then
               $silAccountTransferActivity.fromCountries := NewIndexed(SIL_STATICcountry);
               $silAccountTransferActivity.fromCountries.addElement(INT_SILMappingCMNtoSIL_v1.createSILCountry($kytTransferActivity.nonPhySecurietiesCountries));
            End
            $silAccountTransferActivity.transferType := '4';
         ElseIf $transferType == '3' Then
            $silAccountTransferActivity.totalAmount := $kytTransferActivity.wireTransfersTotalAmount;
            $silAccountTransferActivity.totalNumberOfTransactions := $kytTransferActivity.wireTransfersTransNumber;
            If NotEmpty($kytTransferActivity.wireTransferCountries) Then
               $silAccountTransferActivity.fromCountries := NewIndexed(SIL_STATICcountry);
               $silAccountTransferActivity.fromCountries.addElement(INT_SILMappingCMNtoSIL_v1.createSILCountry($kytTransferActivity.wireTransferCountries));
            End
            $silAccountTransferActivity.transferType := '3';
         End
         IF(NotEmpty($kytTransferActivity.transfersSILID[$silAccountTransferActivity.transferType]), $silAccountTransferActivity.id := $kytTransferActivity.transfersSILID[$silAccountTransferActivity.transferType]);
         $silAccountTransferActivities.addElement($silAccountTransferActivity);
      End
      /******************** Account Activity OUT ********************/
      $silAccountTransferActivity := CAST(SIL_KYCaccountTransferOutActivity, CreateSkeletonDataClass(SIL_KYCaccountTransferOutActivity));
      $silAccountTransferActivity.reason := $cmnBusinessRelationship.kytProfile.expectedAccountActivity.inflowsOrOutflowsReason;
      $silAccountTransferActivity.isAnyTransferExpected := $expectedAccountActivity.hasExpectedInflowsOrOutflows;
      $kytTransferActivity := $expectedAccountActivity.transferOut;
      ForEach SIL_KYCaccountTransferActivity $otherSilAccountTransferActivity In $silAccountTransferActivities Do
         If $otherSilAccountTransferActivity.transferType == $transferType and ISA($otherSilAccountTransferActivity, SIL_KYCaccountTransferOutActivity) Then
            $silAccountTransferActivity := $otherSilAccountTransferActivity;
            Break;
         End
      End
      If $kytTransferActivity != null Then
         If $transferType == '6' Then
            $silAccountTransferActivity.totalAmount := $kytTransferActivity.cashTotalAmount;
            $silAccountTransferActivity.totalNumberOfTransactions := $kytTransferActivity.cashTransNumber;
            $silAccountTransferActivity.transferType := '6';
         ElseIf $transferType == '9' Then
            $silAccountTransferActivity.totalAmount := $kytTransferActivity.securitiesTotalAmount;
            $silAccountTransferActivity.totalNumberOfTransactions := $kytTransferActivity.securitiesTransNumber;
            $silAccountTransferActivity.transferType := '9';
         ElseIf $transferType == '8' Then
            $silAccountTransferActivity.totalAmount := $kytTransferActivity.preciousMetalTotalAmount;
            $silAccountTransferActivity.totalNumberOfTransactions := $kytTransferActivity.preciousMetalTransNumber;
            $silAccountTransferActivity.transferType := '8';
         ElseIf $transferType == '5' Then
            $silAccountTransferActivity.totalAmount := $kytTransferActivity.chequeTotalAmount;
            $silAccountTransferActivity.totalNumberOfTransactions := $kytTransferActivity.chequeTransNumber;
            If NotEmpty($kytTransferActivity.chequeCountries) Then
               $silAccountTransferActivity.fromCountries := NewIndexed(SIL_STATICcountry);
               $silAccountTransferActivity.fromCountries.addElement(INT_SILMappingCMNtoSIL_v1.createSILCountry($kytTransferActivity.chequeCountries));
            End
            $silAccountTransferActivity.transferType := '5';
         ElseIf $transferType == '4' Then
            $silAccountTransferActivity.totalAmount := $kytTransferActivity.nonPhySecuritiesTotalAmount;
            $silAccountTransferActivity.totalNumberOfTransactions := $kytTransferActivity.nonPhySecuritiesTransNumber;
            If NotEmpty($kytTransferActivity.nonPhySecurietiesCountries) Then
               $silAccountTransferActivity.fromCountries := NewIndexed(SIL_STATICcountry);
               $silAccountTransferActivity.fromCountries.addElement(INT_SILMappingCMNtoSIL_v1.createSILCountry($kytTransferActivity.nonPhySecurietiesCountries));
            End
            $silAccountTransferActivity.transferType := '4';
         ElseIf $transferType == '3' Then
            $silAccountTransferActivity.totalAmount := $kytTransferActivity.wireTransfersTotalAmount;
            $silAccountTransferActivity.totalNumberOfTransactions := $kytTransferActivity.wireTransfersTransNumber;
            If NotEmpty($kytTransferActivity.wireTransferCountries) Then
               $silAccountTransferActivity.fromCountries := NewIndexed(SIL_STATICcountry);
               $silAccountTransferActivity.fromCountries.addElement(INT_SILMappingCMNtoSIL_v1.createSILCountry($kytTransferActivity.wireTransferCountries));
            End
            $silAccountTransferActivity.transferType := '3';
         End
         IF(NotEmpty($kytTransferActivity.transfersSILID[$silAccountTransferActivity.transferType]), $silAccountTransferActivity.id := $kytTransferActivity.transfersSILID[$silAccountTransferActivity.transferType]);
         $silAccountTransferActivities.addElement($silAccountTransferActivity);
      End
   End
   // End
   // If $expectedAccountActivity.transferOut != null Then
   /* $silAccountTransferActivity := CAST(SIL_KYCaccountTransferOutActivity, CreateSkeletonDataClass(SIL_KYCaccountTransferOutActivity));
      $silAccountTransferActivity.totalAmount := $expectedAccountActivity.transferOut.cashTotalAmount;
      $silAccountTransferActivity.totalNumberOfTransactions := $expectedAccountActivity.transferOut.cashTransNumber;
      $silAccountTransferActivity.transferType := '6';
      IF(NotEmpty($expectedAccountActivity.transferIn.transfersSILID[$silAccountTransferActivity.transferType]), $silAccountTransferActivity.id := $expectedAccountActivity.transferIn.transfersSILID[$silAccountTransferActivity.transferType]);
      $silAccountTransferActivities.addElement($silAccountTransferActivity);
      $silAccountTransferActivity := CAST(SIL_KYCaccountTransferOutActivity, CreateSkeletonDataClass(SIL_KYCaccountTransferOutActivity));
      $silAccountTransferActivity.totalAmount := $expectedAccountActivity.transferOut.securitiesTotalAmount;
      $silAccountTransferActivity.totalNumberOfTransactions := $expectedAccountActivity.transferOut.securitiesTransNumber;
      $silAccountTransferActivity.transferType := '9';
      IF(NotEmpty($expectedAccountActivity.transferIn.transfersSILID[$silAccountTransferActivity.transferType]), $silAccountTransferActivity.id := $expectedAccountActivity.transferIn.transfersSILID[$silAccountTransferActivity.transferType]);
      $silAccountTransferActivities.addElement($silAccountTransferActivity);
      $silAccountTransferActivity := CAST(SIL_KYCaccountTransferOutActivity, CreateSkeletonDataClass(SIL_KYCaccountTransferOutActivity));
      $silAccountTransferActivity.totalAmount := $expectedAccountActivity.transferOut.preciousMetalTotalAmount;
      $silAccountTransferActivity.totalNumberOfTransactions := $expectedAccountActivity.transferOut.preciousMetalTransNumber;
      $silAccountTransferActivity.transferType := '8';
      IF(NotEmpty($expectedAccountActivity.transferIn.transfersSILID[$silAccountTransferActivity.transferType]), $silAccountTransferActivity.id := $expectedAccountActivity.transferIn.transfersSILID[$silAccountTransferActivity.transferType]);
      $silAccountTransferActivities.addElement($silAccountTransferActivity);
      $silAccountTransferActivity := CAST(SIL_KYCaccountTransferOutActivity, CreateSkeletonDataClass(SIL_KYCaccountTransferOutActivity));
      $silAccountTransferActivity.totalAmount := $expectedAccountActivity.transferOut.chequeTotalAmount;
      $silAccountTransferActivity.totalNumberOfTransactions := $expectedAccountActivity.transferOut.chequeTransNumber;
      If NotEmpty($expectedAccountActivity.transferOut.chequeCountries) Then
         $silAccountTransferActivity.fromCountries := NewIndexed(SIL_STATICcountry);
         $silAccountTransferActivity.fromCountries.addElement(INT_SILMappingCMNtoSIL_v1.createSILCountry($expectedAccountActivity.transferOut.chequeCountries));
      End
      $silAccountTransferActivity.transferType := '5';
      IF(NotEmpty($expectedAccountActivity.transferIn.transfersSILID[$silAccountTransferActivity.transferType]), $silAccountTransferActivity.id := $expectedAccountActivity.transferIn.transfersSILID[$silAccountTransferActivity.transferType]);
      $silAccountTransferActivities.addElement($silAccountTransferActivity);
      $silAccountTransferActivity := CAST(SIL_KYCaccountTransferOutActivity, CreateSkeletonDataClass(SIL_KYCaccountTransferOutActivity));
      $silAccountTransferActivity.totalAmount := $expectedAccountActivity.transferOut.nonPhySecuritiesTotalAmount;
      $silAccountTransferActivity.totalNumberOfTransactions := $expectedAccountActivity.transferOut.nonPhySecuritiesTransNumber;
      If NotEmpty($expectedAccountActivity.transferOut.nonPhySecurietiesCountries) Then
         $silAccountTransferActivity.fromCountries := NewIndexed(SIL_STATICcountry);
         $silAccountTransferActivity.fromCountries.addElement(INT_SILMappingCMNtoSIL_v1.createSILCountry($expectedAccountActivity.transferOut.nonPhySecurietiesCountries));
      End
      $silAccountTransferActivity.transferType := '4';
      IF(NotEmpty($expectedAccountActivity.transferIn.transfersSILID[$silAccountTransferActivity.transferType]), $silAccountTransferActivity.id := $expectedAccountActivity.transferIn.transfersSILID[$silAccountTransferActivity.transferType]);
      $silAccountTransferActivities.addElement($silAccountTransferActivity);
      $silAccountTransferActivity := CAST(SIL_KYCaccountTransferOutActivity, CreateSkeletonDataClass(SIL_KYCaccountTransferOutActivity));
      $silAccountTransferActivity.totalAmount := $expectedAccountActivity.transferOut.wireTransfersTotalAmount;
      $silAccountTransferActivity.totalNumberOfTransactions := $expectedAccountActivity.transferOut.wireTransfersTransNumber;
      If NotEmpty($expectedAccountActivity.transferOut.wireTransferCountries) Then
         $silAccountTransferActivity.fromCountries := NewIndexed(SIL_STATICcountry);
         $silAccountTransferActivity.fromCountries.addElement(INT_SILMappingCMNtoSIL_v1.createSILCountry($expectedAccountActivity.transferOut.wireTransferCountries));
      End
      $silAccountTransferActivity.transferType := '3';
      IF(NotEmpty($expectedAccountActivity.transferIn.transfersSILID[$silAccountTransferActivity.transferType]), $silAccountTransferActivity.id := $expectedAccountActivity.transferIn.transfersSILID[$silAccountTransferActivity.transferType]);
      $silAccountTransferActivities.addElement($silAccountTransferActivity);
   End*/
   // End
   // End
   /*SIL_KYCaccountTransferInActivity $silAccountTransferInActivity := CAST(SIL_KYCaccountTransferInActivity, CreateSkeletonDataClass(SIL_KYCaccountTransferInActivity));
      IF(NotEmpty($expectedAccountActivity.transferIn.getSILID()), $silAccountTransferInActivity.id := $expectedAccountActivity.transferIn.getSILID());
      IF($expectedAccountActivity.hasExpectedInflowsOrOutflows != null, $silAccountTransferInActivity.isAnyTransferExpected := $expectedAccountActivity.hasExpectedInflowsOrOutflows);
      IF($expectedAccountActivity.inflowsOrOutflowsReason != null, $silAccountTransferInActivity.reason := $expectedAccountActivity.inflowsOrOutflowsReason);
      //********* Physical ********
      IF($expectedAccountActivity.transferIn.cashTotalAmount != null, $silAccountTransferInActivity.cashTotalAmountInUSD := $expectedAccountActivity.transferIn.cashTotalAmount;
      IF($expectedAccountActivity.transferIn.cashTransNumber != null, $silAccountTransferInActivity.cashNumberOfTransactions := TOINTEGER($expectedAccountActivity.transferIn.cashTransNumber));
      IF($expectedAccountActivity.transferIn.preciousMetalTotalAmount != null, $silAccountTransferInActivity.preciousMetalTotalAmountInUSD := $expectedAccountActivity.transferIn.preciousMetalTotalAmount;
      IF($expectedAccountActivity.transferIn.preciousMetalTransNumber != null, $silAccountTransferInActivity.preciousMetalNumberOfTransactions := TOINTEGER($expectedAccountActivity.transferIn.preciousMetalTransNumber));
      IF($expectedAccountActivity.transferIn.securitiesTotalAmount != null, $silAccountTransferInActivity.securitiesTotalAmountInUSD := $expectedAccountActivity.transferIn.securitiesTotalAmount;
      IF($expectedAccountActivity.transferIn.securitiesTransNumber != null, $silAccountTransferInActivity.securitiesNumberOfTransactions := TOINTEGER($expectedAccountActivity.transferIn.securitiesTransNumber));
      //1238 IF($expectedAccountActivity.transferIn.purposeDescription!=null,$silAccountTransferInActivity.description :=$expectedAccountActivity.transferIn.purposeDescription);
      //********* Non Physical ********
      IF($expectedAccountActivity.transferIn.chequeTotalAmount != null, $silAccountTransferInActivity.chequeTotalAmountInUSD := $expectedAccountActivity.transferIn.chequeTotalAmount;
      IF($expectedAccountActivity.transferIn.chequeTransNumber != null, $silAccountTransferInActivity.chequeNumberOfTransactions := TOINTEGER($expectedAccountActivity.transferIn.chequeTransNumber));
      If NotEmpty($expectedAccountActivity.transferIn.chequeCountries) Then
         $silAccountTransferInActivity.chequeCountries := NewIndexed(SIL_STATICcountry);
         $silAccountTransferInActivity.chequeCountries.addElement(INT_SILMappingCMNtoSIL_v1.createSILCountry($expectedAccountActivity.transferIn.chequeCountries));
      End
      //IF($expectedAccountActivity.transferIn.wireTransfersTotalAmount != null, $silAccountTransferInActivity.wireTotalAmountInUSD := $expectedAccountActivity.transferIn.wireTotalAmount;
      //IF($expectedAccountActivity.transferIn.wireTransNumber != null, $silAccountTransferInActivity.wireNumberOfTransactions := TOINTEGER($expectedAccountActivity.transferIn.wireTransNumber));
      If NotEmpty($expectedAccountActivity.transferIn.wireTransferCountries) Then
         $silAccountTransferInActivity.wireTransferCountries := NewIndexed(SIL_STATICcountry);
         $silAccountTransferInActivity.wireTransferCountries.addElement(INT_SILMappingCMNtoSIL_v1.createSILCountry($expectedAccountActivity.transferIn.wireTransferCountries));
      End
      IF($expectedAccountActivity.transferIn.nonPhySecuritiesTotalAmount != null, $silAccountTransferInActivity.securitiesTotalAmountInUSD := $expectedAccountActivity.transferIn.nonPhySecuritiesTotalAmount;
      IF($expectedAccountActivity.transferIn.nonPhySecuritiesTransNumber != null, $silAccountTransferInActivity.securitiesNumberOfTransactions := TOINTEGER($expectedAccountActivity.transferIn.nonPhySecuritiesTransNumber));
      If NotEmpty($expectedAccountActivity.transferIn.nonPhySecurietiesCountries) Then
         $silAccountTransferInActivity.securitiesCountries := NewIndexed(SIL_STATICcountry);
         $silAccountTransferInActivity.securitiesCountries.addElement(INT_SILMappingCMNtoSIL_v1.createSILCountry($expectedAccountActivity.transferIn.nonPhySecurietiesCountries));
      End
      //1250 IF($expectedAccountActivity.transferIn.nonPhyPurposeDescription!=null,$silAccountTransferInActivity.description :=$expectedAccountActivity.transferIn.nonPhyPurposeDescription);
      $silAccountTransferActivities.addElement($silAccountTransferInActivity);
   End*/
   /******************** Account Activity OUT *******************/
   /*If $expectedAccountActivity.transferOut != null Then
      SIL_KYCaccountTransferOutActivity $silAccountTransferOutActivity := CAST(SIL_KYCaccountTransferOutActivity, CreateSkeletonDataClass(SIL_KYCaccountTransferOutActivity));
      IF($expectedAccountActivity.hasExpectedInflowsOrOutflows != null, $silAccountTransferOutActivity.isAnyTransferExpected := $expectedAccountActivity.hasExpectedInflowsOrOutflows);
      IF($expectedAccountActivity.inflowsOrOutflowsReason != null, $silAccountTransferOutActivity.reason := $expectedAccountActivity.inflowsOrOutflowsReason);
      IF(NotEmpty($expectedAccountActivity.transferOut.getSILID()), $silAccountTransferOutActivity.id := $expectedAccountActivity.transferOut.getSILID());
      //********* Physical ********
      IF($expectedAccountActivity.transferOut.cashTotalAmount != null, $silAccountTransferOutActivity.cashTotalAmountInUSD := $expectedAccountActivity.transferOut.cashTotalAmount;
      IF($expectedAccountActivity.transferOut.cashTransNumber != null, $silAccountTransferOutActivity.cashNumberOfTransactions := TOINTEGER($expectedAccountActivity.transferOut.cashTransNumber));
      IF($expectedAccountActivity.transferOut.preciousMetalTotalAmount != null, $silAccountTransferOutActivity.preciousMetalTotalAmountInUSD := $expectedAccountActivity.transferOut.preciousMetalTotalAmount;
      IF($expectedAccountActivity.transferOut.preciousMetalTransNumber != null, $silAccountTransferOutActivity.preciousMetalNumberOfTransactions := TOINTEGER($expectedAccountActivity.transferOut.preciousMetalTransNumber));
      IF($expectedAccountActivity.transferOut.securitiesTotalAmount != null, $silAccountTransferOutActivity.securitiesTotalAmountInUSD := $expectedAccountActivity.transferOut.securitiesTotalAmount;
      IF($expectedAccountActivity.transferOut.securitiesTransNumber != null, $silAccountTransferOutActivity.securitiesNumberOfTransactions := TOINTEGER($expectedAccountActivity.transferOut.securitiesTransNumber));
      //1262 IF($expectedAccountActivity.transferOut.purposeDescription!=null,$silAccountTransferOutActivity.description :=$expectedAccountActivity.transferOut.purposeDescription);
      //********* Non Physical ********
      IF($expectedAccountActivity.transferOut.chequeTotalAmount != null, $silAccountTransferOutActivity.chequeTotalAmountInUSD := $expectedAccountActivity.transferOut.chequeTotalAmount;
      IF($expectedAccountActivity.transferOut.chequeTransNumber != null, $silAccountTransferOutActivity.chequeNumberOfTransactions := TOINTEGER($expectedAccountActivity.transferOut.chequeTransNumber));
      If NotEmpty($expectedAccountActivity.transferOut.chequeCountries) Then
         $silAccountTransferOutActivity.chequeCountries := NewIndexed(SIL_STATICcountry);
         $silAccountTransferOutActivity.chequeCountries.addElement(INT_SILMappingCMNtoSIL_v1.createSILCountry($expectedAccountActivity.transferOut.chequeCountries));
      End
      //1244 IF($expectedAccountActivity.transferOut.wireTransfersTotalAmount != null, $silAccountTransferOutActivity.wireTotalAmountInUSD := $expectedAccountActivity.transferOut.wireTotalAmount;
      //1245 IF($expectedAccountActivity.transferOut.wireTransNumber != null, $silAccountTransferOutActivity.wireNumberOfTransactions := TOINTEGER($expectedAccountActivity.transferOut.wireTransNumber));
      If NotEmpty($expectedAccountActivity.transferOut.wireTransferCountries) Then
         $silAccountTransferOutActivity.wireTransferCountries := NewIndexed(SIL_STATICcountry);
         $silAccountTransferOutActivity.wireTransferCountries.addElement(INT_SILMappingCMNtoSIL_v1.createSILCountry($expectedAccountActivity.transferOut.wireTransferCountries));
      End
      IF($expectedAccountActivity.transferOut.nonPhySecuritiesTotalAmount != null, $silAccountTransferOutActivity.securitiesTotalAmountInUSD := $expectedAccountActivity.transferOut.nonPhySecuritiesTotalAmount;
      IF($expectedAccountActivity.transferOut.nonPhySecuritiesTransNumber != null, $silAccountTransferOutActivity.securitiesNumberOfTransactions := TOINTEGER($expectedAccountActivity.transferOut.nonPhySecuritiesTransNumber));
      If NotEmpty($expectedAccountActivity.transferOut.nonPhySecurietiesCountries) Then
         $silAccountTransferOutActivity.securitiesCountries := NewIndexed(SIL_STATICcountry);
         $silAccountTransferOutActivity.securitiesCountries.addElement(INT_SILMappingCMNtoSIL_v1.createSILCountry($expectedAccountActivity.transferOut.nonPhySecurietiesCountries));
      End
      //1274 IF($expectedAccountActivity.transferOut.nonPhyPurposeDescription!=null,$silAccountTransferOutActivity.description :=$expectedAccountActivity.transferOut.nonPhyPurposeDescription);
      $silAccountTransferActivities.addElement($silAccountTransferOutActivity);
   End*/
   Return $silAccountTransferActivities;
End]]></definition>
        </method>
        <method name="createSILAffiliate" userId="pezzi" uuid="ffffffff-bcb0-d833-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILAffiliate'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILAffiliate(CMN_Party $cmnParty, Indexed SIL_INVOLVEDPARTYorganization $silAffiliates := null) : Indexed SIL_INVOLVEDPARTYorganization Begin
   If $silAffiliates == null Then
      $silAffiliates := NewIndexed(SIL_INVOLVEDPARTYorganization);
   End
   If $cmnParty == null || not ISA($cmnParty, CMN_LegalEntity) Then
      Return $silAffiliates;
   End
   /********************************** GENERAL FIELDS ********************************/
   CMN_LegalEntity $legalEntity := CAST(CMN_LegalEntity, $cmnParty);
   CMN_LegalEntityKycProfile $cmnLegalEntityKycProfile := $legalEntity.getKYCProfile();
   If LIB_Validator.validateNotEmptyIndexed($cmnLegalEntityKycProfile.sourceOfWealth.affiliate) Then
      CMN_KYCLegalAffiliate $cmnKYCLegalAffiliate;
      ForEach $cmnKYCLegalAffiliate In $cmnLegalEntityKycProfile.sourceOfWealth.affiliate Do
         SIL_INVOLVEDPARTYorganization $subSILOrganization := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
         IF(NotEmpty($cmnKYCLegalAffiliate.getSILID()), $subSILOrganization.id := $cmnKYCLegalAffiliate.getSILID());
         $silAffiliates.addElement($subSILOrganization);
         $subSILOrganization.addresses := NewIndexed(SIL_INVOLVEDPARTYaddress);
         If $cmnKYCLegalAffiliate.name != null Then
            $subSILOrganization.names := NewIndexed(SIL_INVOLVEDPARTYInvolvedPartyName);
            SIL_INVOLVEDPARTYorganizationName $subSilOrganizationName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
            $subSilOrganizationName.businessName := $cmnKYCLegalAffiliate.name;
            $subSILOrganization.names.addElement($subSilOrganizationName);
         End
         //1896IF($cmnKYCLegalAffiliate.ownershipRate != null,$subSILOrganization.:=$cmnKYCLegalAffiliate.ownershipRate);
         IF($cmnKYCLegalAffiliate.companyDescription != null, $subSILOrganization.businessDescription := $cmnKYCLegalAffiliate.companyDescription);
         IF($cmnKYCLegalAffiliate.numberOfEmployees != null, $subSILOrganization.numberOfEmployees := $cmnKYCLegalAffiliate.numberOfEmployees);
         INT_SILMatchingTools_v1.matchCMNMainBusinessToSILOrganization($cmnKYCLegalAffiliate.mainBusinessActivity, $subSILOrganization);
         
         If LIB_Validator.validateNotEmptyIndexed($cmnKYCLegalAffiliate.countryOfOperation) Then
            ForEach String $cmnKCountryOfOperationy In $cmnKYCLegalAffiliate.countryOfOperation Do
               If NotEmpty($cmnKCountryOfOperationy) Then
                  $subSILOrganization.addresses.addElement(INT_SILMappingCMNtoSIL_v1.createSILCountryAddress($cmnKCountryOfOperationy, INT_SILEnumerations.getCountryTypeActivity()));
               End
            End
         End
         If LIB_Validator.validateNotEmptyIndexed($cmnKYCLegalAffiliate.businessExposure) Then
            CMN_KycBusinessExposure $cmnKycBusinessExposure;
            ForEach $cmnKycBusinessExposure In $cmnKYCLegalAffiliate.businessExposure Do
               //1904 should not be mapped like IF(NotEmpty($cmnKycBusinessExposure.businessExposure), $subSILOrganization.addresses.addElement(INT_SILMappingCMNtoSIL_v1.createSILCountryAddress($cmnKycBusinessExposure.businessExposure, INT_SILEnumerations.getCountryTypeExposure())));
               //1905IF($cmnKycBusinessExposure.businessExposureRate != null,$subSILOrganization.:=$cmnKycBusinessExposure.businessExposureRate );
            End
         End
         If $cmnKYCLegalAffiliate.hasGovernmentContractDeal != null Then
            IF($subSILOrganization.businessNatureDetails == null, $subSILOrganization.businessNatureDetails := NewIndexed(SIL_INVOLVEDPARTYbusinessNatureDetails));
            IF(not LIB_Validator.validateNotEmptyIndexed($subSILOrganization.businessNatureDetails), $subSILOrganization.businessNatureDetails[1] := CAST(SIL_INVOLVEDPARTYbusinessNatureDetails, CreateSkeletonDataClass(SIL_INVOLVEDPARTYbusinessNatureDetails)));
            $subSILOrganization.businessNatureDetails[1].isInvolvedInGovernmentContract := $cmnKYCLegalAffiliate.hasGovernmentContractDeal;
            If LIB_Validator.validateNotEmptyIndexed($cmnKYCLegalAffiliate.countryOfJuridiction) Then
               CMN_KycSowJuridictionCountry $cmnKycSowJuridictionCountry;
               ForEach $cmnKycSowJuridictionCountry In $cmnKYCLegalAffiliate.countryOfJuridiction Do
                  If NotEmpty($cmnKycSowJuridictionCountry.countryOfJuridiction) Then
                     IF($subSILOrganization.businessNatureDetails[1].businessCustomers == null, $subSILOrganization.businessNatureDetails[1].businessCustomers := NewIndexed(SIL_INVOLVEDPARTYbusinessCustomer));
                     SIL_INVOLVEDPARTYbusinessCustomer $silBusinessCustomer := CAST(SIL_INVOLVEDPARTYbusinessCustomer, CreateSkeletonDataClass(SIL_INVOLVEDPARTYbusinessCustomer));
                     $silBusinessCustomer.isGovernmental := true;
                     $silBusinessCustomer.country := INT_SILMappingCMNtoSIL_v1.createSILCountry($cmnKycSowJuridictionCountry.countryOfJuridiction);
                     //1909 IF($cmnKycSowJuridictionCountry.businessExposureRate != null, $silBusinessCustomer. := $cmnKycSowJuridictionCountry.businessExposureRate);
                     //1910 IF($cmnKycSowJuridictionCountry.comments != null, $silBusinessCustomer. := $cmnKycSowJuridictionCountry.comments);
                     $subSILOrganization.businessNatureDetails[1].businessCustomers.addElement($silBusinessCustomer);
                  End
               End
            End
         End
      End
   End
   Return $silAffiliates;
End]]></definition>
        </method>
        <method name="createSILBusinessOrganization" userId="pezzi" uuid="00000000-6707-626d-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILBusinessOrganization'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.cmnBusinessRelationship
*/
StaticFunction createSILBusinessOrganization(CMN_Party $cmnParty) : SIL_INVOLVEDPARTYorganization Begin
   If $cmnParty == null || not ISA($cmnParty, CMN_LegalEntity) Then
      Return null;
   End
   SIL_INVOLVEDPARTYorganization $silOrganization := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
   /********************************** GENERAL FIELDS ********************************/
   CMN_LegalEntity $legalEntity := CAST(CMN_LegalEntity, $cmnParty);
   CMN_LegalEntityKycProfile $cmnLegalEntityKycProfile := $legalEntity.getKYCProfile();
   /*********************** NATURE OF BUSINESS & SOURCE OF WEALTH ***********************/
   If $cmnLegalEntityKycProfile.sourceOfWealth != null Then
      IF(NotEmpty($cmnLegalEntityKycProfile.sourceOfWealth.getSILID()), $silOrganization.id := $cmnLegalEntityKycProfile.sourceOfWealth.getSILID());
      $silOrganization.businessTypes := NewIndexed(String);
      IF($cmnLegalEntityKycProfile.sourceOfWealth.companyDescription != null, $silOrganization.businessDescription := $cmnLegalEntityKycProfile.sourceOfWealth.companyDescription);
      //IF($cmnLegalEntityKycProfile.sourceOfWealth.originOfSow != null, $silOrganization. := $cmnLegalEntityKycProfile.sourceOfWealth.originOfSow);      
      If $cmnLegalEntityKycProfile.sourceOfWealth.numberOfEmployees != null Then
         IF($cmnLegalEntityKycProfile.sourceOfWealth.numberOfEmployees > 0, $silOrganization.numberOfEmployees := $cmnLegalEntityKycProfile.sourceOfWealth.numberOfEmployees);
         //1873IF($cmnLegalEntityKycProfile.sourceOfWealth.numberOfEmployees==0,$silOrganization. := $cmnLegalEntityKycProfile.sourceOfWealth.noEmployeeDetails);
      End
      INT_SILMatchingTools_v1.matchCMNMainBusinessToSILOrganization($cmnLegalEntityKycProfile.sourceOfWealth.mainBusiness, $silOrganization);
      If LIB_Validator.validateNotEmptyIndexed($cmnLegalEntityKycProfile.sourceOfWealth.countryOfOperation) Then
         ForEach String $cmnKCountryOfOperationy In $cmnLegalEntityKycProfile.sourceOfWealth.countryOfOperation Do
            If NotEmpty($cmnKCountryOfOperationy) Then
               $silOrganization.addresses.addElement(INT_SILMappingCMNtoSIL_v1.createSILCountryAddress($cmnKCountryOfOperationy, INT_SILEnumerations.getCountryTypeActivity()));
            End
         End
      End
      If LIB_Validator.validateNotEmptyIndexed($cmnLegalEntityKycProfile.sourceOfWealth.businessExposure) Then
         CMN_KycBusinessExposure $cmnKycBusinessExposure;
         ForEach $cmnKycBusinessExposure In $cmnLegalEntityKycProfile.sourceOfWealth.businessExposure Do
            //1878IF(NotEmpty($cmnKycBusinessExposure.businessExposure),$silOrganization.:=INT_SILMappingCMNtoSIL_v1.createSILCountry($cmnKycBusinessExposure.businessExposure ));
            //1879IF($cmnKycBusinessExposure.businessExposureRate != null,$silOrganization.:=$cmnKycBusinessExposure.businessExposureRate );
         End
      End
      //1881IF($cmnLegalEntityKycProfile.sourceOfWealth.isHighRiskJuridictionCountry != null, $silOrganization. := $cmnLegalEntityKycProfile.sourceOfWealth.isHighRiskJuridictionCountry);
      //1882IF($cmnLegalEntityKycProfile.sourceOfWealth.hasBusActivitiesGreather50 != null, $silOrganization. := $cmnLegalEntityKycProfile.sourceOfWealth.hasBusActivitiesGreather50);
      If $cmnLegalEntityKycProfile.sourceOfWealth.hasBusActivitiesGreather50 Then
         //1883IF($cmnLegalEntityKycProfile.sourceOfWealth.keyCustomerName != null, $silOrganization. := $cmnLegalEntityKycProfile.sourceOfWealth.keyCustomerName);
         If $cmnLegalEntityKycProfile.sourceOfWealth.industryName != null Then
            //1884IF($cmnLegalEntityKycProfile.sourceOfWealth.industryName.category!=null,$silOrganization.:=$cmnLegalEntityKycProfile.sourceOfWealth.industryName.category);
            //1885IF($cmnLegalEntityKycProfile.sourceOfWealth.industryName.activity!=null,$silOrganization.:=$cmnLegalEntityKycProfile.sourceOfWealth.industryName.activity);
            //1886IF($cmnLegalEntityKycProfile.sourceOfWealth.industryName.other!=null,$silOrganization.:=$cmnLegalEntityKycProfile.sourceOfWealth.industryName.other);
         End
      End
      If $cmnLegalEntityKycProfile.sourceOfWealth.hasGovernmentContractDeal != null Then
         IF(not LIB_Validator.validateNotEmptyIndexed($silOrganization.businessNatureDetails), $silOrganization.businessNatureDetails[1] := CAST(SIL_INVOLVEDPARTYbusinessNatureDetails, CreateSkeletonDataClass(SIL_INVOLVEDPARTYbusinessNatureDetails)));
         $silOrganization.businessNatureDetails[1].isInvolvedInGovernmentContract := $cmnLegalEntityKycProfile.sourceOfWealth.hasGovernmentContractDeal;
      End
      If $cmnLegalEntityKycProfile.sourceOfWealth.hasGovernmentContractDeal Then
         If LIB_Validator.validateNotEmptyIndexed($cmnLegalEntityKycProfile.sourceOfWealth.countryOfJuridiction) Then
            CMN_KycSowJuridictionCountry $cmnKycSowJuridictionCountry;
            ForEach $cmnKycSowJuridictionCountry In $cmnLegalEntityKycProfile.sourceOfWealth.countryOfJuridiction Do
               IF(not LIB_Validator.validateNotEmptyIndexed($silOrganization.businessNatureDetails[1].businessCustomers), $silOrganization.businessNatureDetails[1].businessCustomers := NewIndexed(SIL_INVOLVEDPARTYbusinessCustomer));
               SIL_INVOLVEDPARTYbusinessCustomer $silBusinessCustomer := CAST(SIL_INVOLVEDPARTYbusinessCustomer, CreateSkeletonDataClass(SIL_INVOLVEDPARTYbusinessCustomer));
               IF(NotEmpty($cmnKycSowJuridictionCountry.countryOfJuridiction), $silBusinessCustomer.country := INT_SILMappingCMNtoSIL_v1.createSILCountry($cmnKycSowJuridictionCountry.countryOfJuridiction));
               //1890IF($cmnKycSowJuridictionCountry.businessExposureRate != null, $silBusinessCustomer. := $cmnKycSowJuridictionCountry.businessExposureRate);
               //1891IF($cmnKycSowJuridictionCountry.comments != null, $silBusinessCustomer.comments. := $cmnKycSowJuridictionCountry.comments);
               //$silBusinessCustomer.isGovernmental := true;
               $silOrganization.businessNatureDetails[1].businessCustomers.addElement($silBusinessCustomer);
            End
         End
      End
      If $cmnLegalEntityKycProfile.sourceOfWealth.customerType != null Then
         //$silOrganization. := $cmnLegalEntityKycProfile.sourceOfWealth.customerType;
         //IF($cmnLegalEntityKycProfile.sourceOfWealth.otherCustomerTypeDetail != null, $silOrganization.:= $cmnLegalEntityKycProfile.sourceOfWealth.otherCustomerTypeDetail);
      End
      If $cmnLegalEntityKycProfile.sourceOfWealth.hasAffiliate != null Then
         $silOrganization.isComplexStructure := $cmnLegalEntityKycProfile.sourceOfWealth.hasAffiliate;
      End
   End
   If $cmnLegalEntityKycProfile.businessNature != null Then
      IF($cmnLegalEntityKycProfile.businessNature.naturePurposeOfEntity != null, $silOrganization.businessDescription := $cmnLegalEntityKycProfile.businessNature.naturePurposeOfEntity);
      IF($cmnLegalEntityKycProfile.businessNature.reasonsUseEntityStructure != null, $silOrganization.businessDescription := $cmnLegalEntityKycProfile.businessNature.reasonsUseEntityStructure);
   End
   Return $silOrganization;
End]]></definition>
        </method>
        <method name="createSILConnectedParties" userId="43880320-CH01" uuid="00000000-7aad-6115-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILConnectedParties'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILConnectedParties(CMN_Party $cmnParty, CMN_BusinessRelationship $cmnBusinessRelationship := null, Indexed SIL_INVOLVEDPARTYinvolvedPartyRelationship $silPartyStructure := null) : Indexed SIL_INVOLVEDPARTYinvolvedPartyRelationship Begin
   If $silPartyStructure == null Then
      $silPartyStructure := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyRelationship);
   End
   If $cmnParty == null Then
      Return $silPartyStructure;
   End
   /******************************************* CONNECTED PARTIES SCREEN ********************************************/
   If $cmnBusinessRelationship != null Then
      ForEach $iRecord In RECORDS('SIL_PartyRoles__selector') Do
         String $roleID := TOSTRING($iRecord.getValue('id'));
         Indexed CMN_Party $parties := $cmnParty.getInvolvedParties($cmnBusinessRelationship, $roleID);
         If LIB_Validator.validateNotEmptyIndexed($parties) && NotEmpty($roleID) Then
            IF($silPartyStructure == null, $silPartyStructure := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyRelationship));
            ForEach CMN_Party $party In $parties Do
               SIL_INVOLVEDPARTYinvolvedPartyRelationship $silINVOLVEDPARTYinvolvedPartyRelationship := CAST(SIL_INVOLVEDPARTYinvolvedPartyRelationship, CreateSkeletonDataClass(SIL_INVOLVEDPARTYinvolvedPartyRelationship));
               If $party.type.isPhysicalPerson() Then
                  CMN_PhysicalPerson $physicalPerson := CAST(CMN_PhysicalPerson, $party);
                  $silINVOLVEDPARTYinvolvedPartyRelationship.party := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
                  $silINVOLVEDPARTYinvolvedPartyRelationship.party.names := NewIndexed(SIL_INVOLVEDPARTYindividualName);
                  SIL_INVOLVEDPARTYindividualName $silIndividualName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
                  If $physicalPerson.lastName != null Then
                     $silIndividualName.lastName := $physicalPerson.lastName;
                  End
                  If $physicalPerson.firstName != null Then
                     $silIndividualName.firstName := $physicalPerson.firstName;
                  End
                  $silINVOLVEDPARTYinvolvedPartyRelationship.party.names.addElement($silIndividualName);
               ElseIf $party.type.isLegalEntity() Then
                  CMN_LegalEntity $legalEntity := CAST(CMN_LegalEntity, $party);
                  $silINVOLVEDPARTYinvolvedPartyRelationship.party := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
                  $silINVOLVEDPARTYinvolvedPartyRelationship.party.names := NewIndexed(SIL_INVOLVEDPARTYorganizationName);
                  SIL_INVOLVEDPARTYorganizationName $silOrganizationName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
                  If $legalEntity.companyName != null Then
                     $silOrganizationName.businessName := $legalEntity.companyName;
                  End
                  $silINVOLVEDPARTYinvolvedPartyRelationship.party.names.addElement($silOrganizationName);
               End
               String $relationshipRole := LIST($roleID, 'SIL_PartyRoles__selector', 'relationshipRole', 'id');
               If NotEmpty($relationshipRole) Then
                  $silINVOLVEDPARTYinvolvedPartyRelationship.relationshipRole := $relationshipRole;
               End
               String $relationshipType := LIST($roleID, 'SIL_PartyRoles__selector', 'relationshipType', 'id');
               If NotEmpty($relationshipType) Then
                  $silINVOLVEDPARTYinvolvedPartyRelationship.relationshipType := $relationshipType;
               End
               If NotEmpty($party.getSILID()) Then
                  $silINVOLVEDPARTYinvolvedPartyRelationship.party.id := $party.getSILID();
               End
               $silPartyStructure.addElement($silINVOLVEDPARTYinvolvedPartyRelationship);
            End
         End
      End
   End
   Return $silPartyStructure;
End]]></definition>
        </method>
        <method name="createSILCountry" userId="pezzi" uuid="ffffffff-e47a-2bfc-0000-000000000000">
            <definition><![CDATA[/**
  Function to create a SIL_Country instance given a country code.
  @return SIL_STATICCountry instance.
*/
StaticFunction createSILCountry(String $countryCode) : SIL_STATICcountry Begin
   SIL_STATICcountry $country := CAST(SIL_STATICcountry, CreateSkeletonDataClass(SIL_STATICcountry));
   If EMPTY($countryCode) || EMPTY(LIST($countryCode, 'CMN_Countries__selector', 'description', 'id')) Then
      If EMPTY($countryCode) Then
         $countryCode := 'missing';
      End
      LIB_Logger.integrationWarn('[INT_SILMapping]: Unknown or missing country code found for country code: ' & $countryCode);
      Return $country;
   End
   $country.code := $countryCode;
   $country.name := TRANSLATE(LIST($countryCode, 'CMN_Countries__selector', 'description', 'id'), 'en');
   Return $country;
End]]></definition>
        </method>
        <method name="createSILCountryAddress" userId="pezzi" uuid="00000000-3147-d458-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILCountryAddress'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILCountryAddress(String $countryCode, String $countryType) : SIL_INVOLVEDPARTYcountryAddress Begin
   SIL_INVOLVEDPARTYcountryAddress $silCountryAddress := CAST(SIL_INVOLVEDPARTYcountryAddress, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcountryAddress));
   If EMPTY($countryCode) || EMPTY($countryType) Then
      LIB_Logger.integrationWarn('[INT_SILMapping]: Missing Country code or missing country type. Generating empty country address');
      Return $silCountryAddress;
   End
   $silCountryAddress.country := INT_SILMappingCMNtoSIL_v1.createSILCountry($countryCode);
   $silCountryAddress.countryType := $countryType;
   Return $silCountryAddress;
End]]></definition>
        </method>
        <method name="createSILCurrency" userId="pezzi" uuid="ffffffff-e343-a86b-0000-000000000000">
            <definition><![CDATA[/**
  Create SIL_Currency instance based on its code
  @param $curCode 3 letter currency code
  @return Matching currency instance
*/
StaticFunction createSILCurrency(String $curCode) : SIL_STATICCurrency Begin
   SIL_STATICCurrency $currency := CAST(SIL_STATICCurrency, CreateSkeletonDataClass(SIL_STATICCurrency));
   If EMPTY($curCode) || EMPTY(LIST($curCode, 'CMN_Currencies__selector', 'shortName', 'id')) Then
      If EMPTY($curCode) Then
         $curCode := 'missing';
      End
      LIB_Logger.integrationWarn('[INT_SILMapping]: Unknown or missing currency code found for SIL_Currency ' & $curCode);
      Return $currency;
   End
   $currency.code := $curCode;
   $currency.name := LIST($curCode, 'CMN_Currencies__selector', 'fullName', 'id');
   Return $currency;
End]]></definition>
        </method>
        <method name="createSILCustomerRole" userId="pezzi" uuid="ffffffff-c8f9-50ce-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILCustomerRole'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILCustomerRole(CMN_Party $cmnParty, CMN_BusinessRelationship $cmnBusinessRelationship, SIL_INVOLVEDPARTYinvolvedParty $silParty) : SIL_INVOLVEDPARTYinvolvedParty Begin
   If $silParty == null Then
      Return $silParty;
   End
   SIL_INVOLVEDPARTYcustomerRole $customerRole := CAST(SIL_INVOLVEDPARTYcustomerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcustomerRole));
   $customerRole.customerRisks := NewIndexed(SIL_INVOLVEDPARTYcustomerRisk);
   $customerRole.preferences := NewIndexed(SIL_PREFERENCESpreferences);
   $customerRole.documents := NewIndexed(SIL_CMSdocument);
   $customerRole.references := NewIndexed(SIL_RELATIONreference);
   $customerRole.connectedParties := NewIndexed(SIL_INVOLVEDPARTYRELATIONparties);
   $customerRole.kycs := NewIndexed(SIL_KYCkyc);
   $customerRole.relations := NewIndexed(SIL_INVOLVEDPARTYRELATIONipRelation);
   $customerRole.customerClassifications := NewIndexed(SIL_CUSTOMERCLASSIFICATIONcustomerClassification);
   /******************************** CUSTOMER CLASSIFICATION ***************************************/
   SIL_CUSTOMERCLASSIFICATIONfccram $fccramCustomerClassification := CAST(SIL_CUSTOMERCLASSIFICATIONfccram, CreateSkeletonDataClass(SIL_CUSTOMERCLASSIFICATIONfccram));
   IF(NotEmpty($cmnParty.FCCRiskRating.customerFamily), $fccramCustomerClassification.customerFamily := LIST($cmnParty.FCCRiskRating.customerFamily, 'SIL_FCCRAMCustomerFamilies', 'id', 'cmn_description'));
   IF(NotEmpty($cmnParty.FCCRiskRating.customerType), $fccramCustomerClassification.customerType := LIST($cmnParty.FCCRiskRating.customerType, 'SIL_FCCRAMCustomerTypes', 'description', 'cmn_description'));
  	IF($cmnBusinessRelationship != null and NotEmpty($cmnParty.legalEntityStructure), $fccramCustomerClassification.calculatedFCCRRLegalEntityStructureCode := LIST($cmnParty.legalEntityStructure, 'SIL_LegalEntityStructures', 'cmn_description', 'id'));
   If $cmnBusinessRelationship.partyIsCustomer($cmnParty) Then
      If NotEmpty($cmnParty.FCCRiskRating.newManualFCCRRCode) Then
         $fccramCustomerClassification.manualOverrideValue := LIST($cmnParty.FCCRiskRating.newManualFCCRRCode, 'SIL_FCCRCodes', 'sil_id');
      ElseIf NotEmpty($cmnParty.FCCRiskRating.manualFCCRRCode) Then
         $fccramCustomerClassification.manualOverrideValue := LIST($cmnParty.FCCRiskRating.manualFCCRRCode, 'SIL_FCCRCodes', 'sil_id');
      End
      If NotEmpty($cmnParty.FCCRiskRating.newCalculatedFCCRRCode) Then
         $fccramCustomerClassification.calculatedFCCRRCode := LIST($cmnParty.FCCRiskRating.newCalculatedFCCRRCode, 'SIL_FCCRCodes', 'sil_id');
      ElseIf NotEmpty($cmnParty.FCCRiskRating.calculatedFCCRRCode) Then
         $fccramCustomerClassification.calculatedFCCRRCode := LIST($cmnParty.FCCRiskRating.calculatedFCCRRCode, 'SIL_FCCRCodes', 'sil_id');
      End
      IF(NotEmpty($cmnParty.FCCRiskRating.calculatedFCCRRCountryCode), $fccramCustomerClassification.calculatedFCCRRCountryCode := $cmnParty.FCCRiskRating.calculatedFCCRRCountryCode);
      If LIB_Validator.validateNotEmptyIndexed($cmnParty.FCCRiskRating.auditReasonCodes) Then
         $fccramCustomerClassification.auditReasonCodes := NewIndexed(String);
         $fccramCustomerClassification.auditReasonCodes.addAll($cmnParty.FCCRiskRating.auditReasonCodes);
      End
   End
   $customerRole.customerClassifications.addElement($fccramCustomerClassification);
   $silParty.roles.addElement($customerRole);
   Return $silParty;
End]]></definition>
        </method>
        <method name="createSILDOCOScreening" userId="pezzi" uuid="00000000-3b1b-c385-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILDOCOScreening'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILDOCOScreening(CMN_Party $cmnParty, Indexed SIL_INVOLVEDPARTYSCREENINGscreening $silScreeningScreenings) : Indexed SIL_INVOLVEDPARTYSCREENINGscreening Begin
   If $cmnParty == null Then
      Return $silScreeningScreenings;
   End
   IF(not LIB_Validator.validateNotEmptyIndexed($silScreeningScreenings), $silScreeningScreenings := NewIndexed(SIL_INVOLVEDPARTYSCREENINGscreening));
   If $cmnParty.type.isPhysicalPerson() Then
      CMN_PhysicalPerson $cmnPhysicalPerson := CAST(CMN_PhysicalPerson, $cmnParty);
      /****************** Overall net worth and Income *********************************/
      CMN_OverallNetWorthAndIncome $cmnOverallNetWorthAndIncome := $cmnPhysicalPerson.kycProfile.overallNetWorthAndIncome;
      If LIB_Validator.validateNotEmptyIndexed($cmnOverallNetWorthAndIncome.evidences) Then
         CMN_hyperlink $cmnhyperlink;
         SIL_INVOLVEDPARTYSCREENINGdocoScreening $silINVOLVEDPARTYSCREENINGdocoScreening;
         ForEach $cmnhyperlink In $cmnOverallNetWorthAndIncome.evidences Do
            $silINVOLVEDPARTYSCREENINGdocoScreening := CAST(SIL_INVOLVEDPARTYSCREENINGdocoScreening, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGdocoScreening));
            $silINVOLVEDPARTYSCREENINGdocoScreening.findings := NewIndexed(SIL_INVOLVEDPARTYSCREENINGfinding);
            SIL_INVOLVEDPARTYSCREENINGdocoFinding $silINVOLVEDPARTYSCREENINGfinding := CAST(SIL_INVOLVEDPARTYSCREENINGdocoFinding, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGdocoFinding));
            IF($cmnhyperlink.description != null, $silINVOLVEDPARTYSCREENINGfinding.description := $cmnhyperlink.description);
            IF($cmnhyperlink.hyperlink != null, $silINVOLVEDPARTYSCREENINGfinding.sourceLink := $cmnhyperlink.hyperlink);
            $silINVOLVEDPARTYSCREENINGdocoScreening.findings.addElement($silINVOLVEDPARTYSCREENINGfinding);
            $silINVOLVEDPARTYSCREENINGdocoScreening.type := 'NETWORTH';
            $silScreeningScreenings.addElement($silINVOLVEDPARTYSCREENINGdocoScreening);
         End
      End
      CMN_KycSow $cmnKycSow := $cmnPhysicalPerson.getKYCProfile().sourceOfWealth;
      /******************************** KYC SOW ****************************************************/
      CMN_KycSowContribution $cmnKycSowContribution;
      CMN_hyperlink $cmnhyperlink;
      SIL_INVOLVEDPARTYSCREENINGdocoScreening $silINVOLVEDPARTYSCREENINGdocoScreening;
      SIL_INVOLVEDPARTYSCREENINGdocoFinding $silINVOLVEDPARTYSCREENINGfinding;
      /****************** SOW Employement ***************/
      If LIB_Validator.validateNotEmptyIndexed($cmnKycSow.sowEmployment) Then
         ForEach $cmnKycSowContribution In $cmnKycSow.sowEmployment Do
            If LIB_Validator.validateNotEmptyIndexed($cmnKycSowContribution.evidences) Then
               ForEach $cmnhyperlink In $cmnKycSowContribution.evidences Do
                  $silINVOLVEDPARTYSCREENINGdocoScreening := CAST(SIL_INVOLVEDPARTYSCREENINGdocoScreening, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGdocoScreening));
                  $silINVOLVEDPARTYSCREENINGdocoScreening.findings := NewIndexed(SIL_INVOLVEDPARTYSCREENINGfinding);
                  $silINVOLVEDPARTYSCREENINGfinding := CAST(SIL_INVOLVEDPARTYSCREENINGdocoFinding, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGdocoFinding));
                  IF($cmnhyperlink.description != null, $silINVOLVEDPARTYSCREENINGfinding.description := $cmnhyperlink.description);
                  IF($cmnhyperlink.hyperlink != null, $silINVOLVEDPARTYSCREENINGfinding.sourceLink := $cmnhyperlink.hyperlink);
                  $silINVOLVEDPARTYSCREENINGdocoScreening.findings.addElement($silINVOLVEDPARTYSCREENINGfinding);
                  $silINVOLVEDPARTYSCREENINGdocoScreening.type := 'EMPLOYEMENT';
                  $silScreeningScreenings.addElement($silINVOLVEDPARTYSCREENINGdocoScreening);
               End
            End
         End
      End
      /****************** SOW Business Owner *********************/
      If LIB_Validator.validateNotEmptyIndexed($cmnKycSow.sowBusinessOwner) Then
         ForEach $cmnKycSowContribution In $cmnKycSow.sowBusinessOwner Do
            If LIB_Validator.validateNotEmptyIndexed($cmnKycSowContribution.evidences) Then
               ForEach $cmnhyperlink In $cmnKycSowContribution.evidences Do
                  $silINVOLVEDPARTYSCREENINGdocoScreening := CAST(SIL_INVOLVEDPARTYSCREENINGdocoScreening, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGdocoScreening));
                  $silINVOLVEDPARTYSCREENINGdocoScreening.findings := NewIndexed(SIL_INVOLVEDPARTYSCREENINGfinding);
                  $silINVOLVEDPARTYSCREENINGfinding := CAST(SIL_INVOLVEDPARTYSCREENINGdocoFinding, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGdocoFinding));
                  IF($cmnhyperlink.description != null, $silINVOLVEDPARTYSCREENINGfinding.description := $cmnhyperlink.description);
                  IF($cmnhyperlink.hyperlink != null, $silINVOLVEDPARTYSCREENINGfinding.sourceLink := $cmnhyperlink.hyperlink);
                  $silINVOLVEDPARTYSCREENINGdocoScreening.findings.addElement($silINVOLVEDPARTYSCREENINGfinding);
                  $silINVOLVEDPARTYSCREENINGdocoScreening.type := 'BUSINESS_OWNERSHIP';
                  $silScreeningScreenings.addElement($silINVOLVEDPARTYSCREENINGdocoScreening);
               End
            End
         End
      End
      /****************** SOW Inheritance *********************/
      If LIB_Validator.validateNotEmptyIndexed($cmnKycSow.sowInheritanceDonation) Then
         ForEach $cmnKycSowContribution In $cmnKycSow.sowInheritanceDonation Do
            If LIB_Validator.validateNotEmptyIndexed($cmnKycSowContribution.evidences) Then
               ForEach $cmnhyperlink In $cmnKycSowContribution.evidences Do
                  $silINVOLVEDPARTYSCREENINGdocoScreening := CAST(SIL_INVOLVEDPARTYSCREENINGdocoScreening, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGdocoScreening));
                  $silINVOLVEDPARTYSCREENINGdocoScreening.findings := NewIndexed(SIL_INVOLVEDPARTYSCREENINGfinding);
                  $silINVOLVEDPARTYSCREENINGfinding := CAST(SIL_INVOLVEDPARTYSCREENINGdocoFinding, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGdocoFinding));
                  IF($cmnhyperlink.description != null, $silINVOLVEDPARTYSCREENINGfinding.description := $cmnhyperlink.description);
                  IF($cmnhyperlink.hyperlink != null, $silINVOLVEDPARTYSCREENINGfinding.sourceLink := $cmnhyperlink.hyperlink);
                  $silINVOLVEDPARTYSCREENINGdocoScreening.findings.addElement($silINVOLVEDPARTYSCREENINGfinding);
                  $silINVOLVEDPARTYSCREENINGdocoScreening.type := 'INHERITANCE';
                  $silScreeningScreenings.addElement($silINVOLVEDPARTYSCREENINGdocoScreening);
               End
            End
         End
      End
      /****************** SOW Family *********************/
      If LIB_Validator.validateNotEmptyIndexed($cmnKycSow.sowFamilyRelationsRoyalty) Then
         ForEach $cmnKycSowContribution In $cmnKycSow.sowFamilyRelationsRoyalty Do
            If LIB_Validator.validateNotEmptyIndexed($cmnKycSowContribution.evidences) Then
               ForEach $cmnhyperlink In $cmnKycSowContribution.evidences Do
                  $silINVOLVEDPARTYSCREENINGdocoScreening := CAST(SIL_INVOLVEDPARTYSCREENINGdocoScreening, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGdocoScreening));
                  $silINVOLVEDPARTYSCREENINGdocoScreening.findings := NewIndexed(SIL_INVOLVEDPARTYSCREENINGfinding);
                  $silINVOLVEDPARTYSCREENINGfinding := CAST(SIL_INVOLVEDPARTYSCREENINGdocoFinding, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGdocoFinding));
                  IF($cmnhyperlink.description != null, $silINVOLVEDPARTYSCREENINGfinding.description := $cmnhyperlink.description);
                  IF($cmnhyperlink.hyperlink != null, $silINVOLVEDPARTYSCREENINGfinding.sourceLink := $cmnhyperlink.hyperlink);
                  $silINVOLVEDPARTYSCREENINGdocoScreening.findings.addElement($silINVOLVEDPARTYSCREENINGfinding);
                  $silINVOLVEDPARTYSCREENINGdocoScreening.type := 'FAMILY_SITUATION';
                  $silScreeningScreenings.addElement($silINVOLVEDPARTYSCREENINGdocoScreening);
               End
            End
         End
      End
      /****************** SOW Family *********************/
      If LIB_Validator.validateNotEmptyIndexed($cmnKycSow.sowOthers) Then
         ForEach $cmnKycSowContribution In $cmnKycSow.sowOthers Do
            If LIB_Validator.validateNotEmptyIndexed($cmnKycSowContribution.evidences) Then
               ForEach $cmnhyperlink In $cmnKycSowContribution.evidences Do
                  $silINVOLVEDPARTYSCREENINGdocoScreening := CAST(SIL_INVOLVEDPARTYSCREENINGdocoScreening, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGdocoScreening));
                  $silINVOLVEDPARTYSCREENINGdocoScreening.findings := NewIndexed(SIL_INVOLVEDPARTYSCREENINGfinding);
                  $silINVOLVEDPARTYSCREENINGfinding := CAST(SIL_INVOLVEDPARTYSCREENINGdocoFinding, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGdocoFinding));
                  IF($cmnhyperlink.description != null, $silINVOLVEDPARTYSCREENINGfinding.description := $cmnhyperlink.description);
                  IF($cmnhyperlink.hyperlink != null, $silINVOLVEDPARTYSCREENINGfinding.sourceLink := $cmnhyperlink.hyperlink);
                  $silINVOLVEDPARTYSCREENINGdocoScreening.findings.addElement($silINVOLVEDPARTYSCREENINGfinding);
                  $silINVOLVEDPARTYSCREENINGdocoScreening.type := 'OTHER';
                  $silScreeningScreenings.addElement($silINVOLVEDPARTYSCREENINGdocoScreening);
               End
            End
         End
      End
   End
End]]></definition>
        </method>
        <method name="createSILEmailAddress" userId="43880320-CH01" uuid="00000000-537a-dc12-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILEmailAddress'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILEmailAddress(CMN_Email $cmnEmail) : SIL_INVOLVEDPARTYemailAddress Begin
   SIL_INVOLVEDPARTYemailAddress $silEmail := CAST(SIL_INVOLVEDPARTYemailAddress, CreateSkeletonDataClass(SIL_INVOLVEDPARTYemailAddress));
   If $cmnEmail == null Then
      LIB_Logger.integrationWarn('[INT_SILMapping]: CMN_Email object empty, creating empty SIL_EmailAddress');
      Return $silEmail;
   End
   $silEmail.type := '04';
   IF(not EMPTY($cmnEmail.getSILID()), $silEmail.addressId := $cmnEmail.getSILID());
   IF(not EMPTY($cmnEmail.address), $silEmail.email := $cmnEmail.address);
   If not EMPTY($silEmail.email) && MATCH($silEmail.email, '@') Then
      $silEmail.domainName := SPLIT($cmnEmail.address, '@')[2];
   End
   // @STODO no corresponding fields in Process
   $silEmail.validFrom := NOW();
   $silEmail.isAttachmentAllowed := true;
   Return $silEmail;
End]]></definition>
        </method>
        <method name="createSILEstimatedNetWorth" userId="bernard" uuid="00000000-1ec8-f233-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILEstimatedNetWorth'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILEstimatedNetWorth(CMN_Party $cmnParty) : SIL_KYCestimatedNetWorth Begin
   If $cmnParty == null || not ISA($cmnParty, CMN_LegalEntity) Then
      Return null;
   End
   SIL_KYCestimatedNetWorth $silEstimatedNetWorth := CAST(SIL_KYCestimatedNetWorth, CreateSkeletonDataClass(SIL_KYCestimatedNetWorth));
   /********************************** GENERAL FIELDS ********************************/
   CMN_LegalEntity $legalEntity := CAST(CMN_LegalEntity, $cmnParty);
   CMN_LegalEntityKycProfile $cmnLegalEntityKycProfile := $legalEntity.getKYCProfile();
   /********************************Estimated Worth ***********************************/
   If NotEmpty($cmnLegalEntityKycProfile.financialInformation.getSILID()) Then
      $silEstimatedNetWorth.id := $cmnLegalEntityKycProfile.financialInformation.getSILID();
   End
   If $cmnLegalEntityKycProfile.financialInformation.financialAssets != null Then
      $silEstimatedNetWorth.financialAssetsAmount := $cmnLegalEntityKycProfile.financialInformation.financialAssets;
   End
   If $cmnLegalEntityKycProfile.financialInformation.fixedAssets != null Then
      $silEstimatedNetWorth.fixedAssetsAmount := $cmnLegalEntityKycProfile.financialInformation.fixedAssets;
   End
   If $cmnLegalEntityKycProfile.financialInformation.otherAssets != null Then
      $silEstimatedNetWorth.otherAssetsAmount := $cmnLegalEntityKycProfile.financialInformation.otherAssets;
   End
   If $cmnLegalEntityKycProfile.financialInformation.debts != null Then
      $silEstimatedNetWorth.debtsAssetsAmount := $cmnLegalEntityKycProfile.financialInformation.debts;
   End
   If $cmnLegalEntityKycProfile.financialInformation.estimatedAnnualRevenues != null Then
      $silEstimatedNetWorth.netWealthAmount := TOSTRING($cmnLegalEntityKycProfile.financialInformation.estimatedAnnualRevenues);
   End
   If $cmnLegalEntityKycProfile.financialInformation.estimatedAnnualNetIncome != null Then
      $silEstimatedNetWorth.estimatedAnnualIncome := $cmnLegalEntityKycProfile.financialInformation.estimatedAnnualNetIncome.toString();
   End
   Return $silEstimatedNetWorth;
End]]></definition>
        </method>
        <method name="createSILIdentityAndAddressDocument" userId="pezzi" uuid="00000000-7253-e190-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILIdentityAndAddressDocument'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILIdentityAndAddressDocument(CMN_IdentificationDocument $cmnIdentificationDocument) : SIL_INVOLVEDPARTYidentityAndAddressDocument Begin
   SIL_INVOLVEDPARTYidentityAndAddressDocument $silDocumentationItem := CAST(SIL_INVOLVEDPARTYidentityAndAddressDocument, CreateSkeletonDataClass(SIL_INVOLVEDPARTYidentityAndAddressDocument));
   IF($cmnIdentificationDocument.getSILID() != null, $silDocumentationItem.documentId := $cmnIdentificationDocument.getSILID());
   IF($cmnIdentificationDocument.idType != null, $silDocumentationItem.documentType := $cmnIdentificationDocument.idType);
   IF($cmnIdentificationDocument.otherIdentificationType != null, $silDocumentationItem.documentType := $cmnIdentificationDocument.otherIdentificationType);
   IF($cmnIdentificationDocument.idNumber != null, $silDocumentationItem.documentNumber := $cmnIdentificationDocument.idNumber);
   IF($cmnIdentificationDocument.idIssuanceDate != null, $silDocumentationItem.issueDate := $cmnIdentificationDocument.idIssuanceDate);
   IF($cmnIdentificationDocument.idExpirationDate != null, $silDocumentationItem.expiryDate := $cmnIdentificationDocument.idExpirationDate);
   IF($cmnIdentificationDocument.idIssuancePlace != null, $silDocumentationItem.placeOfIssue := $cmnIdentificationDocument.idIssuancePlace);
   IF(NotEmpty($cmnIdentificationDocument.idIssuanceCountry), $silDocumentationItem.countryOfIssue := INT_SILMappingCMNtoSIL_v1.createSILCountry($cmnIdentificationDocument.idIssuanceCountry));
   IF($cmnIdentificationDocument.idIssuedBy != null, $silDocumentationItem.issuingAuthorityName := $cmnIdentificationDocument.idIssuedBy);
   Return $silDocumentationItem;
End]]></definition>
        </method>
        <method name="createSILIndividual" userId="pezzi" uuid="00000000-5f28-ac73-0000-000000000000">
            <definition><![CDATA[/**
  Creates a SIL_INVOLVEDPARTYindividual Object taking a CMN_PhysicalPerson and a CMN_BusinessRelationship Object as input.
  @param $cmnPhysicalPerson is the CMN_PhysicalPerson Object
  @param $cmnBusinessRelationship is the CMN_BusinessRelationship Object 
  @return       The mapped SIL_INVOLVEDPARTYindividual Object
*/
StaticFunction createSILIndividual(CMN_PhysicalPerson $cmnPhysicalPerson, SIL_INVOLVEDPARTYindividual $silIndividual := null) : SIL_INVOLVEDPARTYindividual Begin
   /**************************************** CREATE TOP STRUCTURES *******************************/
   If $silIndividual == null Then
      $silIndividual := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
   End
   //$silIndividual.roles := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyRole);
   CMN_PhysicalPersonKycProfile $cmnPhysicalPersonKycProfile;
   CMN_KycSow $cmnPhysicalPersonKycSow;
   If $cmnPhysicalPerson.kycProfile != null Then
      $cmnPhysicalPersonKycProfile := CAST(CMN_PhysicalPersonKycProfile, $cmnPhysicalPerson.kycProfile);
      If $cmnPhysicalPersonKycProfile.sourceOfWealth != null Then
         $cmnPhysicalPersonKycSow := $cmnPhysicalPersonKycProfile.sourceOfWealth;
      End
      /************************************** EXTRACT SOW / KYC FROM CMN OBJECT **********************/
      If $cmnPhysicalPersonKycSow != null Then
         /************************************** Employee ROLE SOW **********************/
         SIL_INVOLVEDPARTYemployeeRole $employeeRole := CAST(SIL_INVOLVEDPARTYemployeeRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYemployeeRole));
         $silIndividual.roles.addElement($employeeRole);
         If LIB_Validator.validateNotEmptyIndexed($cmnPhysicalPersonKycSow.customerOccupationStatus) && NotEmpty($cmnPhysicalPersonKycSow.customerOccupationStatus[1]) Then
            $employeeRole.employmentStatus := LIST($cmnPhysicalPersonKycSow.customerOccupationStatus[1], 'SIL_EmploymentStatus', 'id', 'cmn_id');
         End
         IF($cmnPhysicalPersonKycSow.educationalBackground != null, $silIndividual.educationalBackground := $cmnPhysicalPersonKycSow.educationalBackground);
         /************************************** Overall Net Worth ******************************/
         /*  Indexed SIL_SOWindividualSourceOfWealth $overallNetWorth := INT_SILMappingCMNtoSIL_v1.createSILOverallNetWorth($cmnPhysicalPersonKycProfile.overallNetWorthAndIncome);
         If LIB_Validator.validateNotEmptyIndexed($overallNetWorth) Then
            $silIndividual.sourcesOfWealth.addAll($overallNetWorth);
         End*/
      End
   Else
      LIB_Logger.integrationDebug('[INT_SILMapping]: Physical person KYC missing');
   End
   Return $silIndividual;
End]]></definition>
        </method>
        <method name="createSILIndividualIDV" userId="pezzi" uuid="ffffffff-be3d-3548-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILIndividualIDV'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILIndividualIDV(CMN_PhysicalPerson $cmnPhysicalPerson, CMN_BusinessRelationship $br, SIL_INVOLVEDPARTYindividual $silIndividual) : SIL_INVOLVEDPARTYindividual Begin
   If $cmnPhysicalPerson == null || $silIndividual == null Then
      Return $silIndividual;
   End
   /**************************************** CREATE INDEXES ****************************************/
   $silIndividual.names := NewIndexed(SIL_INVOLVEDPARTYindividualName);
   $silIndividual.addresses := NewIndexed(SIL_INVOLVEDPARTYaddress);
   /**************************************** MAPPING NAMES ****************************************/
   SIL_INVOLVEDPARTYindividualName $silIndividualName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
   IF($cmnPhysicalPerson.firstName != null, $silIndividualName.firstName := $cmnPhysicalPerson.firstName);
   IF($cmnPhysicalPerson.lastName != null, $silIndividualName.lastName := $cmnPhysicalPerson.lastName);
   IF($cmnPhysicalPerson.getFullName() != null, $silIndividualName.fullName := $cmnPhysicalPerson.getFullName());
   IF($cmnPhysicalPerson.formerMaidenName != null, $silIndividualName.maidenName := $cmnPhysicalPerson.formerMaidenName);
   IF($cmnPhysicalPerson.middleName != null, $silIndividualName.middleName := $cmnPhysicalPerson.middleName);
   IF($cmnPhysicalPerson.alias != null, $silIndividualName.alias := $cmnPhysicalPerson.alias);
   //IF($cmnPhysicalPerson.previousName != null, $silIndividualName. := $cmnPhysicalPerson.previousName);
   IF($cmnPhysicalPerson.salutation != null, $silIndividualName.title := $cmnPhysicalPerson.salutation);
   IF(NotEmpty($cmnPhysicalPerson.otherSalutation), $silIndividualName.otherTitle := $cmnPhysicalPerson.otherSalutation);
   $silIndividual.names.addElement($silIndividualName);
   /********************************GENERAL VALUES**************************************************/
   //IF($cmnPhysicalPerson.hasRelationshipHSBCGroup != null, $silIndividual.:=$cmnPhysicalPerson.hasRelationshipHSBCGroup);
   IF($cmnPhysicalPerson.gender != null, $silIndividual.gender := LIST($cmnPhysicalPerson.gender, 'SIL_Genders', 'id', 'cmn_id'));
   IF($cmnPhysicalPerson.dateOfBirth != null, $silIndividual.dateOfBirth := $cmnPhysicalPerson.dateOfBirth);
   IF($cmnPhysicalPerson.townOfBirth != null, $silIndividual.placeOfBirth := $cmnPhysicalPerson.townOfBirth);
   IF(NotEmpty($cmnPhysicalPerson.countryOfBirth), $silIndividual.countryOfBirth := INT_SILMappingCMNtoSIL_v1.createSILCountry($cmnPhysicalPerson.countryOfBirth));
   IF($cmnPhysicalPerson.isPartyAlive != null, $silIndividual.deceasedIndicator := ! $cmnPhysicalPerson.isPartyAlive);
   //Must be changed to nationalities
   If NotEmpty($cmnPhysicalPerson.nationalities.mainNationality) Then
      SIL_STATICcountry $nationality := INT_SILMappingCMNtoSIL_v1.createSILCountry($cmnPhysicalPerson.nationalities.mainNationality);
      $nationality.type := 'MAIN';
      $silIndividual.nationalities.addElement($nationality);
   End
   If NotEmpty($cmnPhysicalPerson.nationalities.secondNationality) Then
      SIL_STATICcountry $nationality := INT_SILMappingCMNtoSIL_v1.createSILCountry($cmnPhysicalPerson.nationalities.secondNationality);
      $silIndividual.nationalities.addElement($nationality);
   End
   If NotEmpty($cmnPhysicalPerson.nationalities.thirdNationality) Then
      SIL_STATICcountry $nationality := INT_SILMappingCMNtoSIL_v1.createSILCountry($cmnPhysicalPerson.nationalities.thirdNationality);
      $silIndividual.nationalities.addElement($nationality);
   End
   /************************************** Documentation Items **********************/
   If LIB_Validator.validateNotEmptyIndexed($cmnPhysicalPerson.identifications) Then
      If $silIndividual.documentationItems == null Then
         $silIndividual.documentationItems := NewIndexed(SIL_INVOLVEDPARTYdocumentationItem);
      End
      CMN_IdentificationDocument $cmnIdentificationDocument;
      SIL_INVOLVEDPARTYidentityAndAddressDocument $silDocumentationItem;
      ForEach $cmnIdentificationDocument In $cmnPhysicalPerson.identifications Do
         $silDocumentationItem := INT_SILMappingCMNtoSIL_v1.createSILIdentityAndAddressDocument($cmnIdentificationDocument);
         IF($silDocumentationItem != null, $silIndividual.documentationItems.addElement($silDocumentationItem));
      End
   End
   /************************************** Residential ADDRESSES **********************/
   If LIB_Validator.validateNotEmptyIndexed($cmnPhysicalPerson.contact.genericAddresses) Then
      CMN_MailAddress $mailAddress;
      SIL_INVOLVEDPARTYpostalAddress $silPostalAddress;
      ForEach $mailAddress In $cmnPhysicalPerson.contact.genericAddresses Do
         If $mailAddress != null Then
            $silPostalAddress := INT_SILMappingCMNtoSIL_v1.createSILPostalAddress($mailAddress);
            If $silPostalAddress != null Then
               $silPostalAddress.type := LIST('generic', 'CMN_AddressTypes__selector', 'code');
               $silIndividual.addresses.addElement($silPostalAddress);
            End
         End
      End
   End
   /************************************** Previous ADDRESSES **********************/
   If LIB_Validator.validateNotEmptyIndexed($cmnPhysicalPerson.contact.previousAddresses) Then
      $silIndividual.individualResidencies := NewIndexed(SIL_INVOLVEDPARTYindividualResidency);
      CMN_MailAddress $previousAddress;
      SIL_INVOLVEDPARTYpostalAddress $silPostalAddress;
      ForEach $previousAddress In $cmnPhysicalPerson.contact.previousAddresses Do
         If $previousAddress != null Then
            $silPostalAddress := INT_SILMappingCMNtoSIL_v1.createSILPostalAddress($previousAddress);
            If $silPostalAddress != null Then
               $silPostalAddress.type := LIST('previous', 'CMN_AddressTypes__selector', 'code');
               $silIndividual.addresses.addElement($silPostalAddress);
            End
         End
      End
   End
   /***************** Mailing ADDRESSES *********************/
   If LIB_Validator.validateNotEmptyIndexed($cmnPhysicalPerson.contact.mailingAddresses) Then
      CMN_MailAddress $cmnMailAddress;
      SIL_INVOLVEDPARTYpostalAddress $silPostalAddress;
      ForEach $cmnMailAddress In $cmnPhysicalPerson.contact.mailingAddresses Do
         If $cmnMailAddress != null Then
            $silPostalAddress := INT_SILMappingCMNtoSIL_v1.createSILPostalAddress($cmnMailAddress);
            If $silPostalAddress != null Then
               $silPostalAddress.type := LIST('mailing', 'CMN_AddressTypes__selector', 'code');
               $silIndividual.addresses.addElement($silPostalAddress);
            End
         End
      End
   End
   /************************************** Telephon ADDRESSES **********************/
   If LIB_Validator.validateNotEmptyIndexed($cmnPhysicalPerson.contact.genericAddresses) Then
      CMN_Phone $cmnPhone;
      ForEach $cmnPhone In $cmnPhysicalPerson.contact.phone Do
         If $cmnPhone != null Then
            SIL_INVOLVEDPARTYtelephoneNumber $telephoneNumber := INT_SILMappingCMNtoSIL_v1.createSILPhoneAddress($cmnPhone);
            //$silIndividual.addresses.addElement($telephoneNumber);/descoped
         End
      End
   End
   /************************************** Email ADDRESSES **********************/
   If LIB_Validator.validateNotEmptyIndexed($cmnPhysicalPerson.contact.email) Then
      CMN_Email $mailAddress;
      ForEach $mailAddress In $cmnPhysicalPerson.contact.email Do
         If $mailAddress != null Then
            SIL_INVOLVEDPARTYemailAddress $emailAddress := INT_SILMappingCMNtoSIL_v1.createSILEmailAddress($mailAddress);
            $silIndividual.addresses.addElement($emailAddress);
         End
      End
   End
   Return $silIndividual;
End]]></definition>
        </method>
        <method name="createSILIndividualResidency" userId="bellanca" uuid="00000000-38e3-1fe7-0000-000000000000">
            <definition><![CDATA[/**
	Builds an indidividual residency based on the parameters given, if no value is given 0 is assumed
    @params country is a string representing the country
   	@params nbThisYear is an integer value represening the the nb of days spend at that location this year
   	@params nbPastYear is an integer value represening the the nb of days spend at that location last year
   	@params nbYearBefore is an integer value represening the the nb of days spend at that location the year before that
*/
StaticFunction createSILIndividualResidency(CMN_MailAddress $mailAddress) : SIL_INVOLVEDPARTYindividualResidency Begin
   SIL_INVOLVEDPARTYindividualResidency $indRes := CAST(SIL_INVOLVEDPARTYindividualResidency, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualResidency));
   IF(NotEmpty($mailAddress.getSILID()), $indRes.id := $mailAddress.getSILID());
   IF(NotEmpty($mailAddress.country), $indRes.countryOfIssue := INT_SILMappingCMNtoSIL_v1.createSILCountry($mailAddress.country));
   If $mailAddress.validTo != null && $mailAddress.validFrom != null Then
      Date $today := TODAY();
      Integer $currentYear := LIB_DateHelper.getYear(TODAY());
      Double $yearsDiffToToday := LIB_DateHelper.getYear($today) - LIB_DateHelper.getYear($mailAddress.validTo);
      Double $yearsDiffFromToday := LIB_DateHelper.getYear($today) - LIB_DateHelper.getYear($mailAddress.validFrom);
      Double $yearsOfAddress := LIB_DateHelper.getYear($mailAddress.validTo) - LIB_DateHelper.getYear($mailAddress.validFrom);
      $indRes.nbDaysSpentThisYear := 0;
      $indRes.nbDaysSpentThiLastYear := 0;
      $indRes.nbDaysSpentTheYearBefore := 0;
      If $yearsOfAddress >= 0.0 Then
         If $yearsDiffToToday < 0.0 Then
            $indRes.nbDaysSpentThisYear := TOINTEGER(TIMEDIFF(LIB_DateHelper.firstDayOfYear($currentYear), $today, 'd'));
            If $yearsDiffFromToday < 0.0 Then
               $indRes.nbDaysSpentThisYear := 0;
            ElseIf $yearsDiffFromToday == 0.0 Then
               Double $diff := TOINTEGER(TIMEDIFF($mailAddress.validFrom, $today, 'd'));
               If $diff > 0.0 Then
                  $indRes.nbDaysSpentThisYear := TOINTEGER(TIMEDIFF($mailAddress.validFrom, $today, 'd'));
               Else
                  $indRes.nbDaysSpentThisYear := 0;
               End
            ElseIf TOINTEGER($yearsDiffFromToday) == 1 Then
               $indRes.nbDaysSpentThiLastYear := TOINTEGER(TIMEDIFF($mailAddress.validFrom, LIB_DateHelper.lastDayOfYear($currentYear - 1), 'd'));
            ElseIf TOINTEGER($yearsDiffFromToday) == 2 Then
               $indRes.nbDaysSpentThiLastYear := TOINTEGER(TIMEDIFF(LIB_DateHelper.firstDayOfYear($currentYear - 1), LIB_DateHelper.lastDayOfYear($currentYear - 1), 'd'));
               $indRes.nbDaysSpentTheYearBefore := TOINTEGER(TIMEDIFF($mailAddress.validFrom, LIB_DateHelper.lastDayOfYear($currentYear - 2), 'd'));
            ElseIf TOINTEGER($yearsDiffFromToday) >= 2 Then
               $indRes.nbDaysSpentThiLastYear := TOINTEGER(TIMEDIFF(LIB_DateHelper.firstDayOfYear($currentYear - 1), LIB_DateHelper.lastDayOfYear($currentYear - 1), 'd'));
               $indRes.nbDaysSpentTheYearBefore := TOINTEGER(TIMEDIFF(LIB_DateHelper.firstDayOfYear($currentYear - 2), LIB_DateHelper.lastDayOfYear($currentYear - 2), 'd'));
            End
         ElseIf $yearsDiffToToday == 0.0 Then
            Date $lastDate;
            If TIMEDIFF($mailAddress.validTo, $today, 'd') > 0.0 Then
               $lastDate := $mailAddress.validTo;
            Else
               $lastDate := $today;
            End
            If TOINTEGER($yearsDiffFromToday) == 0 Then
               $indRes.nbDaysSpentThisYear := TOINTEGER(TIMEDIFF($mailAddress.validFrom, $mailAddress.validTo, 'd'));
            ElseIf TOINTEGER($yearsDiffFromToday) == 1 Then
               $indRes.nbDaysSpentThisYear := TOINTEGER(TIMEDIFF(LIB_DateHelper.firstDayOfYear($currentYear), $today, 'd'));
               $indRes.nbDaysSpentThiLastYear := TOINTEGER(TIMEDIFF($mailAddress.validFrom, LIB_DateHelper.lastDayOfYear($currentYear - 1), 'd'));
            ElseIf TOINTEGER($yearsDiffFromToday) == 2 Then
               $indRes.nbDaysSpentThisYear := TOINTEGER(TIMEDIFF(LIB_DateHelper.firstDayOfYear($currentYear), $today, 'd'));
               $indRes.nbDaysSpentThiLastYear := TOINTEGER(TIMEDIFF(LIB_DateHelper.firstDayOfYear($currentYear - 1), LIB_DateHelper.lastDayOfYear($currentYear - 1), 'd'));
               $indRes.nbDaysSpentTheYearBefore := TOINTEGER(TIMEDIFF($mailAddress.validFrom, LIB_DateHelper.lastDayOfYear($currentYear - 2), 'd'));
            Else
               $indRes.nbDaysSpentThisYear := TOINTEGER(TIMEDIFF(LIB_DateHelper.firstDayOfYear($currentYear), $lastDate, 'd'));
               $indRes.nbDaysSpentThiLastYear := TOINTEGER(TIMEDIFF(LIB_DateHelper.firstDayOfYear($currentYear - 1), LIB_DateHelper.lastDayOfYear($currentYear - 1), 'd'));
               $indRes.nbDaysSpentTheYearBefore := TOINTEGER(TIMEDIFF(LIB_DateHelper.firstDayOfYear($currentYear - 2), LIB_DateHelper.lastDayOfYear($currentYear - 2), 'd'));
            End
         ElseIf TOINTEGER($yearsDiffToToday) == 1 Then
            If TOINTEGER($yearsDiffFromToday) == 1 Then
               $indRes.nbDaysSpentThiLastYear := TOINTEGER(TIMEDIFF($mailAddress.validFrom, $mailAddress.validTo, 'd'));
            ElseIf TOINTEGER($yearsDiffFromToday) == 2 Then
               $indRes.nbDaysSpentThiLastYear := TOINTEGER(TIMEDIFF(LIB_DateHelper.firstDayOfYear($currentYear - 1), $mailAddress.validTo, 'd'));
               $indRes.nbDaysSpentTheYearBefore := TOINTEGER(TIMEDIFF($mailAddress.validFrom, LIB_DateHelper.lastDayOfYear($currentYear - 2), 'd'));
            ElseIf TOINTEGER($yearsDiffFromToday) > 2 Then
               $indRes.nbDaysSpentThiLastYear := TOINTEGER(TIMEDIFF(LIB_DateHelper.firstDayOfYear($currentYear - 1), $mailAddress.validTo, 'd'));
               $indRes.nbDaysSpentTheYearBefore := TOINTEGER(TIMEDIFF(LIB_DateHelper.firstDayOfYear($currentYear - 2), LIB_DateHelper.lastDayOfYear($currentYear - 2), 'd'));
            End
         ElseIf TOINTEGER($yearsDiffToToday) == 2 Then
            If TOINTEGER($yearsDiffFromToday) == 2 Then
               $indRes.nbDaysSpentTheYearBefore := TOINTEGER(TIMEDIFF($mailAddress.validFrom, $mailAddress.validTo, 'd'));
            Else
               $indRes.nbDaysSpentTheYearBefore := TOINTEGER(TIMEDIFF($mailAddress.validTo, LIB_DateHelper.lastDayOfYear($currentYear - 2), 'd'));
            End
         Else
            LIB_Logger.integrationError('[createSILIndividualResidency] Previous Residency dates are not valid');
         End
      End
   End
   Return $indRes;
End]]></definition>
        </method>
        <method name="createSILInvolvedPartyIDV" userId="43880320-CH01" uuid="00000000-48c4-00b6-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILInvolvedPartyIDV'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILInvolvedPartyIDV(CMN_Party $cmnParty, CMN_BusinessRelationship $br, SIL_INVOLVEDPARTYinvolvedParty $silInvolvedParty) : SIL_INVOLVEDPARTYinvolvedParty Begin
   If ISA($cmnParty, CMN_PhysicalPerson) and ISA($silInvolvedParty, SIL_INVOLVEDPARTYindividual) Then
      $silInvolvedParty := INT_SILMappingCMNtoSIL_v1.createSILIndividualIDV(CAST(CMN_PhysicalPerson, $cmnParty), $br, CAST(SIL_INVOLVEDPARTYindividual, $silInvolvedParty));
   ElseIf ISA($cmnParty, CMN_LegalEntity) and ISA($silInvolvedParty, SIL_INVOLVEDPARTYorganization) Then
      $silInvolvedParty := INT_SILMappingCMNtoSIL_v1.createSILOrganizationIDV(CAST(CMN_LegalEntity, $cmnParty), $br, CAST(SIL_INVOLVEDPARTYorganization, $silInvolvedParty));
   Else
      LIB_Logger.integrationError('UNKNOWN Party TYPE CONVERT: ' & TOSTRING($cmnParty));
   End
   Return $silInvolvedParty;
End]]></definition>
        </method>
        <method name="createSILMailingInstructions" userId="pezzi" uuid="ffffffff-93f4-2f76-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILMailingInstructions'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILMailingInstructions(CMN_BusinessRelationship $cmnBusinessRelationship) : Indexed SIL_ACCOUNTmailInstruction Begin
   /******** Mailing Instructions ************/
   Indexed SIL_ACCOUNTmailInstruction $silACCOUNTmailInstructions := NewIndexed(SIL_ACCOUNTmailInstruction);
   ForEach Record $cmnMailingInstructionType In RECORDS('CMN_MailingInstructionsTypes__selector') Do
      CMN_MailingInstruction $cmnMailingInstruction := $cmnBusinessRelationship.mailingInstructions[TOSTRING($cmnMailingInstructionType.getValue('id'))];
      If $cmnMailingInstruction == null Then
         Continue;
      End
      SIL_ACCOUNTmailInstruction $silACCOUNTmailInstruction := CAST(SIL_ACCOUNTmailInstruction, CreateSkeletonDataClass(SIL_ACCOUNTmailInstruction));
      IF(NotEmpty($cmnMailingInstruction.language), $silACCOUNTmailInstruction.languageId := LIST($cmnMailingInstruction.language, 'CMN_MailingInstructionLanguage__selector', 'sil_id'));
      IF(NotEmpty($cmnMailingInstruction.frequency), $silACCOUNTmailInstruction.frequency := LIST($cmnMailingInstruction.frequency, 'CMN_MailingInstructionFrequency__selector', 'sil_id'));
      //IF(NotEmpty($cmnMailingInstruction.assetsFrequency), $silACCOUNTmailInstruction.checkGeneration := LIST($cmnMailingInstruction.assetsFrequency, 'CMN_MailingInstructionFrequency', 'sil_id'));
      //IF($cmnMailingInstruction.hasLetterHead != null, $silACCOUNTmailInstruction.withLetterHead := $cmnMailingInstruction.hasLetterHead);
      If NotEmpty($cmnMailingInstruction.mode) Then
         $silACCOUNTmailInstruction.type := LIST($cmnMailingInstruction.mode, 'CMN_MailingInstructionModes__selector', 'sil_id');
         If EQUAL($cmnMailingInstruction.mode, 'mailAndInternet') Then
            //create a clone for internetOnly
            SIL_ACCOUNTmailInstruction $internetilACCOUNTmailInstruction := CLONE($silACCOUNTmailInstruction);
            $internetilACCOUNTmailInstruction.type := LIST('internetOnly', 'CMN_MailingInstructionModes__selector', 'sil_id');
            $silACCOUNTmailInstructions.addElement($internetilACCOUNTmailInstruction);
         End
         If not EQUAL($cmnMailingInstruction.mode, 'internetOnly') Then
            SIL_INVOLVEDPARTYpostalAddress $silPostalAddress := INT_SILMappingCMNtoSIL_v1.createSILPostalAddress($cmnMailingInstruction.originalRecipient);
            If $silPostalAddress != null Then
               $silACCOUNTmailInstruction.address := $silPostalAddress;
            End
         End
         $silACCOUNTmailInstructions.addElement($silACCOUNTmailInstruction);
      End
      If $cmnMailingInstruction.hasCopyMail and LIB_Validator.validateNotEmptyIndexed($cmnMailingInstruction.copyRecipients) Then
         ForEach CMN_MailingParty $cmnMailingParty In $cmnMailingInstruction.copyRecipients Do
            SIL_ACCOUNTmailInstruction $copySilACCOUNTmailInstruction := CLONE($silACCOUNTmailInstruction);
            //$copySilACCOUNTmailInstruction.dispatchCode := LIST('mailAndInternet', 'CMN_MailingInstructionModes__selector', 'sil_id');
            $copySilACCOUNTmailInstruction.type := LIST('mailAndInternet', 'CMN_MailingInstructionModes__selector', 'sil_id');
            SIL_INVOLVEDPARTYpostalAddress $silPostalAddress := INT_SILMappingCMNtoSIL_v1.createSILPostalAddress($cmnMailingParty);
            If $silPostalAddress != null Then
               $copySilACCOUNTmailInstruction.address := $silPostalAddress;
            End
            $silACCOUNTmailInstructions.addElement($copySilACCOUNTmailInstruction);
         End
      End
   End
   Return $silACCOUNTmailInstructions;
End]]></definition>
        </method>
        <method name="createSILOrganization" userId="pezzi" uuid="ffffffff-d994-e88d-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILOrganization'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILOrganization(CMN_LegalEntity $cmnLegalEntity, SIL_INVOLVEDPARTYorganization $silOrganization := null) : SIL_INVOLVEDPARTYorganization Begin
   If $silOrganization == null Then
      If $cmnLegalEntity.type.isTrustOrFoundation() Then
         $silOrganization := CAST(SIL_INVOLVEDPARTYtrust, CreateSkeletonDataClass(SIL_INVOLVEDPARTYtrust));
      Else
         $silOrganization := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
      End
      //$silOrganization.entityType := INT_SILMatchingTools_v1.matchCMNIdToSILFCCRAMCustomerTypesCMNDescription($cmnLegalEntity.type.getTypeId());
   End
   /******************************** RETURN RESULT ********************************************/
   Return $silOrganization;
End]]></definition>
        </method>
        <method name="createSILOrganizationIDV" userId="pezzi" uuid="00000000-37a3-4aee-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILOrganizationIDV'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILOrganizationIDV(CMN_LegalEntity $cmnLegalEntity, CMN_BusinessRelationship $br, SIL_INVOLVEDPARTYorganization $silOrganization) : SIL_INVOLVEDPARTYorganization Begin
   If $cmnLegalEntity == null || $silOrganization == null Then
      Return $silOrganization;
   End
   /**************************************** CREATE INDEXES ****************************************/
   $silOrganization.names := NewIndexed(SIL_INVOLVEDPARTYindividualName);
   $silOrganization.addresses := NewIndexed(SIL_INVOLVEDPARTYaddress);
   $silOrganization.roles := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyRole);
   $silOrganization.businessNatureDetails := NewIndexed(SIL_INVOLVEDPARTYbusinessNatureDetails);
   $silOrganization.documentationItems := NewIndexed(SIL_INVOLVEDPARTYdocumentationItem);
   SIL_INVOLVEDPARTYincorporation $incorporation := CAST(SIL_INVOLVEDPARTYincorporation, CreateSkeletonDataClass(SIL_INVOLVEDPARTYincorporation));
   $silOrganization.documentationItems.addElement($incorporation);
   /******************************** Identification ****************************************************/
   CMN_LegalEntityKycProfile $cmnLegalEntityKycProfile := $cmnLegalEntity.getKYCProfile();
   //Organization <-> business nature details
   /******************************** GENERAL FIELDS *******************************************/
   //IF($cmnLegalEntity.registrationNumber != null, $silOrganization.companyNumber := $cmnLegalEntity.registrationNumber);  
   //IF($cmnLegalEntity.revocability != null, $silOrganization.:=$cmnLegalEntity.revocability);
   //IF($cmnLegalEntity.irrevocabilityType != null, $silOrganization.:=$cmnLegalEntity.irrevocabilityType);
   //IF($cmnLegalEntity.applicableLawCountry != null, $silOrganization.:=$cmnLegalEntity.applicableLawCountry);
   //IF($cmnLegalEntity.hasRelationshipHSBCGroup != null, $silOrganization.:=$cmnLegalEntity.hasRelationshipHSBCGroup);
   //IF($cmnLegalEntity.registrationNumber != null, $silOrganization. := $cmnLegalEntity.registrationNumber);
   IF(NotEmpty($cmnLegalEntity.incorporationIssuingAuthority), $silOrganization.issuingAuthorityRegistrationName := $cmnLegalEntity.incorporationIssuingAuthority);
   //IF($cmnLegalEntity.futureDateTrustDissolution != null, $silOrganization. := $cmnLegalEntity.futureDateTrustDissolution);
   //IF($cmnLegalEntity.hsbcEntities != null, $silOrganization. := $cmnLegalEntity.hsbcEntities);
   //IF($cmnLegalEntity.dateOfBoardOfDirectors != null, $silOrganization. := $cmnLegalEntity.dateOfBoardOfDirectors);
   /******************************* Incorporation************************/
   IF($cmnLegalEntity.dateOfRegistration != null, $incorporation.incorporateDate := $cmnLegalEntity.dateOfRegistration);
   /*************** NAMES *********************/
   SIL_INVOLVEDPARTYorganizationName $silOrganizationName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
   IF($cmnLegalEntity.companyName != null, $silOrganizationName.businessName := $cmnLegalEntity.companyName);
   IF($cmnLegalEntity.getFullName() != null, $silOrganizationName.fullName := $cmnLegalEntity.getFullName());
   IF($cmnLegalEntity.tradingName != null, $silOrganizationName.tradingName := $cmnLegalEntity.tradingName);
   $silOrganization.names.addElement($silOrganizationName);
   /*************** Registrated ADDRESSES **********************/
   If LIB_Validator.validateNotEmptyIndexed($cmnLegalEntity.contact.genericAddresses) Then
      CMN_MailAddress $cmnMailAddress;
      SIL_INVOLVEDPARTYpostalAddress $silPostalAddress;
      ForEach $cmnMailAddress In $cmnLegalEntity.contact.genericAddresses Do
         If $cmnMailAddress != null Then
            $silPostalAddress := INT_SILMappingCMNtoSIL_v1.createSILPostalAddress($cmnMailAddress);
            If $silPostalAddress != null Then
               $silPostalAddress.type := LIST('generic', 'CMN_AddressTypes__selector', 'code');
               $silOrganization.addresses.addElement($silPostalAddress);
            End
            If NotEmpty($cmnMailAddress.city) Then
               $incorporation.incorporatePlace := $cmnMailAddress.city;
            End
            If NotEmpty($cmnMailAddress.country) Then
               SIL_INVOLVEDPARTYcountryAddress $silCountryAddress := INT_SILMappingCMNtoSIL_v1.createSILCountryAddress($cmnMailAddress.country, INT_SILEnumerations.getCountryTypeIncorporation());
               $silOrganization.addresses.addElement($silCountryAddress);
            End
         End
      End
   End
   /****************** BUSINESS ADDRESSES **********************/
   If LIB_Validator.validateNotEmptyIndexed($cmnLegalEntity.contact.businessAddress) Then
      CMN_MailAddress $cmnMailAddress;
      SIL_INVOLVEDPARTYpostalAddress $silPostalAddress;
      ForEach $cmnMailAddress In $cmnLegalEntity.contact.businessAddress Do
         If $cmnMailAddress != null Then
            $silPostalAddress := INT_SILMappingCMNtoSIL_v1.createSILPostalAddress($cmnMailAddress);
            If $silPostalAddress != null Then
               If $cmnLegalEntity.type.isTrustOrFoundation() Then
                  $silPostalAddress.type := LIST('administrative', 'CMN_AddressTypes__selector', 'code');
               Else
                  $silPostalAddress.type := LIST('business', 'CMN_AddressTypes__selector', 'code');
               End
               $silOrganization.addresses.addElement($silPostalAddress);
            End
         End
      End
   End
   /***************** Mailing ADDRESSES *********************/
   If LIB_Validator.validateNotEmptyIndexed($cmnLegalEntity.contact.mailingAddresses) Then
      CMN_MailAddress $cmnMailAddress;
      SIL_INVOLVEDPARTYpostalAddress $silPostalAddress;
      ForEach $cmnMailAddress In $cmnLegalEntity.contact.mailingAddresses Do
         If $cmnMailAddress != null Then
            $silPostalAddress := INT_SILMappingCMNtoSIL_v1.createSILPostalAddress($cmnMailAddress);
            If $silPostalAddress != null Then
               $silPostalAddress.type := LIST('mailing', 'CMN_AddressTypes__selector', 'code');
               $silOrganization.addresses.addElement($silPostalAddress);
            End
         End
      End
   End
   /******************************** Corporate Structure and Regulation ****************************************************/
   //IF($cmnLegalEntity.structureDetails.isOperatingOrHoldingCompany!=null,$silOrganization. := $cmnLegalEntity.structureDetails.isOperatingOrHoldingCompany);
   ForEach String $countryCode In $cmnLegalEntity.structureDetails.countryOfOperationsAssets Do
      $silOrganization.addresses.addElement(INT_SILMappingCMNtoSIL_v1.createSILCountryAddress($countryCode, INT_SILEnumerations.getCountryTypeOperation()));
   End
   IF($cmnLegalEntity.structureDetails.numberBranches != null, $silOrganization.numberOfBranches := ERROR(TOINTEGER($cmnLegalEntity.structureDetails.numberBranches), 0));
   //IF($cmnLegalEntity.structureDetails.isCustomerPartOfMastergroup!=null,$silOrganization. := $cmnLegalEntity.structureDetails.isCustomerPartOfMastergroup);
   //IF($cmnLegalEntity.structureDetails.nameMastergroup!=null,$silOrganization. := $cmnLegalEntity.structureDetails.nameMastergroup);
   If $cmnLegalEntity.structureDetails.isCustControlledByParentComp != null Then
      //$silOrganization. := $cmnLegalEntity.structureDetails.isCustControlledByParentComp;
      //IF($cmnLegalEntity.structureDetails.percParentCompanyOwnership!=null,$silOrganization. := $cmnLegalEntity.structureDetails.percParentCompanyOwnership);
      /********** Parent structure details ************/
      If $cmnLegalEntity.structureDetails.isCustControlledByParentComp Then
         $silOrganization.isSubOrganizationOf := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
         //IF($cmnLegalEntity.structureDetails.percParentCompanyOwnership != null,$silOrganization.isSubOrganizationOf.:=$cmnLegalEntity.structureDetails.percParentCompanyOwnership);
         IF($cmnLegalEntity.structureDetails.isExistingClient != null and NotEmpty($cmnLegalEntity.structureDetails.uniqueIdentifier), $silOrganization.id := $cmnLegalEntity.structureDetails.uniqueIdentifier);
         If $cmnLegalEntity.structureDetails.nameCustomerParent != null Then
            $silOrganization.names := NewIndexed(SIL_INVOLVEDPARTYorganizationName);
            $silOrganization.names[1] := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
            $silOrganization.names[1].fullName := $cmnLegalEntity.structureDetails.nameCustomerParent;
         End
         If NotEmpty($cmnLegalEntity.structureDetails.countryIncorporation) Then
            IF(not LIB_Validator.validateNotEmptyIndexed($silOrganization.isSubOrganizationOf.addresses), $silOrganization.isSubOrganizationOf.addresses := NewIndexed(SIL_INVOLVEDPARTYaddress));
            $silOrganization.isSubOrganizationOf.addresses.addElement(INT_SILMappingCMNtoSIL_v1.createSILCountryAddress($cmnLegalEntity.structureDetails.countryIncorporation, INT_SILEnumerations.getCountryTypeIncorporation()));
         End
         IF($cmnLegalEntity.structureDetails.nameRegulatoryBodyParent != null, $silOrganization.isSubOrganizationOf.regulatoryBody := $cmnLegalEntity.structureDetails.nameRegulatoryBodyParent);
         If NotEmpty($cmnLegalEntity.structureDetails.countryRegulatoryBody) Then
            IF(not LIB_Validator.validateNotEmptyIndexed($silOrganization.isSubOrganizationOf.addresses), $silOrganization.isSubOrganizationOf.addresses := NewIndexed(SIL_INVOLVEDPARTYaddress));
            $silOrganization.isSubOrganizationOf.addresses.addElement(INT_SILMappingCMNtoSIL_v1.createSILCountryAddress($cmnLegalEntity.structureDetails.countryRegulatoryBody, 'REGULATORY'));
         End
         //IF($cmnLegalEntity.structureDetails.isFinancialInstitution != null,$silOrganization.isSubOrganizationOf.:=$cmnLegalEntity.structureDetails.isFinancialInstitution);
         IF($cmnLegalEntity.structureDetails.isParentListInStockExchange != null, $silOrganization.isSubOrganizationOf.stockExchangeApprovalIndicator := $cmnLegalEntity.structureDetails.isParentListInStockExchange);
         IF(NotEmpty($cmnLegalEntity.structureDetails.nameExchangeParent), $silOrganization.isSubOrganizationOf.stockExchangeCode := $cmnLegalEntity.structureDetails.nameExchangeParent);
         //IF($cmnLegalEntity.structureDetails.hasEquityListingHSBCExchange != null,$silOrganization.isSubOrganizationOf.:=$cmnLegalEntity.structureDetails.hasEquityListingHSBCExchange);
         INT_SILMatchingTools_v1.matchCMNMainBusinessToSILOrganization($cmnLegalEntity.structureDetails.mainBusinessActivity, $silOrganization.isSubOrganizationOf);
      End
   End
   //IF($cmnLegalEntity.structureDetails.hasShareCapital!=null,$silOrganization. := $cmnLegalEntity.structureDetails.hasShareCapital);
   //IF($cmnLegalEntity.structureDetails.clarificationShareCapital!=null,$silOrganization. := $cmnLegalEntity.structureDetails.clarificationShareCapital);
   /****** regulated Financial Institution *****/
   //IF($cmnLegalEntity.structureDetails.isRegFinancialInstitution!=null,$silOrganization. := $cmnLegalEntity.structureDetails.isRegFinancialInstitution);
   IF($cmnLegalEntity.structureDetails.financialInstitution.nameRegulatoryBody != null, $silOrganization.regulatoryBody := $cmnLegalEntity.structureDetails.financialInstitution.nameRegulatoryBody);
   If NotEmpty($cmnLegalEntity.structureDetails.financialInstitution.countryRegulatoryBody) Then
      $silOrganization.addresses.addElement(INT_SILMappingCMNtoSIL_v1.createSILCountryAddress($cmnLegalEntity.structureDetails.financialInstitution.countryRegulatoryBody, 'REGULATORY'));
   End
   //IF($cmnLegalEntity.structureDetails.financialInstitution.regulatoryReferenceNumber!=null,$silOrganization. := $cmnLegalEntity.structureDetails.financialInstitution.regulatoryReferenceNumber);
   //IF($cmnLegalEntity.structureDetails.financialInstitution.isCountryMemberOfFATF!=null,$silOrganization. := $cmnLegalEntity.structureDetails.financialInstitution.isCountryMemberOfFATF);
   //IF($cmnLegalEntity.structureDetails.financialInstitution.hasCountryMeetingEUCriteria!=null,$silOrganization. := $cmnLegalEntity.structureDetails.financialInstitution.hasCountryMeetingEUCriteria);
   //IF($cmnLegalEntity.structureDetails.financialInstitution.isCountryNonHighRisk!=null,$silOrganization. := $cmnLegalEntity.structureDetails.financialInstitution.isCountryNonHighRisk);
   /**** stock exchange ***/
   IF($cmnLegalEntity.structureDetails.financialInstitution.isPartyListedStockExchange != null, $silOrganization.stockAvailabilityType := INT_SILMatchingTools_v1.matchCMNBooleanToSILYesNo($cmnLegalEntity.structureDetails.financialInstitution.isPartyListedStockExchange));
   //IF($cmnLegalEntity.structureDetails.financialInstitution.nameStockExchange!=null,$silOrganization. := $cmnLegalEntity.structureDetails.financialInstitution.nameStockExchange);
   //IF($cmnLegalEntity.structureDetails.financialInstitution.hasApprovedEquityExchange!=null,$silOrganization. := $cmnLegalEntity.structureDetails.financialInstitution.hasApprovedEquityExchange);
   //IF($cmnLegalEntity.structureDetails.financialInstitution.hasInternationalFirm!=null,$silOrganization. := $cmnLegalEntity.structureDetails.financialInstitution.hasInternationalFirm);
   IF($cmnLegalEntity.structureDetails.financialInstitution.nameAuditAccountingFirm != null, $silOrganization.auditingFirm := $cmnLegalEntity.structureDetails.financialInstitution.nameAuditAccountingFirm);
   //IF($cmnLegalEntity.structureDetails.hasMeetFinancialCriteria!=null,$silOrganization. := $cmnLegalEntity.structureDetails.hasMeetFinancialCriteria);
   //IF($cmnLegalEntity.structureDetails.hasMeetNonFinancialCriteria!=null,$silOrganization. := $cmnLegalEntity.structureDetails.hasMeetNonFinancialCriteria);
   /******************************** Bearer Shares ****************************************************/
   IF($cmnLegalEntityKycProfile.bearerShares.isBearerSharesCapableCompany != null, $silOrganization.isCapableOfIssuingBearerShares := $cmnLegalEntityKycProfile.bearerShares.isBearerSharesCapableCompany);
   //IF($cmnLegalEntityKycProfile.bearerShares.hasIBSCApprovedAtRRCSC != null, $silOrganization. := $cmnLegalEntityKycProfile.bearerShares.hasIBSCApprovedAtRRCSC);
   IF($cmnLegalEntityKycProfile.bearerShares.isIBSCCompany != null, $silOrganization.hasIssuedBearerShares := $cmnLegalEntityKycProfile.bearerShares.isIBSCCompany);
   Return $silOrganization;
End]]></definition>
        </method>
        <method name="createSILOverallNetWorth" userId="43880320-CH01" uuid="ffffffff-d8a1-eec4-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILOverallNetWorth'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILOverallNetWorth(CMN_OverallNetWorthAndIncome $cmnOverallNetWorthAndIncome) : Indexed SIL_SOWindividualSourceOfWealth Begin
   If $cmnOverallNetWorthAndIncome == null Then
      Return null;
   End
   Indexed SIL_SOWindividualSourceOfWealth $silKYCestimatedNetWorth := NewIndexed(SIL_SOWindividualSourceOfWealth);
   //IF($cmnOverallNetWorthAndIncome.estimatedOverallNetWorth!=null,$silIndividual.:=$cmnOverallNetWorthAndIncome.estimatedOverallNetWorth);
   //IF($cmnOverallNetWorthAndIncome.currency!=null,$silIndividual.:=$cmnOverallNetWorthAndIncome.currency);
   If LIB_Validator.validateNotEmptyIndexed($cmnOverallNetWorthAndIncome.netWorthItems) Then
      /*************** Business interests **********************/
      If $cmnOverallNetWorthAndIncome.netWorthItems[1] != null Then
         SIL_SOWbusinessWealthDetails $silBusinessWealthDetails := CAST(SIL_SOWbusinessWealthDetails, CreateSkeletonDataClass(SIL_SOWbusinessWealthDetails));
         IF($cmnOverallNetWorthAndIncome.netWorthItems[1].amount != null, $silBusinessWealthDetails.businessInterests := $cmnOverallNetWorthAndIncome.netWorthItems[1].amount);
         IF($cmnOverallNetWorthAndIncome.netWorthItems[1].percentage != null, $silBusinessWealthDetails.contributionPercent := $cmnOverallNetWorthAndIncome.netWorthItems[1].percentage);
         $silKYCestimatedNetWorth.addElement($silBusinessWealthDetails);
      End
      /*************** Bankable assets  **********************/
      If $cmnOverallNetWorthAndIncome.netWorthItems[2] != null Then
         SIL_SOWinvestmentsWealthDetails $silInvestmentsWealthDetails := CAST(SIL_SOWinvestmentsWealthDetails, CreateSkeletonDataClass(SIL_SOWinvestmentsWealthDetails));
         IF($cmnOverallNetWorthAndIncome.netWorthItems[2].amount != null, $silInvestmentsWealthDetails.netWorthEstimatedAmount := $cmnOverallNetWorthAndIncome.netWorthItems[2].amount);
         IF($cmnOverallNetWorthAndIncome.netWorthItems[2].percentage != null, $silInvestmentsWealthDetails.contributionPercent := $cmnOverallNetWorthAndIncome.netWorthItems[2].percentage);
         $silKYCestimatedNetWorth.addElement($silInvestmentsWealthDetails);
      End
      /*************** Personal estate **********************/
      /*If $cmnOverallNetWorthAndIncome .netWorthItems[3] != null Then
               SIL_Per $silInvestmentsWealthDetails := CAST(SIL_InvestmentsWealthDetails, CreateSkeletonDataClass(SIL_InvestmentsWealthDetails));
               IF($cmnOverallNetWorthAndIncome .netWorthItems[3].amount != null, $silInvestmentsWealthDetails.netWorthEstimatedAmount := $cmnOverallNetWorthAndIncome .netWorthItems[3].amount);
               IF($cmnOverallNetWorthAndIncome .netWorthItems[3].percentage != null, $silInvestmentsWealthDetails.contributionPercent := $cmnOverallNetWorthAndIncome .netWorthItems[3].percentage);
               $silKYCestimatedNetWorth.addElement($silInvestmentsWealthDetails);
            End*/
      /*************** Real estate **********************/
      If $cmnOverallNetWorthAndIncome.netWorthItems[4] != null Then
         SIL_SOWrealEstateWealthDetails $silRealEstateWealthDetails := CAST(SIL_SOWrealEstateWealthDetails, CreateSkeletonDataClass(SIL_SOWrealEstateWealthDetails));
         IF($cmnOverallNetWorthAndIncome.netWorthItems[4].amount != null, $silRealEstateWealthDetails.netWorthEstimatedAmount := $cmnOverallNetWorthAndIncome.netWorthItems[4].amount);
         IF($cmnOverallNetWorthAndIncome.netWorthItems[4].percentage != null, $silRealEstateWealthDetails.contributionPercent := $cmnOverallNetWorthAndIncome.netWorthItems[4].percentage);
         $silKYCestimatedNetWorth.addElement($silRealEstateWealthDetails);
      End
      /*************** Qualified retirement plans **********************/
      If $cmnOverallNetWorthAndIncome.netWorthItems[5] != null Then
         SIL_SOWretirementPlanWealthDetails $silretirementPlanWealthDetails := CAST(SIL_SOWretirementPlanWealthDetails, CreateSkeletonDataClass(SIL_SOWretirementPlanWealthDetails));
         IF($cmnOverallNetWorthAndIncome.netWorthItems[5].amount != null, $silretirementPlanWealthDetails.netWorthEstimatedAmount := $cmnOverallNetWorthAndIncome.netWorthItems[5].amount);
         IF($cmnOverallNetWorthAndIncome.netWorthItems[5].percentage != null, $silretirementPlanWealthDetails.contributionPercent := $cmnOverallNetWorthAndIncome.netWorthItems[6].percentage);
         $silKYCestimatedNetWorth.addElement($silretirementPlanWealthDetails);
      End
      /*************** Life insurance **********************/
      If $cmnOverallNetWorthAndIncome.netWorthItems[6] != null Then
         SIL_SOWlifeInsuranceWealthDetails $silSOWlifeInsuranceWealthDetails := CAST(SIL_SOWlifeInsuranceWealthDetails, CreateSkeletonDataClass(SIL_SOWlifeInsuranceWealthDetails));
         IF($cmnOverallNetWorthAndIncome.netWorthItems[6].amount != null, $silSOWlifeInsuranceWealthDetails.netWorthEstimatedAmount := $cmnOverallNetWorthAndIncome.netWorthItems[6].amount);
         IF($cmnOverallNetWorthAndIncome.netWorthItems[6].percentage != null, $silSOWlifeInsuranceWealthDetails.contributionPercent := $cmnOverallNetWorthAndIncome.netWorthItems[6].percentage);
         $silKYCestimatedNetWorth.addElement($silSOWlifeInsuranceWealthDetails);
      End
      /*************** Share/option ownership **********************/
      /* If $cmnOverallNetWorthAndIncome .netWorthItems[7] != null Then
               SIL_InvestmentsWealthDetails $silInvestmentsWealthDetails := CAST(SIL_InvestmentsWealthDetails, CreateSkeletonDataClass(SIL_InvestmentsWealthDetails));
               IF($cmnOverallNetWorthAndIncome .netWorthItems[7].amount != null, $silInvestmentsWealthDetails.netWorthEstimatedAmount := $cmnOverallNetWorthAndIncome .netWorthItems[7].amount);
               IF($cmnOverallNetWorthAndIncome .netWorthItems[7].percentage != null, $silBusinessWealthDetails.contributionPercent := $cmnOverallNetWorthAndIncome .netWorthItems[7].percentage);
               $silKYCestimatedNetWorth.addElement($silInvestmentsWealthDetails);
            End*/
      /*************** Other **********************/
      If $cmnOverallNetWorthAndIncome.netWorthItems[8] != null Then
         SIL_SOWotherWealthDetails $silOtherWealthDetails := CAST(SIL_SOWotherWealthDetails, CreateSkeletonDataClass(SIL_SOWotherWealthDetails));
         IF($cmnOverallNetWorthAndIncome.netWorthItems[8].name != null, $silOtherWealthDetails.comment := $cmnOverallNetWorthAndIncome.netWorthItems[8].name);
         IF($cmnOverallNetWorthAndIncome.netWorthItems[8].amount != null, $silOtherWealthDetails.netWorthEstimatedAmount := $cmnOverallNetWorthAndIncome.netWorthItems[8].amount);
         IF($cmnOverallNetWorthAndIncome.netWorthItems[8].percentage != null, $silOtherWealthDetails.contributionPercent := $cmnOverallNetWorthAndIncome.netWorthItems[8].percentage);
         $silKYCestimatedNetWorth.addElement($silOtherWealthDetails);
      End
      /************************************** Estimated Annual income  **********************/
      If LIB_Validator.validateNotEmptyIndexed($cmnOverallNetWorthAndIncome.estimatedAnnualIncomes) Then
         SIL_SOWotherWealthDetails $silOtherWealthDetails;
         CMN_EstimatedAnnualIncome $cmnEstimatedAnnualIncome;
         ForEach $cmnEstimatedAnnualIncome In $cmnOverallNetWorthAndIncome.estimatedAnnualIncomes Do
            $silOtherWealthDetails := CAST(SIL_SOWotherWealthDetails, CreateSkeletonDataClass(SIL_SOWotherWealthDetails));
            IF(NotEmpty($cmnEstimatedAnnualIncome.type), $silOtherWealthDetails.type := $cmnEstimatedAnnualIncome.type);
            IF($cmnEstimatedAnnualIncome.amount != null, $silOtherWealthDetails.netWorthEstimatedAmount := $cmnEstimatedAnnualIncome.amount);
            IF($cmnEstimatedAnnualIncome.comment != null, $silOtherWealthDetails.comment := $cmnEstimatedAnnualIncome.comment);
            $silKYCestimatedNetWorth.addElement($silOtherWealthDetails);
         End
      End
   End
   Return $silKYCestimatedNetWorth;
End]]></definition>
        </method>
        <method name="createSILOwnedBusiness" userId="pezzi" uuid="ffffffff-da8c-116b-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILOwnedBusiness'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILOwnedBusiness(CMN_Party $cmnParty, Indexed SIL_INVOLVEDPARTYbusinessOwner $silBusinessRoles := null) : Indexed SIL_INVOLVEDPARTYbusinessOwner Begin
   If not LIB_Validator.validateNotEmptyIndexed($silBusinessRoles) Then
      $silBusinessRoles := NewIndexed(SIL_INVOLVEDPARTYbusinessOwner);
   End
   If $cmnParty == null || not ISA($cmnParty, CMN_PhysicalPerson) Then
      Return $silBusinessRoles;
   End
   /********************************** CREATE SIL PROFESSIONAL ACTIVITY ********************************/
   CMN_KycSow $cmnPhysicalPersonKycSow;
   CMN_PhysicalPersonKycProfile $cmnPhysicalPersonKycProfile;
   If $cmnParty.kycProfile != null Then
      $cmnPhysicalPersonKycProfile := CAST(CMN_PhysicalPersonKycProfile, $cmnParty.kycProfile);
      If $cmnPhysicalPersonKycProfile.sourceOfWealth != null Then
         $cmnPhysicalPersonKycSow := $cmnPhysicalPersonKycProfile.sourceOfWealth;
         /************************************** SoW Employement **********************/
         If $cmnPhysicalPersonKycSow != null && LIB_Validator.validateNotEmptyIndexed($cmnPhysicalPersonKycSow.sowBusinessOwner) Then
            For Integer $i := 1 Condition $i <= $cmnPhysicalPersonKycSow.sowBusinessOwner.size() Step $i := $i + 1 Do
               CMN_KycSowBusinessOwner $sowBusinessOwner := $cmnPhysicalPersonKycSow.sowBusinessOwner[$i];
               If $sowBusinessOwner == null Then
                  Continue;
               End
               SIL_INVOLVEDPARTYbusinessOwner $silBusinessOwner := CAST(SIL_INVOLVEDPARTYbusinessOwner, CreateSkeletonDataClass(SIL_INVOLVEDPARTYbusinessOwner));
               If $silBusinessRoles.size() >= $i && $silBusinessRoles[$i] != null Then
                  $silBusinessOwner := $silBusinessRoles[$i];
               Else
                  $silBusinessRoles[$i] := $silBusinessOwner;
               End
               IF(NotEmpty($sowBusinessOwner.getSILID()), $silBusinessOwner.id := $sowBusinessOwner.getSILID());
               IF($sowBusinessOwner.customerOwnershipInterestRate != null, $silBusinessOwner.percentageOwnership := $sowBusinessOwner.customerOwnershipInterestRate);
               //1583 IF($sowBusinessOwner.contributionToSOW != null, $silBusinessOwner. := $sowBusinessOwner.contributionToSOW);
               IF($sowBusinessOwner.isEmployeeOfBusiness != null, $silBusinessOwner.employeeIndicator := $sowBusinessOwner.isEmployeeOfBusiness);
               IF($sowBusinessOwner.positionSince != null and $sowBusinessOwner.positionSince > 0, $silBusinessOwner.validFrom := DATEPARSE(TOSTRING($sowBusinessOwner.positionSince), 'y',LIB_ConfigHelper.getDefaultLocale('en'),'UTC'));
               If $sowBusinessOwner.isCurrentEmployment Then
                  $silBusinessOwner.validTo := null;
               ElseIf $sowBusinessOwner.positionUntil != null and $sowBusinessOwner.positionUntil > 0 Then
                  $silBusinessOwner.validTo := DATEPARSE($sowBusinessOwner.positionUntil.toString(), 'yyyy',LIB_ConfigHelper.getDefaultLocale('en'),'UTC');
               End
               If NotEmpty($sowBusinessOwner.professionalTitle) Then
                  $silBusinessOwner.ownershipRole := INT_SILMatchingTools_v1.matchCMNIdToSILEmploymentRolesId($sowBusinessOwner.professionalTitle);
               End
               If $silBusinessOwner.inContext == null Then
                  $silBusinessOwner.inContext := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
               End
               SIL_INVOLVEDPARTYorganization $silOrganization := CAST(SIL_INVOLVEDPARTYorganization, $silBusinessOwner.inContext);
               $silOrganization.names := NewIndexed(SIL_INVOLVEDPARTYorganizationName);
               If $sowBusinessOwner.companyName != null Then
                  SIL_INVOLVEDPARTYorganizationName $silOrganizationName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
                  $silOrganizationName.businessName := $sowBusinessOwner.companyName;
                  $silOrganization.names[1] := $silOrganizationName;
               End
               $silOrganization.addresses := NewIndexed(SIL_INVOLVEDPARTYaddress);
               SIL_INVOLVEDPARTYpostalAddress $silPostalAddress := CAST(SIL_INVOLVEDPARTYpostalAddress, CreateSkeletonDataClass(SIL_INVOLVEDPARTYpostalAddress));
               If $sowBusinessOwner.companyStreet != null Then
                  $silPostalAddress.street := $sowBusinessOwner.companyStreet;
               End
               If $sowBusinessOwner.companyCity != null Then
                  $silPostalAddress.city := $sowBusinessOwner.companyCity;
               End
               If NotEmpty($sowBusinessOwner.companyCountry) Then
                  $silPostalAddress.country := INT_SILMappingCMNtoSIL_v1.createSILCountry($sowBusinessOwner.companyCountry);
               End
               $silOrganization.addresses[1] := $silPostalAddress;
               $silOrganization.documentationItems := NewIndexed(SIL_INVOLVEDPARTYdocumentationItem);
               SIL_INVOLVEDPARTYincorporation $incorporation := CAST(SIL_INVOLVEDPARTYincorporation, CreateSkeletonDataClass(SIL_INVOLVEDPARTYincorporation));
               $silOrganization.documentationItems.addElement($incorporation);
               IF($sowBusinessOwner.businessStartDate != null, $incorporation.incorporateDate := $sowBusinessOwner.businessStartDate);
               IF($sowBusinessOwner.businessEndDate != null, $incorporation.incorporateClosedDate := $sowBusinessOwner.businessEndDate);
               IF($sowBusinessOwner.companyDescription != null, $silOrganization.businessDescription := $sowBusinessOwner.companyDescription);
               IF($sowBusinessOwner.employeeNumber != null, $silOrganization.numberOfEmployees := $sowBusinessOwner.employeeNumber);
               IF($sowBusinessOwner.branchesNumber != null, $silOrganization.numberOfBranches := $sowBusinessOwner.branchesNumber);
               //1599 IF($sowBusinessOwner.localOfficesNumber != null, $silOrganization. := $sowBusinessOwner.localOfficesNumber);
               IF($sowBusinessOwner.totalAnnualGrossRevenues != null, $silOrganization.annualTurnOverInUSD := $sowBusinessOwner.totalAnnualGrossRevenues);
               IF($sowBusinessOwner.annualAverageProfit != null, $silOrganization.annualProfitInUSD := $sowBusinessOwner.annualAverageProfit);
               INT_SILMatchingTools_v1.matchCMNMainBusinessToSILOrganization($sowBusinessOwner.mainBusiness, $silOrganization);
               If LIB_Validator.validateNotEmptyIndexed($sowBusinessOwner.countriesBusinessExposure) Then
                  CMN_KycBusinessExposure $cmnKycBusinessExposure;
                  ForEach $cmnKycBusinessExposure In $sowBusinessOwner.countriesBusinessExposure Do
                     If $cmnKycBusinessExposure != null && NotEmpty($cmnKycBusinessExposure.businessExposure) Then
                        IF($silOrganization.addresses == null, $silOrganization.addresses := NewIndexed(SIL_INVOLVEDPARTYaddress));
                        SIL_INVOLVEDPARTYcountryAddress $silCountryAddress := INT_SILMappingCMNtoSIL_v1.createSILCountryAddress($cmnKycBusinessExposure.businessExposure, INT_SILEnumerations.getCountryTypeExposure());
                        $silOrganization.addresses.addElement($silCountryAddress);
                     End
                     //1606 IF($cmnKycBusinessExposure.businessExposureRate != null, $silBusinessOwner. := $sowEmployment.businessExposureRate);
                  End
               End
               IF($silOrganization.businessNatureDetails == null, $silOrganization.businessNatureDetails := NewIndexed(SIL_INVOLVEDPARTYbusinessNatureDetails));
               IF($silOrganization.businessNatureDetails.size() == 0, $silOrganization.businessNatureDetails[1] := CAST(SIL_INVOLVEDPARTYbusinessNatureDetails, CreateSkeletonDataClass(SIL_INVOLVEDPARTYbusinessNatureDetails)));
               SIL_INVOLVEDPARTYbusinessNatureDetails $silBusinessNatureDetails := $silOrganization.businessNatureDetails[1];
               If $sowBusinessOwner.isGovernmentContract != null Then
                  $silBusinessNatureDetails.isInvolvedInGovernmentContract := $sowBusinessOwner.isGovernmentContract;
                  If LIB_Validator.validateNotEmptyIndexed($sowBusinessOwner.governmentContractCountry) Then
                     $silBusinessNatureDetails.businessCustomers := NewIndexed(SIL_INVOLVEDPARTYbusinessCustomer);
                     ForEach String $country In $sowBusinessOwner.governmentContractCountry Do
                        If NotEmpty($country) Then
                           SIL_INVOLVEDPARTYbusinessCustomer $silBusinessCustomer := CAST(SIL_INVOLVEDPARTYbusinessCustomer, CreateSkeletonDataClass(SIL_INVOLVEDPARTYbusinessCustomer));
                           $silBusinessCustomer.country := INT_SILMappingCMNtoSIL_v1.createSILCountry($country);
                           $silBusinessCustomer.isGovernmental := true;
                           $silBusinessNatureDetails.businessCustomers.addElement($silBusinessCustomer);
                        End
                     End
                  End
               End
               //1610 IF($sowBusinessOwner.isOwnershipGreater25()!=null,$silOrganization.:=$sowBUsinessOwner.isOwnershipGreater25());
               //1611 IF($sowBusinessOwner.isPubliclyTradedCompany != null, $silOrganization.islistedCorporation := $sowBusinessOwner.isPubliclyTradedCompany);
               //1612 IF(NotEmpty($sowBusinessOwner.tradingLocation), $silOrganization.stockExchangeCountry := INT_SILMappingCMNtoSIL_v1.createSILCountry($sowBusinessOwner.tradingLocation));
               //1613 IF($sowBusinessOwner.tradingPartners != null, $silOrganization. := $sowBusinessOwner.tradingPartners);
               // IF($sowBusinessOwner.isAllNegativeNewsSearches != null, $silOrganization. := $sowBusinessOwner.isAllNegativeNewsSearches);
               If LIB_Validator.validateNotEmptyIndexed($sowBusinessOwner.evidences) Then
                  CMN_hyperlink $cmnEvidences;
                  ForEach $cmnEvidences In $sowBusinessOwner.evidences Do
                     //1978
                     //1692
                  End
               End
            End
         End
      End
   End
   Return $silBusinessRoles;
End]]></definition>
        </method>
        <method name="createSILPEPCustomer" userId="pezzi" uuid="00000000-54ae-777f-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILPEPCustomer'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILPEPCustomer(CMN_Party $cmnParty, SIL_CUSTOMERCLASSIFICATIONpepCustomer $pepCustomer := null) : SIL_CUSTOMERCLASSIFICATIONpepCustomer Begin
   If $pepCustomer == null Then
      $pepCustomer := CAST(SIL_CUSTOMERCLASSIFICATIONpepCustomer, CreateSkeletonDataClass(SIL_CUSTOMERCLASSIFICATIONpepCustomer));
   End
   If $cmnParty == null Then
      Return $pepCustomer;
   End
   CMN_PEPSCCDetails $cmnPEPSCCDetails := $cmnParty.kycProfile.pepSCCDetails;
   IF($cmnPEPSCCDetails.finalPEPCategory != null, $pepCustomer.finalPEPCategory := $cmnPEPSCCDetails.finalPEPCategory);
   $pepCustomer.classification := 'hahah';
   Return $pepCustomer;
End]]></definition>
        </method>
        <method name="createSILPEPRelatedParty" userId="pezzi" uuid="ffffffff-b46d-b09c-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILPEPRelatedParty'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILPEPRelatedParty(CMN_Party $cmnParty, SIL_CUSTOMERCLASSIFICATIONpepRelatedParty $silPEPRelatedParty := null) : SIL_CUSTOMERCLASSIFICATIONpepRelatedParty Begin
   If $cmnParty == null Then
      Return null;
   End
   CMN_PEPSCCDetails $pepDetails := $cmnParty.kycProfile.pepSCCDetails;
   If $pepDetails == null Then
      Return null;
   End
   If $silPEPRelatedParty == null Then
      $silPEPRelatedParty := CAST(SIL_CUSTOMERCLASSIFICATIONpepRelatedParty, CreateSkeletonDataClass(SIL_CUSTOMERCLASSIFICATIONpepRelatedParty));
   End
   IF($pepDetails.isAssociatedExistBankPartner != null, $silPEPRelatedParty.isAnExistingCustomer := $pepDetails.isAssociatedExistBankPartner);
   If $pepDetails.associatedPEPID != null Then
      IF($silPEPRelatedParty.involvedParty == null, $silPEPRelatedParty.involvedParty := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual)));
      $silPEPRelatedParty.involvedParty.cduId := $pepDetails.associatedPEPID;
   End
   SIL_INVOLVEDPARTYindividualName $silIndividualName := null;
   If $pepDetails.associatedPEPName != null Then
      IF($silPEPRelatedParty.involvedParty == null, $silPEPRelatedParty.involvedParty := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual)));
      IF(LIB_Validator.validateNotEmptyIndexed($silPEPRelatedParty.involvedParty.names), $silPEPRelatedParty.involvedParty.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName));
      IF($silIndividualName == null, $silIndividualName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName)));
      $silIndividualName.firstName := $pepDetails.associatedPEPName;
   End
   If $pepDetails.associatedPEPLastName != null Then
      IF($silPEPRelatedParty.involvedParty == null, $silPEPRelatedParty.involvedParty := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual)));
      IF(LIB_Validator.validateNotEmptyIndexed($silPEPRelatedParty.involvedParty.names), $silPEPRelatedParty.involvedParty.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName));
      IF($silIndividualName == null, $silIndividualName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName)));
      $silIndividualName.lastName := $pepDetails.associatedPEPLastName;
   End
   If $silIndividualName != null Then
      $silPEPRelatedParty.involvedParty.names.addElement($silIndividualName);
   End
   If NotEmpty($pepDetails.associatedPEPNationality) Then
      IF($silPEPRelatedParty.involvedParty == null, $silPEPRelatedParty.involvedParty := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual)));
      IF(LIB_Validator.validateNotEmptyIndexed($silPEPRelatedParty.involvedParty.nationalities), $silPEPRelatedParty.involvedParty.nationalities := NewIndexed(SIL_STATICcountry));
      SIL_STATICcountry $silCountry := INT_SILMappingCMNtoSIL_v1.createSILCountry($pepDetails.associatedPEPNationality);
      $silPEPRelatedParty.involvedParty.nationalities.addElement($silCountry);
   End
   // IF($pepDetails.associatedPEPReason != null, $silPEPRelatedParty.reason := LIST($pepDetails.associatedPEPReason, 'CMN_KYCAssociatedPepReason', 'sil_id'));
   //IF($pepDetails.associatedPEPDescription != null, $silPEPRelatedParty.description := $pepDetails.associatedPEPDescription);
   If NotEmpty($pepDetails.countryPoliticalExposure) Then
      IF($silPEPRelatedParty.involvedParty == null, $silPEPRelatedParty.involvedParty := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual)));
      IF(LIB_Validator.validateNotEmptyIndexed($silPEPRelatedParty.involvedParty.addresses), $silPEPRelatedParty.involvedParty.addresses := NewIndexed(SIL_INVOLVEDPARTYaddress));
      SIL_INVOLVEDPARTYaddress $silCountryAddress := INT_SILMappingCMNtoSIL_v1.createSILCountryAddress($pepDetails.countryPoliticalExposure, INT_SILEnumerations.getCountryTypeExposure());
      $silPEPRelatedParty.involvedParty.addresses.addElement($silCountryAddress);
   End
   // IF($pepDetails.associatedStartPEPDate != null, $silPEPRelatedParty.startDate := $pepDetails.associatedStartPEPDate);
   // IF($pepDetails.associatedEndPEPDate != null, $silPEPRelatedParty.endDate := $pepDetails.associatedEndPEPDate);
   //IF($pepDetails.associatedPEPPosition != null, $silPEPRelatedParty. := $pepDetails.associatedPEPPosition);
   //IF($pepDetails.relationEntityDescription != null, $silPEPRelatedParty. := $pepDetails.relationEntityDescription);
   //IF($pepDetails.hasAssociatedPepControl != null, $silPEPRelatedParty. := $pepDetails.hasAssociatedPepControl);
   //IF($pepDetails.associatedPepPositionTimeHeld != null, $silPEPRelatedParty. := $pepDetails.associatedPepPositionTimeHeld);
   //IF($pepDetails.hasAssociatedPepConflicts != null, $silPEPRelatedParty. := $pepDetails.hasAssociatedPepConflicts);
   //IF($pepDetails.hasAssociatedPepConflicts && $pepDetails.associatedPepCustomerRelation != null, $silPEPRelatedParty. := $pepDetails.associatedPepCustomerRelation);
   // IF($pepDetails.relationshipPEPToCustomer != null, $silPEPRelatedParty.type := $pepDetails.relationshipPEPToCustomer);
   // IF(NotEmpty($pepDetails.relationshipPEPToCustomerOther), $silPEPRelatedParty.type := $pepDetails.relationshipPEPToCustomerOther);
   // IF($pepDetails.relationshipDescription != null, $silPEPRelatedParty.description := $pepDetails.relationshipDescription);
   Return $silPEPRelatedParty;
End]]></definition>
        </method>
        <method name="createSILPhoneAddress" userId="pezzi" uuid="00000000-29d7-9a00-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILPhoneAddress'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILPhoneAddress(CMN_Phone $cmnPhone) : SIL_INVOLVEDPARTYtelephoneNumber Begin
   SIL_INVOLVEDPARTYtelephoneNumber $silPhone := CAST(SIL_INVOLVEDPARTYtelephoneNumber, CreateSkeletonDataClass(SIL_INVOLVEDPARTYtelephoneNumber));
   If $cmnPhone == null Then
      LIB_Logger.integrationWarn('[INT_SILMapping]: CMN_Phone for SIL_INVOLVEDPARTYtelephoneNumber is null, generating empty SIL Object');
      Return $silPhone;
   End
   IF(not EMPTY($cmnPhone.getSILID()), $silPhone.addressId := $cmnPhone.getSILID());
   IF(not EMPTY($cmnPhone.type), $silPhone.type := $cmnPhone.type);
   IF(not EMPTY($cmnPhone.status), $silPhone.status := $cmnPhone.status);
   If not EMPTY($cmnPhone.country) Then
      $silPhone.country := INT_SILMappingCMNtoSIL_v1.createSILCountry($cmnPhone.country);
   End
   IF(not EMPTY($cmnPhone.extensionNumber), $silPhone.extension := $cmnPhone.extensionNumber);
   IF(not EMPTY($cmnPhone.prefix), $silPhone.prefix := $cmnPhone.prefix);
   IF(not EMPTY($cmnPhone.number), $silPhone.number := $cmnPhone.number);
   IF(not EMPTY($cmnPhone.extensionNumber), $silPhone.extension := $cmnPhone.extensionNumber);
   IF(not EMPTY($cmnPhone.description), $silPhone.comment := $cmnPhone.description);
   IF($cmnPhone.preferredCallBack != null, $silPhone.isPrimary := not $cmnPhone.preferredCallBack);
   //IF($cmnPhone.referral != null, $silPhone. := $cmnPhone.referral);
   Return $silPhone;
End]]></definition>
        </method>
        <method name="createSILPortfolios" userId="pezzi" uuid="00000000-7aae-ae05-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILPortfolios'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILPortfolios(CMN_BusinessRelationship $cmnBusinessRelationship) : Indexed SIL_ACCOUNTportfolio Begin
   Indexed SIL_ACCOUNTportfolio $silPortfolios := NewIndexed(SIL_ACCOUNTportfolio);
   If LIB_Validator.validateNotEmptyIndexed($cmnBusinessRelationship.portfolios) Then
      CMN_Portfolio $cmnPortfolio;
      ForEach $portfolio In $cmnBusinessRelationship.portfolios Do
         SIL_ACCOUNTportfolio $silACCOUNTportfolio := CAST(SIL_ACCOUNTportfolio, CreateSkeletonDataClass(SIL_ACCOUNTportfolio));
         IF(NotEmpty($portfolio.mandateCategory), $silACCOUNTportfolio.category := $portfolio.mandateCategory);
         IF(NotEmpty($portfolio.mandateManagedBy), $silACCOUNTportfolio.managedBy := $portfolio.mandateManagedBy);
         If NotEmpty($portfolio.mandateType) Then
            $silACCOUNTportfolio.mandateType := $portfolio.mandateType;
            $silACCOUNTportfolio.portfolioId := LIST($portfolio.mandateType, 'CMN_Mandates__selector', 'id');
         End
         IF(NotEmpty($portfolio.currency), $silACCOUNTportfolio.defaultCurrency := INT_SILMappingCMNtoSIL_v1.createSILCurrency($portfolio.currency));
         IF(NotEmpty($portfolio.docMandate), $silACCOUNTportfolio.mandateType := $portfolio.docMandate);
         IF(NotEmpty($portfolio.mandateYesNo), $silACCOUNTportfolio.mandated := $portfolio.mandateYesNo == 'y');
         //IF(NotEmpty($portfolio.hedged_unhedged_flag), $silACCOUNTportfolio. := $portfolio.hedged_unhedged_flag);
         //IF($portfolio.mandatory != null, $silACCOUNTportfolio. := $portfolio.docMandate);
         //IF(NotEmpty($portfolio.profile), $silACCOUNTportfolio. := $portfolio.profile);
         //IF(NotEmpty($portfolio.strategyType), $silACCOUNTportfolio. := $portfolio.strategyType);
         $silPortfolios.addElement($silACCOUNTportfolio);
      End
   End
   Return $silPortfolios;
End]]></definition>
        </method>
        <method name="createSILPostalAddress" userId="pezzi" uuid="00000000-39c9-bc8f-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILPostalAddress'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILPostalAddress(CMN_MailAddress $cmnAddress) : SIL_INVOLVEDPARTYpostalAddress Begin
   If $cmnAddress == null Then
      LIB_Logger.integrationWarn('[INT_SILMapping]: CMN_MailAddress is null, generating empty SIL_PostalAddress');
      Return null;
   End
   If EMPTY($cmnAddress.zip) or EMPTY($cmnAddress.city) or EMPTY($cmnAddress.country) Then
      Return null;
   End
   SIL_INVOLVEDPARTYpostalAddress $silAddress := CAST(SIL_INVOLVEDPARTYpostalAddress, CreateSkeletonDataClass(SIL_INVOLVEDPARTYpostalAddress));
   IF($cmnAddress.zip != null, $silAddress.zipcode := $cmnAddress.zip);
   IF($cmnAddress.city != null, $silAddress.city := $cmnAddress.city);
   IF(NotEmpty($cmnAddress.country), $silAddress.country := INT_SILMappingCMNtoSIL_v1.createSILCountry($cmnAddress.country));
   IF($cmnAddress.getSILID() != null, $silAddress.addressId := $cmnAddress.getSILID());
   IF($cmnAddress.isMain != null, $silAddress.isPrimary := $cmnAddress.isMain);
   IF($cmnAddress.co != null, $silAddress.co := $cmnAddress.co);
   IF($cmnAddress.street != null, $silAddress.street := $cmnAddress.street);
   IF($cmnAddress.streetNumber != null, $silAddress.streetNumber := $cmnAddress.streetNumber);
   IF($cmnAddress.additionalStreet != null, $silAddress.additionalAddress := $cmnAddress.additionalStreet);
   IF($cmnAddress.complementCity != null, $silAddress.state := $cmnAddress.complementCity);
   IF($cmnAddress.poBox != null, $silAddress.poBox := $cmnAddress.poBox);
   IF($cmnAddress.validFrom != null, $silAddress.validFrom := $cmnAddress.validFrom);
   IF($cmnAddress.validTo != null, $silAddress.validTo := $cmnAddress.validTo);
   Return $silAddress;
End]]></definition>
        </method>
        <method name="createSILProfessionalActivity" userId="pezzi" uuid="00000000-0d71-dfb0-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILProfessionalActivity'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILProfessionalActivity(CMN_Party $cmnParty, Indexed SIL_INVOLVEDPARTYemployeeRole $silEmployeeRoles := null) : Indexed SIL_INVOLVEDPARTYemployeeRole Begin
   If not LIB_Validator.validateNotEmptyIndexed($silEmployeeRoles) Then
      $silEmployeeRoles := NewIndexed(SIL_INVOLVEDPARTYemployeeRole);
   End
   If $cmnParty == null || not ISA($cmnParty, CMN_PhysicalPerson) Then
      Return $silEmployeeRoles;
   End
   /********************************** CREATE SIL PROFESSIONAL ACTIVITY ********************************/
   CMN_KycSow $cmnPhysicalPersonKycSow;
   CMN_PhysicalPersonKycProfile $cmnPhysicalPersonKycProfile;
   If $cmnParty.kycProfile != null Then
      $cmnPhysicalPersonKycProfile := CAST(CMN_PhysicalPerson, $cmnParty).getKYCProfile();
      If $cmnPhysicalPersonKycProfile.sourceOfWealth != null Then
         $cmnPhysicalPersonKycSow := $cmnPhysicalPersonKycProfile.sourceOfWealth;
         /************************************** SoW Employement **********************/
         If $cmnPhysicalPersonKycSow != null && LIB_Validator.validateNotEmptyIndexed($cmnPhysicalPersonKycSow.sowEmployment) Then
            For Integer $i := 1 Condition $i <= $cmnPhysicalPersonKycSow.sowEmployment.size() Step $i := $i + 1 Do
               CMN_KycSowEmployment $sowEmployment := $cmnPhysicalPersonKycSow.sowEmployment[$i];
               If $sowEmployment == null Then
                  Continue;
               End
               //
               SIL_INVOLVEDPARTYemployeeRole $customerEmployment := CAST(SIL_INVOLVEDPARTYemployeeRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYemployeeRole));
               $silEmployeeRoles.addElement($customerEmployment);
               IF(NotEmpty($sowEmployment.getSILID()), $customerEmployment.id := $sowEmployment.getSILID());
               IF(NotEmpty($sowEmployment.getSILID()), $customerEmployment.id := $sowEmployment.getSILID());
               //IF($sowEmployment.approximateAverage != null,$customerEmployment. := $sowEmployment.approximateAverage);
               //IF($sowEmployment.contributionToSOW != null,$customerEmployment. := $sowEmployment.contributionToSOW);
               IF(NotEmpty($sowEmployment.employmentStatus), $customerEmployment.employmentStatus := LIST($sowEmployment.employmentStatus, 'SIL_EmploymentStatus', 'id', 'cmn_id'));
               If NotEmpty($sowEmployment.professionalTitle) Then
                  $customerEmployment.employmentRole := INT_SILMatchingTools_v1.matchCMNIdToSILEmploymentRolesId($sowEmployment.professionalTitle);
               End
               IF($sowEmployment.positionSince != null, $customerEmployment.validFrom := $sowEmployment.positionSince);
               If $sowEmployment.isCurrentEmployment Then
                  $customerEmployment.validTo := null;
               ElseIf $sowEmployment.positionUntil != null Then
                  $customerEmployment.validTo := $sowEmployment.positionUntil;
               End
               SIL_INVOLVEDPARTYorganization $silOrganization := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
               $silOrganization.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName);
               SIL_INVOLVEDPARTYorganizationName $silOrganizationName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
               IF($sowEmployment.employerName != null, $silOrganizationName.businessName := $sowEmployment.employerName);
               $silOrganization.names.addElement($silOrganizationName);
               $silOrganization.addresses := NewIndexed(SIL_INVOLVEDPARTYaddress);
               SIL_INVOLVEDPARTYpostalAddress $silPostalAddress := CAST(SIL_INVOLVEDPARTYpostalAddress, CreateSkeletonDataClass(SIL_INVOLVEDPARTYpostalAddress));
               $silOrganization.addresses.addElement($silPostalAddress);
               If $sowEmployment.employerStreet != null Then
                  $silPostalAddress.street := $sowEmployment.employerStreet;
               End
               If $sowEmployment.employerCity != null Then
                  $silPostalAddress.city := $sowEmployment.employerCity;
               End
               If NotEmpty($sowEmployment.employerCountry) Then
                  $silPostalAddress.country := INT_SILMappingCMNtoSIL_v1.createSILCountry($sowEmployment.employerCountry);
               End
               IF($sowEmployment.employerBusinessDescription != null, $silOrganization.businessDescription := $sowEmployment.employerBusinessDescription);
               IF($sowEmployment.employeeNumber != null, $silOrganization.numberOfEmployees := $sowEmployment.employeeNumber);
               INT_SILMatchingTools_v1.matchCMNMainBusinessToSILOrganization($sowEmployment.mainBusiness, $silOrganization);
               If LIB_Validator.validateNotEmptyIndexed($sowEmployment.countriesBusinessExposure) Then
                  CMN_KycBusinessExposure $cmnKycBusinessExposure;
                  ForEach $cmnKycBusinessExposure In $sowEmployment.countriesBusinessExposure Do
                     If $cmnKycBusinessExposure != null && NotEmpty($cmnKycBusinessExposure.businessExposure) Then
                        IF($silOrganization.addresses == null, $silOrganization.addresses := NewIndexed(SIL_INVOLVEDPARTYaddress));
                        SIL_INVOLVEDPARTYcountryAddress $silCountryAddress := INT_SILMappingCMNtoSIL_v1.createSILCountryAddress($cmnKycBusinessExposure.businessExposure, INT_SILEnumerations.getCountryTypePrimaryOperations());
                        $silOrganization.addresses.addElement($silCountryAddress);
                     End
                     //IF($cmnKycBusinessExposure.businessExposureRate != null, $. := $cmnKycBusinessExposure.businessExposureRate);
                  End
               End
               IF($silOrganization.businessNatureDetails == null, $silOrganization.businessNatureDetails := NewIndexed(SIL_INVOLVEDPARTYbusinessNatureDetails));
               IF($silOrganization.businessNatureDetails.size() == 0, $silOrganization.businessNatureDetails[1] := CAST(SIL_INVOLVEDPARTYbusinessNatureDetails, CreateSkeletonDataClass(SIL_INVOLVEDPARTYbusinessNatureDetails)));
               SIL_INVOLVEDPARTYbusinessNatureDetails $silBusinessNatureDetails := $silOrganization.businessNatureDetails[1];
               If $sowEmployment.isGovContractLicense != null Then
                  $silBusinessNatureDetails.isInvolvedInGovernmentContract := $sowEmployment.isGovContractLicense;
               End
               If LIB_Validator.validateNotEmptyIndexed($sowEmployment.revenuesCountries) Then
                  $silBusinessNatureDetails.businessCustomers := NewIndexed(SIL_INVOLVEDPARTYbusinessCustomer);
                  SIL_INVOLVEDPARTYbusinessCustomer $silBusinessCustomer;
                  ForEach String $country In $sowEmployment.revenuesCountries Do
                     If NotEmpty($country) Then
                        $silBusinessCustomer := CAST(SIL_INVOLVEDPARTYbusinessCustomer, CreateSkeletonDataClass(SIL_INVOLVEDPARTYbusinessCustomer));
                        $silBusinessCustomer.country := INT_SILMappingCMNtoSIL_v1.createSILCountry($country);
                        $silBusinessNatureDetails.businessCustomers.addElement($silBusinessCustomer);
                     End
                  End
               End
               $customerEmployment.inContext := $silOrganization;
            End
         End
      End
   End
   Return $silEmployeeRoles;
End]]></definition>
        </method>
        <method name="createSILRelationships" userId="pezzi" uuid="ffffffff-f2d9-c121-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'connected Party Screen'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILRelationships(CMN_Party $cmnParty, Indexed SIL_INVOLVEDPARTYinvolvedPartyRelationship $silPartyStructure := null) : Indexed SIL_INVOLVEDPARTYin