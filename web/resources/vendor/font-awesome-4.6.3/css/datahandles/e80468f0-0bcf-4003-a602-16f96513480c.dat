crethinking.hsbcRiskRatingUltraHigh">
                                    <style>
                                        <property name="color" value="#E51700"/>
                                        <property name="font-weight" value="bold"/>
                                        <property name="padding-left" value="10px"/>
                                        <property name="cursor" value="default"/>
                                    </style>
                                </component>
                            </component>
                        </component>
                    </customContainer>
                    <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="115">
                        <component class="com.nm.sdk.data.pages.views.components.Infobox" id="116" orientation="vertical">
                            <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="117" text="[LABEL:CMN_FCCRiskSummary.pcm.product.indicator]"/>
                        </component>
                    </customContainer>
                    <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="112">
                        <component class="com.nm.sdk.data.pages.views.components.Infobox" id="113" orientation="vertical">
                            <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="114" text="=IF($businessRelationship.kytProfile.purposeOfAccount.hasPCM, 'Yes', 'No')">
                                <style>
                                    <property name="font-weight" value="bold"/>
                                    <property name="margin-left" value="5px"/>
                                </style>
                            </component>
                        </component>
                    </customContainer>
                    <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="157">
                        <component class="com.nm.sdk.data.pages.views.components.Infobox" id="158" orientation="vertical">
                            <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="159" text="[LABEL:CMN_FCCRiskSummary.pcm.product.ireference]"/>
                        </component>
                    </customContainer>
                    <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="154">
                        <component class="com.nm.sdk.data.pages.views.components.Infobox" id="155" orientation="vertical">
                            <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="156" text="=$businessRelationship.kytProfile.purposeOfAccount.PCMId">
                                <style>
                                    <property name="font-weight" value="bold"/>
                                    <property name="margin-left" value="5px"/>
                                </style>
                            </component>
                        </component>
                    </customContainer>
                    <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="151">
                        <component class="com.nm.sdk.data.pages.views.components.Infobox" id="152" orientation="vertical">
                            <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="153" text="[LABEL:CMN_FCCRiskSummary.trade.product.indicator]"/>
                        </component>
                    </customContainer>
                    <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="148">
                        <component class="com.nm.sdk.data.pages.views.components.Infobox" id="149" orientation="vertical">
                            <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="150" text="No">
                                <style>
                                    <property name="font-weight" value="bold"/>
                                    <property name="margin-left" value="5px"/>
                                </style>
                            </component>
                        </component>
                    </customContainer>
                    <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="145">
                        <component class="com.nm.sdk.data.pages.views.components.Infobox" id="146" orientation="vertical">
                            <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="147" text="[LABEL:CMN_FCCRiskSummary.trade.product.reference]"/>
                        </component>
                    </customContainer>
                    <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="142">
                        <component class="com.nm.sdk.data.pages.views.components.Infobox" id="143" orientation="vertical">
                            <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="144" text="-">
                                <style>
                                    <property name="font-weight" value="bold"/>
                                    <property name="margin-left" value="5px"/>
                                </style>
                            </component>
                        </component>
                    </customContainer>
                </component>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="139">
                    <component class="com.nm.sdk.data.pages.views.components.Infobox" id="140" orientation="vertical">
                        <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="141" text="[LABEL:CMN_FCCRiskSummary.safe.deposit.indicator]"/>
                    </component>
                </customContainer>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="136">
                    <component class="com.nm.sdk.data.pages.views.components.Infobox" id="137" orientation="vertical">
                        <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="138" text="=String $toReturn;&#xa;$toReturn := '[LABEL:CMN_LinkedAccounts.other.accounts]' &amp; IF($party.hasCustomerOtherAccounts, ' Yes', ' No');&#xa;$toReturn := '\n' &amp; '[LABEL:CMN_LinkedAccounts.other.safedeposit]' &amp; IF($party.hasSafeDepositOnLinkedAccount, ' Yes', ' No');&#xa;Return $toReturn;">
                            <style>
                                <property name="font-weight" value="bold"/>
                                <property name="margin-left" value="5px"/>
                            </style>
                        </component>
                    </component>
                </customContainer>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="133">
                    <component class="com.nm.sdk.data.pages.views.components.Infobox" id="134" orientation="vertical">
                        <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="135" text="[LABEL:CMN_FCCRiskSummary.safe.deposit.reference]"/>
                    </component>
                </customContainer>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="130">
                    <component class="com.nm.sdk.data.pages.views.components.Infobox" id="131" orientation="vertical">
                        <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="132" text="-">
                            <style>
                                <property name="font-weight" value="bold"/>
                                <property name="margin-left" value="5px"/>
                            </style>
                        </component>
                    </component>
                </customContainer>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="127">
                    <component class="com.nm.sdk.data.pages.views.components.Infobox" id="128" orientation="vertical">
                        <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="129" text="[LABEL:CMN_FCCRiskSummary.currency.of.transactions]"/>
                    </component>
                </customContainer>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="124">
                    <component class="com.nm.sdk.data.pages.views.components.Infobox" id="125" orientation="vertical">
                        <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="126" text="=LIST($businessRelationship.currency, 'CMN_Currencies__selector', 'fullName', 'shortName')">
                            <style>
                                <property name="font-weight" value="bold"/>
                                <property name="margin-left" value="5px"/>
                            </style>
                        </component>
                    </component>
                </customContainer>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="121">
                    <component class="com.nm.sdk.data.pages.views.components.Infobox" id="122" orientation="vertical">
                        <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="123" text="[LABEL:CMN_FCCRiskSummary.cash.debit.transactions]"/>
                    </component>
                </customContainer>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="118">
                    <component class="com.nm.sdk.data.pages.views.components.Infobox" id="119" orientation="vertical">
                        <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="120" text="=TOSTRING($businessRelationship.kytProfile.expectedAccountActivity.transferIn.cashTotalAmount)">
                            <style>
                                <property name="font-weight" value="bold"/>
                                <property name="margin-left" value="5px"/>
                            </style>
                        </component>
                    </component>
                </customContainer>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="173">
                    <component class="com.nm.sdk.data.pages.views.components.Infobox" id="174" orientation="vertical">
                        <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="175" text="[LABEL:CMN_FCCRiskSummary.transaction.debit.transactions]"/>
                    </component>
                </customContainer>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="170">
                    <component class="com.nm.sdk.data.pages.views.components.Infobox" id="171" orientation="vertical">
                        <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="172" text="=TOSTRING($businessRelationship.kytProfile.expectedAccountActivity.transferIn.cashTransNumber)">
                            <style>
                                <property name="font-weight" value="bold"/>
                                <property name="margin-left" value="5px"/>
                            </style>
                        </component>
                    </component>
                </customContainer>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="179">
                    <component class="com.nm.sdk.data.pages.views.components.Infobox" id="180" orientation="vertical">
                        <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="181" text="[LABEL:CMN_FCCRiskSummary.value.wire.credit.transactions]"/>
                    </component>
                </customContainer>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="176">
                    <component class="com.nm.sdk.data.pages.views.components.Infobox" id="177" orientation="vertical">
                        <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="178" text="=If NotEmpty($businessRelationship.kytProfile.expectedAccountActivity.transferIn.wireTransferCountries) and not CMN_CountryHelper.isHighRiskCountry($businessRelationship.kytProfile.expectedAccountActivity.transferIn.wireTransferCountries) Then&#xa;   Return TOSTRING($businessRelationship.kytProfile.expectedAccountActivity.transferIn.wireTransfersTotalAmount);&#xa;Else&#xa;   Return '-';&#xa;End">
                            <style>
                                <property name="font-weight" value="bold"/>
                                <property name="margin-left" value="5px"/>
                            </style>
                        </component>
                    </component>
                </customContainer>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="185">
                    <component class="com.nm.sdk.data.pages.views.components.Infobox" id="186" orientation="vertical">
                        <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="187" text="[LABEL:CMN_FCCRiskSummary.number.wire.credit.transactions]"/>
                    </component>
                </customContainer>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="182">
                    <component class="com.nm.sdk.data.pages.views.components.Infobox" id="183" orientation="vertical">
                        <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="184" text="=If NotEmpty($businessRelationship.kytProfile.expectedAccountActivity.transferIn.wireTransferCountries) and not CMN_CountryHelper.isHighRiskCountry($businessRelationship.kytProfile.expectedAccountActivity.transferIn.wireTransferCountries) Then&#xa;   Return TOSTRING($businessRelationship.kytProfile.expectedAccountActivity.transferIn.wireTransfersTransNumber);&#xa;Else&#xa;   Return '-';&#xa;End">
                            <style>
                                <property name="font-weight" value="bold"/>
                                <property name="margin-left" value="5px"/>
                            </style>
                        </component>
                    </component>
                </customContainer>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="191">
                    <component class="com.nm.sdk.data.pages.views.components.Infobox" id="192" orientation="vertical">
                        <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="193" text="[LABEL:CMN_FCCRiskSummary.value.wire.debit.transactions]"/>
                    </component>
                </customContainer>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="188">
                    <component class="com.nm.sdk.data.pages.views.components.Infobox" id="189" orientation="vertical">
                        <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="190" text="=If NotEmpty($businessRelationship.kytProfile.expectedAccountActivity.transferOut.wireTransferCountries) and not CMN_CountryHelper.isHighRiskCountry($businessRelationship.kytProfile.expectedAccountActivity.transferOut.wireTransferCountries) Then&#xa;   Return TOSTRING($businessRelationship.kytProfile.expectedAccountActivity.transferOut.wireTransfersTotalAmount);&#xa;Else&#xa;   Return '-';&#xa;End">
                            <style>
                                <property name="font-weight" value="bold"/>
                                <property name="margin-left" value="5px"/>
                            </style>
                        </component>
                    </component>
                </customContainer>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="197">
                    <component class="com.nm.sdk.data.pages.views.components.Infobox" id="198" orientation="vertical">
                        <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="199" text="[LABEL:CMN_FCCRiskSummary.number.wire.debit.transactions]"/>
                    </component>
                </customContainer>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="194">
                    <component class="com.nm.sdk.data.pages.views.components.Infobox" id="195" orientation="vertical">
                        <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="196" text="=If NotEmpty($businessRelationship.kytProfile.expectedAccountActivity.transferOut.wireTransferCountries) and not CMN_CountryHelper.isHighRiskCountry($businessRelationship.kytProfile.expectedAccountActivity.transferOut.wireTransferCountries) Then&#xa;   Return TOSTRING($businessRelationship.kytProfile.expectedAccountActivity.transferOut.wireTransfersTransNumber);&#xa;Else&#xa;   Return '-';&#xa;End">
                            <style>
                                <property name="font-weight" value="bold"/>
                                <property name="margin-left" value="5px"/>
                            </style>
                        </component>
                    </component>
                </customContainer>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="221">
                    <component class="com.nm.sdk.data.pages.views.components.Infobox" id="222" orientation="vertical">
                        <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="223" text="[LABEL:CMN_FCCRiskSummary.value.wire.credit.transactions.high.risk.jurisdiction]"/>
                    </component>
                </customContainer>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="218">
                    <component class="com.nm.sdk.data.pages.views.components.Infobox" id="219" orientation="vertical">
                        <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="220" text="=If NotEmpty($businessRelationship.kytProfile.expectedAccountActivity.transferIn.wireTransferCountries) and CMN_CountryHelper.isHighRiskCountry($businessRelationship.kytProfile.expectedAccountActivity.transferIn.wireTransferCountries) Then&#xa;   Return TOSTRING($businessRelationship.kytProfile.expectedAccountActivity.transferIn.wireTransfersTotalAmount);&#xa;Else&#xa;   Return '-';&#xa;End">
                            <style>
                                <property name="font-weight" value="bold"/>
                                <property name="margin-left" value="5px"/>
                            </style>
                        </component>
                    </component>
                </customContainer>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="215">
                    <component class="com.nm.sdk.data.pages.views.components.Infobox" id="216" orientation="vertical">
                        <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="217" text="[LABEL:CMN_FCCRiskSummary.number.wire.credit.transactions.high.risk.jurisdiction]"/>
                    </component>
                </customContainer>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="212">
                    <component class="com.nm.sdk.data.pages.views.components.Infobox" id="213" orientation="vertical">
                        <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="214" text="=If NotEmpty($businessRelationship.kytProfile.expectedAccountActivity.transferIn.wireTransferCountries) and CMN_CountryHelper.isHighRiskCountry($businessRelationship.kytProfile.expectedAccountActivity.transferIn.wireTransferCountries) Then&#xa;   Return TOSTRING($businessRelationship.kytProfile.expectedAccountActivity.transferIn.wireTransfersTransNumber);&#xa;Else&#xa;   Return '-';&#xa;End">
                            <style>
                                <property name="font-weight" value="bold"/>
                                <property name="margin-left" value="5px"/>
                            </style>
                        </component>
                    </component>
                </customContainer>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="209">
                    <component class="com.nm.sdk.data.pages.views.components.Infobox" id="210" orientation="vertical">
                        <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="211" text="[LABEL:CMN_FCCRiskSummary.number.wire.debit.transactions.high.risk.jurisdiction]"/>
                    </component>
                </customContainer>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="206">
                    <component class="com.nm.sdk.data.pages.views.components.Infobox" id="207" orientation="vertical">
                        <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="208" text="=If NotEmpty($businessRelationship.kytProfile.expectedAccountActivity.transferOut.wireTransferCountries) and CMN_CountryHelper.isHighRiskCountry($businessRelationship.kytProfile.expectedAccountActivity.transferOut.wireTransferCountries) Then&#xa;   Return TOSTRING($businessRelationship.kytProfile.expectedAccountActivity.transferOut.wireTransfersTotalAmount);&#xa;Else&#xa;   Return '-';&#xa;End">
                            <style>
                                <property name="font-weight" value="bold"/>
                                <property name="margin-left" value="5px"/>
                            </style>
                        </component>
                    </component>
                </customContainer>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="203">
                    <component class="com.nm.sdk.data.pages.views.components.Infobox" id="204" orientation="vertical">
                        <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="205" text="[LABEL:CMN_FCCRiskSummary.number.wire.debit.transactions.high.risk.jurisdiction]"/>
                    </component>
                </customContainer>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="200">
                    <component class="com.nm.sdk.data.pages.views.components.Infobox" id="201" orientation="vertical">
                        <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="202" text="=If NotEmpty($businessRelationship.kytProfile.expectedAccountActivity.transferOut.wireTransferCountries) and CMN_CountryHelper.isHighRiskCountry($businessRelationship.kytProfile.expectedAccountActivity.transferOut.wireTransferCountries) Then&#xa;   Return TOSTRING($businessRelationship.kytProfile.expectedAccountActivity.transferOut.wireTransfersTransNumber);&#xa;Else&#xa;   Return '-';&#xa;End">
                            <style>
                                <property name="font-weight" value="bold"/>
                                <property name="margin-left" value="5px"/>
                            </style>
                        </component>
                    </component>
                </customContainer>
                <property name="groupHasLayout" value="true"/>
                <property name="groupTitle" value="[LABEL:CMN_FCCRiskSummary.product.risk.factor]"/>
                <property name="inheritAllParentProperties" value="true"/>
                <property name="labelWidthPercentage"/>
                <property name="labelWidthPixels"/>
                <property name="labelWidthType"/>
                <property name="maxElementPixelWidth"/>
                <property name="maxElementsPerRow"/>
                <property name="targetElementPixelWidth"/>
                <property name="topLabelCutoff"/>
                <property name="validationExpression"/>
                <property name="validationMessage"/>
            </customContainer>
            <property name="labelWidthPercentage"/>
            <property name="labelWidthPixels"/>
            <property name="labelWidthType"/>
            <property name="maxElementPixelWidth"/>
            <property name="maxElementsPerRow"/>
            <property name="targetElementPixelWidth"/>
            <property name="topLabelCutoff"/>
        </customContainer>
    </view>
</screen>

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                1,898,29732,0
<?xml version="1.0" encoding="UTF-8"?>
<object xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="object.xsd">
    <id>COB_DynamicDocAoBIDV__SG</id>
    <uuid>1c6ff76f-7c70-4386-b5c3-b2839b29421d</uuid>
    <type>Rule</type>
    <name/>
    <description/>
    <creator>foo</creator>
    <creationTime>1471592855059</creationTime>
    <modifier>foo</modifier>
    <modificationTime>1474602539062</modificationTime>
    <active>true</active>
    <versionUuid>6b786fc8-3655-47e3-8c5b-5a60c03602a2</versionUuid>
    <parentVersionUuid>2e8fedf2-3a1a-4c2c-b1ca-ee283180a133</parentVersionUuid>
    <timestamp>1475260129806</timestamp>
    <systemId>h-global-predev.appway.com</systemId>
    <copyOfUuid>5f45418e-e2d7-4a1f-9976-e41a145bbbda</copyOfUuid>
    <committed>true</committed>
    <deleted>false</deleted>
    <userId>magloire</userId>
    <metaData/>
</object>

<?xml version="1.0" encoding="UTF-8"?>
<decisiontree xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="decisiontree.xsd">
    <definition>
        <scope active="true" name="" showChildren="true">
            <parameterdefinition collectiontype="none" defaultexpression="" description="" mode="inherited" type="COB_Root" variable="root"/>
            <parameterdefinition collectiontype="none" defaultexpression="" description="" mode="inherited" type="CMN_BusinessRelationship" variable="businessRelationship"/>
            <parameterdefinition collectiontype="indexed" defaultexpression="" description="" mode="inherited" type="CMN_PhysicalPerson" variable="partiesAH"/>
            <parameterdefinition collectiontype="none" defaultexpression="" description="" mode="local" type="Integer" variable="loopCount"/>
            <parameterdefinition collectiontype="none" defaultexpression="NEW(LIB_IntegerWrapper)" description="" mode="local" type="LIB_IntegerWrapper" variable="pageNumber"/>
            <parameterdefinition collectiontype="none" defaultexpression="0" description="" mode="local" type="Integer" variable="totalNumOfPage"/>
            <parameterdefinition collectiontype="none" defaultexpression="'CMN_IDV052016__SG' " description="" mode="local" type="String" variable="singleDocumentId"/>
            <condition active="true" alternative="false" decision="" description="Create dependencies for single document" expression="false" label="Create dependencies for single document" negate="false" showChildren="true">
                <action active="true" function="script" id="1471402044206" showChildren="true">
                    <description><![CDATA[]]></description>
                    <property key="script" value="GETBUSINESSOBJECT('Document', 'CMN_IDV052016__SG')"/>
                </action>
            </condition>
            <condition active="true" alternative="false" decision="" description="Calculate total number of pages" expression="true" label="Calculate total number of pages" negate="false" showChildren="true">
                <action active="true" function="script" id="1468297985840" showChildren="true">
                    <description><![CDATA[]]></description>
                    <property key="script" value="Integer $partA := CAST(PdfOutput, GETBUSINESSOBJECT(PdfOutput, 'CMN_1607065607AoBIndStaticA1EN')).getFormPages().size();&#xa;Integer $partB := CMN_DynamicDocumentHelper.getNumOfPageOfGeneratedSection(SIZE($businessRelationship.getCustomers()), 6, CAST(PdfOutput, GETBUSINESSOBJECT(PdfOutput, 'CMN_1607075607AoBIndD1D2EN')).getFormPages().size());&#xa;Integer $partC := CMN_DynamicDocumentHelper.getNumOfPageOfGeneratedSection(SIZE($businessRelationship.getInvolvedPartiesOfRole('powerOfAttorney')), 4, CAST(PdfOutput, GETBUSINESSOBJECT(PdfOutput, 'CMN_1607075607AoBIndD2D3EN')).getFormPages().size());&#xa;Integer $partD := CAST(PdfOutput, GETBUSINESSOBJECT(PdfOutput, 'CMN_1607075607AoBIndStaticB4EN')).getFormPages().size();&#xa;Integer $partE := CMN_DynamicDocumentHelper.getNumOfPageOfGeneratedSection(SIZE($businessRelationship.getCustomers()), 1, CAST(PdfOutput, GETBUSINESSOBJECT(PdfOutput, 'CMN_1607075607AoBIndD3D5EN')).getFormPages().size());&#xa;Integer $partF := CMN_DynamicDocumentHelper.getNumOfPageOfGeneratedSection(SIZE($businessRelationship.getInvolvedPartiesOfRole('powerOfAttorney')), 1, CAST(PdfOutput, GETBUSINESSOBJECT(PdfOutput, 'CMN_1607065607AoBIndD4D6EN')).getFormPages().size());&#xa;Integer $partG := CMN_DynamicDocumentHelper.getNumOfPageOfGeneratedSection(SIZE($businessRelationship.getInvolvedPartiesOfRole('internetBankingOperating')), 3, CAST(PdfOutput, GETBUSINESSOBJECT(PdfOutput, 'CMN_1607065607AoBIndD5D7EN')).getFormPages().size());&#xa;Integer $partH := CMN_DynamicDocumentHelper.getNumOfPageOfGeneratedSection(SIZE(CMN_DynamicDocumentHelper.getInternetViewOnlySingleRoleParty($businessRelationship)), 2, CAST(PdfOutput, GETBUSINESSOBJECT(PdfOutput, 'CMN_1607065607AoBIndD6D8EN')).getFormPages().size());&#xa;Integer $partI := CAST(PdfOutput, GETBUSINESSOBJECT(PdfOutput, 'CMN_1607065607AoBIndStaticC9EN')).getFormPages().size();&#xa;Integer $partJ := CMN_DynamicDocumentHelper.getNumOfPageOfGeneratedSection(SIZE($businessRelationship.getCustomers()), 5, CAST(PdfOutput, GETBUSINESSOBJECT(PdfOutput, 'CMN_1607075607AoBIndD7D10EN')).getFormPages().size());&#xa;Integer $partK := CAST(PdfOutput, GETBUSINESSOBJECT(PdfOutput, 'CMN_1607065607AoBIndStaticD11EN')).getFormPages().size();&#xa;//total number of pages minus the number of pages that we don't print the page number&#xa;$totalNumOfPage := $partA + $partB + $partC + $partD + $partE + $partF + $partG + $partH + $partI + $partJ + $partK - 3;"/>
                </action>
            </condition>
            <action active="true" function="document" id="1468205520168" showChildren="true">
                <description><![CDATA[]]></description>
                <parameter expression="$pageNumber" variable="pageNumber"/>
                <parameter expression="$totalNumOfPage" variable="totalNumberOfPage"/>
                <parameter expression="$businessRelationship" variable="businessRelationship"/>
                <parameter expression="$singleDocumentId" variable="singleDocumentId"/>
                <property key="document" value="CMN_1607065607AoBIndStaticA1"/>
                <property key="relatedEntityId" value="'AoB_IDV_PartA'"/>
                <property key="toBeReturned" value="true"/>
                <property key="relatedEntityName" value="'Account'"/>
                <property key="documentTitle" value=""/>
            </action>
            <action active="true" function="script" id="1468219917851" showChildren="true">
                <description><![CDATA[]]></description>
                <property key="script" value="$loopCount := 0"/>
            </action>
            <for active="true" end="CMN_DynamicDocumentHelper.getLoopEnd(SIZE($businessRelationship.getCustomers()))" increment="6" label="for" showChildren="true" start="1" variable="ahCount">
                <action active="true" function="script" id="1468219941198" showChildren="true">
                    <description><![CDATA[]]></description>
                    <property key="script" value="$loopCount := $loopCount + 1"/>
                </action>
                <action active="true" function="document" id="1468217306504" showChildren="true">
                    <description><![CDATA[]]></description>
                    <parameter expression="$ahCount-1" variable="itemNumber"/>
                    <parameter expression="$pageNumber" variable="pageNumber"/>
                    <parameter expression="$totalNumOfPage" variable="totalNumberOfPage"/>
                    <parameter expression="If SIZE($businessRelationship.getCustomers()) > TOINTEGER($ahCount + 2) Then&#xa;   Return $businessRelationship.getCustomers()[$ahCount + 3];&#xa;End" variable="partyAh4"/>
                    <parameter expression="If SIZE($businessRelationship.getCustomers()) > TOINTEGER($ahCount + 1) Then&#xa;   Return $businessRelationship.getCustomers()[$ahCount + 2];&#xa;End" variable="partyAh3"/>
                    <parameter expression="If SIZE($businessRelationship.getCustomers()) > TOINTEGER($ahCount) Then&#xa;   Return $businessRelationship.getCustomers()[$ahCount + 1];&#xa;End" variable="partyAh2"/>
                    <parameter expression="If SIZE($businessRelationship.getCustomers()) > TOINTEGER($ahCount - 1) Then&#xa;   Return $businessRelationship.getCustomers()[$ahCount];&#xa;End" variable="partyAh1"/>
                    <parameter expression="$singleDocumentId" variable="singleDocumentId"/>
                    <parameter expression="If SIZE($businessRelationship.getCustomers()) > TOINTEGER($ahCount + 4) Then&#xa;   Return $businessRelationship.getCustomers()[$ahCount + 5];&#xa;End" variable="partyAh6"/>
                    <parameter expression="If SIZE($businessRelationship.getCustomers()) > TOINTEGER($ahCount + 3) Then&#xa;   Return $businessRelationship.getCustomers()[$ahCount + 4];&#xa;End" variable="partyAh5"/>
                    <parameter expression="$loopCount" variable="iterationNumber"/>
                    <property key="document" value="CMN_1607075607AoBIndD1D2"/>
                    <property key="relatedEntityId" value="'AoB_IDV_PartB' &amp; $loopCount"/>
                    <property key="toBeReturned" value="true"/>
                    <property key="relatedEntityName" value="'Account'"/>
                    <property key="documentTitle" value="JOIN('[LABEL:DOCUMENT_TITLE-CMN_1607075607AoBIndD1D2]', $loopCount)"/>
                </action>
            </for>
            <action active="true" function="script" id="1468220695545" showChildren="true">
                <description><![CDATA[]]></description>
                <property key="script" value="$loopCount := 0"/>
            </action>
            <for active="true" end="CMN_DynamicDocumentHelper.getLoopEnd(SIZE($businessRelationship.getInvolvedPartiesOfRole('powerOfAttorney')))" increment="4" label="for" showChildren="true" start="1" variable="poaCount">
                <action active="true" function="script" id="1468220698306" showChildren="true">
                    <description><![CDATA[]]></description>
                    <property key="script" value="$loopCount := $loopCount + 1"/>
                </action>
                <action active="true" function="document" id="1468217320463" showChildren="true">
                    <description><![CDATA[]]></description>
                    <parameter expression="$poaCount-1" variable="itemNumber"/>
                    <parameter expression="If SIZE($businessRelationship.getInvolvedPartiesOfRole('powerOfAttorney')) > TOINTEGER($poaCount + 2) Then&#xa;   Return $businessRelationship.getInvolvedPartiesOfRole('powerOfAttorney')[$poaCount + 3];&#xa;End" variable="partyPoa4"/>
                    <parameter expression="$pageNumber" variable="pageNumber"/>
                    <parameter expression="$totalNumOfPage" variable="totalNumberOfPage"/>
                    <parameter expression="$singleDocumentId" variable="singleDocumentId"/>
                    <parameter expression="If SIZE($businessRelationship.getInvolvedPartiesOfRole('powerOfAttorney')) > TOINTEGER($poaCount) Then&#xa;   Return $businessRelationship.getInvolvedPartiesOfRole('powerOfAttorney')[$poaCount + 1];&#xa;End" variable="partyPoa2"/>
                    <parameter expression="If SIZE($businessRelationship.getInvolvedPartiesOfRole('powerOfAttorney')) > TOINTEGER($poaCount + 1) Then&#xa;   Return $businessRelationship.getInvolvedPartiesOfRole('powerOfAttorney')[$poaCount + 2];&#xa;End" variable="partyPoa3"/>
                    <parameter expression="If SIZE($businessRelationship.getInvolvedPartiesOfRole('powerOfAttorney')) > TOINTEGER($poaCount - 1) Then&#xa;   Return $businessRelationship.getInvolvedPartiesOfRole('powerOfAttorney')[$poaCount];&#xa;End" variable="partyPoa1"/>
                    <parameter expression="$loopCount" variable="iterationNumber"/>
                    <property key="document" value="CMN_1607075607AoBIndD2D3"/>
                    <property key="relatedEntityId" value="'AoB_IDV_PartC' &amp; $loopCount"/>
                    <property key="toBeReturned" value="true"/>
                    <property key="relatedEntityName" value="'Account'"/>
                    <property key="documentTitle" value="JOIN('[LABEL:DOCUMENT_TITLE-CMN_1607075607AoBIndD2D3]', $loopCount)"/>
                </action>
            </for>
            <action active="true" function="document" id="1468217336116" showChildren="true">
                <description><![CDATA[]]></description>
                <parameter expression="$pageNumber" variable="pageNumber"/>
                <parameter expression="$totalNumOfPage" variable="totalNumberOfPage"/>
                <parameter expression="$businessRelationship" variable="businessRelationship"/>
                <parameter expression="$singleDocumentId" variable="singleDocumentId"/>
                <property key="document" value="CMN_1607075607AoBIndStaticB4"/>
                <property key="relatedEntityId" value="'AoB_IDV_PartD'"/>
                <property key="toBeReturned" value="true"/>
                <property key="relatedEntityName" value="'Account'"/>
            </action>
            <action active="true" function="script" id="1468221742622" showChildren="true">
                <description><![CDATA[]]></description>
                <property key="script" value="$loopCount := 0"/>
            </action>
            <for active="true" end="CMN_DynamicDocumentHelper.getLoopEnd(SIZE($businessRelationship.getCustomers()))" increment="1" label="for" showChildren="true" start="1" variable="ahCount">
                <action active="true" function="script" id="1468221739382" showChildren="true">
                    <description><![CDATA[]]></description>
                    <property key="script" value="$loopCount := $loopCount + 1"/>
                </action>
                <action active="true" function="document" id="1468217353084" showChildren="true">
                    <description><![CDATA[]]></description>
                    <parameter expression="$ahCount-1" variable="itemNumber"/>
                    <parameter expression="$pageNumber" variable="pageNumber"/>
                    <parameter expression="$totalNumOfPage" variable="totalNumberOfPage"/>
                    <parameter expression="If SIZE($businessRelationship.getCustomers()) > TOINTEGER($ahCount - 1) Then&#xa;   Return $businessRelationship.getCustomers()[$ahCount];&#xa;End" variable="partyAh1"/>
                    <parameter expression="$singleDocumentId" variable="singleDocumentId"/>
                    <parameter expression="$loopCount" variable="iterationNumber"/>
                    <property key="document" value="CMN_1607075607AoBIndD3D5"/>
                    <property key="relatedEntityId" value="'AoB_IDV_PartE'&amp; $loopCount"/>
                    <property key="toBeReturned" value="true"/>
                    <property key="relatedEntityName" value="'Account'"/>
                    <property key="documentTitle" value="JOIN('[LABEL:DOCUMENT_TITLE-CMN_1607075607AoBIndD3D5]', $loopCount)"/>
                </action>
            </for>
            <action active="true" function="script" id="1468221972839" showChildren="true">
                <description><![CDATA[]]></description>
                <property key="script" value="$loopCount := 0"/>
            </action>
            <for active="true" end="CMN_DynamicDocumentHelper.getLoopEnd(SIZE($businessRelationship.getInvolvedPartiesOfRole('powerOfAttorney')))" increment="1" label="for" showChildren="true" start="1" variable="poaCount">
                <action active="true" function="script" id="1468221976066" showChildren="true">
                    <description><![CDATA[]]></description>
                    <property key="script" value="$loopCount := $loopCount + 1"/>
                </action>
                <action active="true" function="document" id="1468217471438" showChildren="true">
                    <description><![CDATA[]]></description>
                    <parameter expression="$poaCount-1" variable="itemNumber"/>
                    <parameter expression="$pageNumber" variable="pageNumber"/>
                    <parameter expression="$totalNumOfPage" variable="totalNumberOfPage"/>
                    <parameter expression="$singleDocumentId" variable="singleDocumentId"/>
                    <parameter expression="$loopCount" variable="iterationNumber"/>
                    <parameter expression="If SIZE($businessRelationship.getInvolvedPartiesOfRole('powerOfAttorney')) > TOINTEGER($poaCount - 1) Then&#xa;   Return $businessRelationship.getInvolvedPartiesOfRole('powerOfAttorney')[$poaCount];&#xa;End" variable="partyPoa1"/>
                    <property key="document" value="CMN_1607065607AoBIndD4D6"/>
                    <property key="relatedEntityId" value="'AoB_IDV_PartF'&amp; $loopCount"/>
                    <property key="toBeReturned" value="true"/>
                    <property key="relatedEntityName" value="'Account'"/>
                    <property key="documentTitle" value="JOIN('[LABEL:DOCUMENT_TITLE-CMN_1607065607AoBIndD4D6]', $loopCount)"/>
                </action>
            </for>
            <action active="true" function="script" id="1468221979893" showChildren="true">
                <description><![CDATA[]]></description>
                <property key="script" value="$loopCount := 0"/>
            </action>
            <for active="true" end="CMN_DynamicDocumentHelper.getLoopEnd(SIZE($businessRelationship.getInvolvedPartiesOfRole('internetBankingOperating')))" increment="3" label="for" showChildren="true" start="1" variable="internetUserCount">
                <action active="true" function="script" id="1468221983171" showChildren="true">
                    <description><![CDATA[]]></description>
                    <property key="script" value="$loopCount := $loopCount + 1"/>
                </action>
                <action active="true" function="document" id="1468217473705" showChildren="true">
                    <description><![CDATA[]]></description>
                    <parameter expression="$internetUserCount-1" variable="itemNumber"/>
                    <parameter expression="$pageNumber" variable="pageNumber"/>
                    <parameter expression="$totalNumOfPage" variable="totalNumberOfPage"/>
                    <parameter
                        expression="Indexed CMN_Party $allInternetParties := CMN_DynamicDocumentHelper.getInternetUsersWithOtherRoles($businessRelationship);&#xa;If SIZE($allInternetParties) > TOINTEGER($internetUserCount + 1) Then&#xa;   Return $allInternetParties[$internetUserCount + 2];&#xa;End" variable="partyInternetUser3"/>
                    <parameter
                        expression="Indexed CMN_Party $allInternetParties := CMN_DynamicDocumentHelper.getInternetUsersWithOtherRoles($businessRelationship);&#xa;If SIZE($allInternetParties) > TOINTEGER($internetUserCount) Then&#xa;   Return $allInternetParties[$internetUserCount + 1];&#xa;End" variable="partyInternetUser2"/>
                    <parameter
                        expression="Indexed CMN_Party $allInternetParties := CMN_DynamicDocumentHelper.getInternetUsersWithOtherRoles($businessRelationship);&#xa;If SIZE($allInternetParties) > TOINTEGER($internetUserCount - 1) Then&#xa;   Return $allInternetParties[$internetUserCount];&#xa;End" variable="partyInternetUser1"/>
                    <parameter expression="$singleDocumentId" variable="singleDocumentId"/>
                    <parameter expression="$loopCount" variable="iterationNumber"/>
                    <property key="document" value="CMN_1607065607AoBIndD5D7"/>
                    <property key="relatedEntityId" value="'AoB_IDV_PartG'&amp; $loopCount"/>
                    <property key="toBeReturned" value="true"/>
                    <property key="relatedEntityName" value="'Account'"/>
                    <property key="documentTitle" value="JOIN('[LABEL:DOCUMENT_TITLE-CMN_1607065607AoBIndD5D7]', $loopCount)"/>
                </action>
            </for>
            <action active="true" function="script" id="1468221987627" showChildren="true">
                <description><![CDATA[]]></description>
                <property key="script" value="$loopCount := 0"/>
            </action>
            <for active="true" end="&#xa;Return CMN_DynamicDocumentHelper.getLoopEnd(SIZE(CMN_DynamicDocumentHelper.getInternetViewOnlySingleRoleParty($businessRelationship)));" increment="2" label="for" showChildren="true" start="1" variable="otherInternetUserCount">
                <action active="true" function="script" id="1468221990421" showChildren="true">
                    <description><![CDATA[]]></description>
                    <property key="script" value="$loopCount := $loopCount + 1"/>
                </action>
                <action active="true" function="document" id="1468217476376" showChildren="true">
                    <description><![CDATA[]]></description>
                    <parameter expression="$otherInternetUserCount-1" variable="itemNumber"/>
                    <parameter expression="$pageNumber" variable="pageNumber"/>
                    <parameter expression="$totalNumOfPage" variable="totalNumberOfPage"/>
                    <parameter expression="$singleDocumentId" variable="singleDocumentId"/>
                    <parameter
                        expression="Indexed CMN_Party $allInternetParties := CMN_DynamicDocumentHelper.getInternetViewOnlySingleRoleParty($businessRelationship);&#xa;If SIZE($allInternetParties) > TOINTEGER($otherInternetUserCount - 1) Then&#xa;   Return $allInternetParties[$otherInternetUserCount];&#xa;End" variable="partyOtherInternetUser1"/>
                    <parameter
                        expression="Indexed CMN_Party $allInternetParties := CMN_DynamicDocumentHelper.getInternetViewOnlySingleRoleParty($businessRelationship);&#xa;If SIZE($allInternetParties) > TOINTEGER($otherInternetUserCount) Then&#xa;   Return $allInternetParties[$otherInternetUserCount + 1];&#xa;End" variable="partyOtherInternetUser2"/>
                    <parameter expression="$loopCount" variable="iterationNumber"/>
                    <property key="document" value="CMN_1607065607AoBIndD6D8"/>
                    <property key="relatedEntityId" value="'AoB_IDV_PartH'&amp; $loopCount"/>
                    <property key="toBeReturned" value="true"/>
                    <property key="relatedEntityName" value="'Account'"/>
                    <property key="documentTitle" value="JOIN('[LABEL:DOCUMENT_TITLE-CMN_1607065607AoBIndD6D8]', $loopCount)"/>
                </action>
            </for>
            <action active="true" function="document" id="1468217478380" showChildren="true">
                <description><![CDATA[]]></description>
                <parameter expression="$pageNumber" variable="pageNumber"/>
                <parameter expression="Indexed CMN_Party $parties := CMN_DynamicDocumentHelper.getUSPersonOrResidentAccountHolderPowerOfAttorney($businessRelationship);&#xa;If SIZE($parties) > 3 Then&#xa;   Return $parties[4];&#xa;End" variable="partyAhUsPerson4"/>
                <parameter expression="$businessRelationship" variable="businessRelationship"/>
                <parameter expression="$singleDocumentId" variable="singleDocumentId"/>
                <parameter expression="Indexed CMN_Party $parties := CMN_DynamicDocumentHelper.getUSPersonOrResidentAccountHolderPowerOfAttorney($businessRelationship);&#xa;If SIZE($parties) > 0 Then&#xa;   Return $parties[1];&#xa;End" variable="partyAhUsPerson1"/>
                <parameter expression="Indexed CMN_Party $parties := CMN_DynamicDocumentHelper.getUSPersonOrResidentAccountHolderPowerOfAttorney($businessRelationship);&#xa;If SIZE($parties) > 2 Then&#xa;   Return $parties[3];&#xa;End" variable="partyAhUsPerson3"/>
                <parameter expression="Indexed CMN_Party $parties := CMN_DynamicDocumentHelper.getUSPersonOrResidentAccountHolderPowerOfAttorney($businessRelationship);&#xa;If SIZE($parties) > 1 Then&#xa;   Return $parties[2];&#xa;End" variable="partyAhUsPerson2"/>
                <parameter expression="If SIZE($partiesAH) > 0 Then&#xa;   Return $partiesAH[1];&#xa;End" variable="partyBusinessAccount"/>
                <parameter expression="$totalNumOfPage" variable="totalNumberOfPage"/>
                <parameter expression="Indexed CMN_Party $parties := CMN_DynamicDocumentHelper.getSGTaxResidencyAccountHolders($businessRelationship);&#xa;If SIZE($parties) > 0 Then&#xa;   Return $parties[1];&#xa;End" variable="partyAhSGPerson1"/>
                <parameter expression="Indexed CMN_Party $parties := CMN_DynamicDocumentHelper.getSGTaxResidencyAccountHolders($businessRelationship);&#xa;If SIZE($parties) > 2 Then&#xa;   Return $parties[3];&#xa;End" variable="partyAhSGPerson3"/>
                <parameter expression="Indexed CMN_Party $parties := CMN_DynamicDocumentHelper.getSGTaxResidencyAccountHolders($businessRelationship);&#xa;If SIZE($parties) > 1 Then&#xa;   Return $parties[2];&#xa;End" variable="partyAhSGPerson2"/>
                <parameter expression="Indexed CMN_Party $parties := CMN_DynamicDocumentHelper.getSGTaxResidencyAccountHolders($businessRelationship);&#xa;If SIZE($parties) > 3 Then&#xa;   Return $parties[4];&#xa;End" variable="partyAhSGPerson4"/>
                <property key="document" value="CMN_1607065607AoBIndStaticC9"/>
                <property key="relatedEntityId" value="'AoB_IDV_PartI'"/>
                <property key="toBeReturned" value="true"/>
                <property key="relatedEntityName" value="'Account'"/>
            </action>
            <action active="true" function="script" id="1468221997207" showChildren="true">
                <description><![CDATA[]]></description>
                <property key="script" value="$loopCount := 0"/>
            </action>
            <for active="true" end="CMN_DynamicDocumentHelper.getLoopEnd(SIZE($businessRelationship.getCustomers()))" increment="5" label="for" showChildren="true" start="1" variable="ahCount">
                <action active="true" function="script" id="1468222000503" showChildren="true">
                    <description><![CDATA[]]></description>
                    <property key="script" value="$loopCount := $loopCount + 1"/>
                </action>
                <action active="true" function="document" id="1468217480750" showChildren="true">
                    <description><![CDATA[]]></description>
                    <parameter expression="$ahCount-1" variable="itemNumber"/>
                    <parameter expression="$pageNumber" variable="pageNumber"/>
                    <parameter expression="$totalNumOfPage" variable="totalNumberOfPage"/>
                    <parameter expression="If SIZE($businessRelationship.getCustomers()) > TOINTEGER($ahCount + 2) Then&#xa;   Return $businessRelationship.getCustomers()[$ahCount + 3];&#xa;End" variable="partyAh4"/>
                    <parameter expression="If SIZE($businessRelationship.getCustomers()) > TOINTEGER($ahCount + 1) Then&#xa;   Return $businessRelationship.getCustomers()[$ahCount + 2];&#xa;End" variable="partyAh3"/>
                    <parameter expression="If SIZE($businessRelationship.getCustomers()) > TOINTEGER($ahCount ) Then&#xa;   Return $businessRelationship.getCustomers()[$ahCount+1];&#xa;End" variable="partyAh2"/>
                    <parameter expression="If SIZE($businessRelationship.getCustomers()) > TOINTEGER($ahCount - 1) Then&#xa;   Return $businessRelationship.getCustomers()[$ahCount];&#xa;End" variable="partyAh1"/>
                    <parameter expression="$singleDocumentId" variable="singleDocumentId"/>
                    <parameter expression="If SIZE($businessRelationship.getCustomers()) > TOINTEGER($ahCount + 3) Then&#xa;   Return $businessRelationship.getCustomers()[$ahCount + 4];&#xa;End" variable="partyAh5"/>
                    <parameter expression="$loopCount" variable="iterationNumber"/>
                    <property key="document" value="CMN_1607075607AoBIndD7D10"/>
                    <property key="relatedEntityId" value="'AoB_IDV_PartJ'&amp; $loopCount"/>
                    <property key="toBeReturned" value="true"/>
                    <property key="relatedEntityName" value="'Account'"/>
                    <property key="documentTitle" value="JOIN('[LABEL:DOCUMENT_TITLE-CMN_1607075607AoBIndD7D10]', $loopCount)"/>
                </action>
            </for>
            <action active="true" function="document" id="1468217482539" showChildren="true">
                <description><![CDATA[]]></description>
                <parameter expression="$pageNumber" variable="pageNumber"/>
                <parameter expression="$totalNumOfPage" variable="totalNumberOfPage"/>
                <parameter expression="$singleDocumentId" variable="singleDocumentId"/>
                <property key="document" value="CMN_1607065607AoBIndStaticD11"/>
                <property key="relatedEntityId" value="'AoB_IDV_PartK'"/>
                <property key="toBeReturned" value="true"/>
                <property key="relatedEntityName" value="'Account'"/>
            </action>
            <condition active="true" alternative="false" decision="" description="Insert a blank page to make total number of pages even number for duplex printing"
                expression="//3 is the number of page that we don't print the page number, so we have to add it back&#xa;Integer $totalOverallPages := $totalNumOfPage + 3;&#xa;Return TOINTEGER(MOD($totalOverallPages, 2)) == 1;" label="Decides if a blank page needs to be inserted" negate="false" showChildren="true">
                <action active="true" function="document" id="1468307951098" showChildren="true">
                    <description><![CDATA[]]></description>
                    <parameter expression="$singleDocumentId" variable="singleDocumentId"/>
                    <property key="document" value="CMN_BlankDocument"/>
                    <property key="relatedEntityId" value="'AoB_IDV_PartL'"/>
                    <property key="toBeReturned" value="true"/>
                    <property key="relatedEntityName" value="'Account'"/>
                    <property key="documentTitle" value="'Account Opening Booklet - Individual Part L'"/>
                </action>
            </condition>
        </scope>
    </definition>
</decisiontree>

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          1,1155,22568,0
<?xml version="1.0" encoding="UTF-8"?>
<object xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="object.xsd">
    <id>COB_IncludeIdentificationDocument</id>
    <uuid>31792311-7727-406b-8590-a3c53eae72e2</uuid>
    <type>Screen</type>
    <name/>
    <description/>
    <creator>schoch</creator>
    <creationTime>1412935164088</creationTime>
    <modifier>foo</modifier>
    <modificationTime>1472704486026</modificationTime>
    <active>true</active>
    <versionUuid>77f9a050-9179-496f-8721-c56521879442</versionUuid>
    <parentVersionUuid>279c2ea2-12c1-4e80-86d2-30701cdbcf87</parentVersionUuid>
    <timestamp>1475260129806</timestamp>
    <systemId>h-global-predev.appway.com</systemId>
    <copyOfUuid>d75179c1-be43-4558-bc1a-8390b55253a8</copyOfUuid>
    <committed>true</committed>
    <deleted>false</deleted>
    <userId>magloire</userId>
    <metaData>
        <property name="Refactoring-ChangeID" value="IncludeIdentificationItem>COB_IncludeIdentificationItem|COB_IncludeIdentificationItem>COB_IncludeIdentification|COB_IncludeIdentification>COB_IncludeIdentificationDocument"/>
    </metaData>
</object>

<?xml version="1.0" encoding="UTF-8"?>
<screen version="1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="screen.xsd">
    <parameterDefinitions>
        <parameterDefinition collectionType="none" defaultExpression="" description="" mode="assigned" type="CMN_IdentificationDocument" variable="identificationItem"/>
        <parameterDefinition collectionType="none" defaultExpression="NEW(LIB_AdaptiveFlowLayoutConfiguration,2)" description="" mode="assigned" type="LIB_AdaptiveFlowLayoutConfiguration" variable="adaptiveFlowLayoutConfiguration"/>
        <parameterDefinition collectionType="none" defaultExpression="NEW(LIB_GenericWrapper)" description="" mode="local" type="LIB_GenericWrapper" variable="currentTin"/>
        <parameterDefinition collectionType="none" defaultExpression="false" description="" mode="assigned" type="Boolean" variable="isReadOnly"/>
        <parameterDefinition collectionType="none" defaultExpression="" description="(inherited from COB_IncludePartyPersonalDetails)" mode="assigned" type="CMN_ValidationManager" variable="validationManager"/>
        <parameterDefinition collectionType="none" defaultExpression="'physical'" description="" mode="assigned" type="String" variable="personType"/>
        <parameterDefinition collectionType="none" defaultExpression="" description="(inherited from COB_IncludePartyPersonalDetails)" mode="assigned" type="CMN_PhysicalPerson" variable="party"/>
    </parameterDefinitions>
    <view class="com.nm.sdk.data.pages.views.components.View" id="0">
        <component class="com.nm.sdk.data.pages.views.components.Group" disabled="$isReadOnly" id="98" name="">
            <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayout" id="110">
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutGroup" htmlId="='identificationArea' &amp; $identificationItem.getId()" id="106">
                    <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutFullWidthElement" id="117">
                        <component class="com.nm.sdk.data.pages.views.components.Div" id="119">
                            <style>
                                <property name="margin-left" value="20px"/>
                            </style>
                            <customComponent adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomComponent" componentClass="com.nm.extensions.widgets.image.Image" id="118">
                                <style>
                                    <property name="margin-right" value="10px"/>
                                </style>
                                <property name="altText"/>
                                <property name="height" value="-1"/>
                                <property name="inline" value="true"/>
                                <property name="resourceId" value="UI_YellowWarningIcon"/>
                                <property name="size" value="32"/>
                                <property name="tooltipText"/>
                                <property name="type" value="0"/>
                                <property name="url"/>
                                <property name="width" value="-1"/>
                                <property name="workspaceIconId" value="aw.builtin.default"/>
                            </customComponent>
                            <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="116" inline="true" text="[LABEL:CMN_identification.expiry.date.warning]"/>
                        </component>
                    </customContainer>
                    <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="17">
                        <component class="com.nm.sdk.data.pages.views.components.Comment" id="40" renderedToHTML="false" text="Update if statement when changing catalogue entry of 'other' id type "/>
                        <component class="com.nm.sdk.data.pages.views.components.Template" id="100" screenId="CMN_TemplateValidationBox">
                            <component class="com.nm.sdk.data.pages.views.components.TemplateArea" id="101" name="CONTENT">
                                <component class="com.nm.sdk.data.pages.views.components.Infobox" id="20" label="[LABEL:CMN_IncludeIdentificationDocument.identification.type]" orientation="vertical">
                                    <component binding="$identificationItem.idType" class="com.nm.sdk.data.pages.views.components.DropdownList" id="21" select2AllowClear="false" select2DynamicUrl="" select2IsEnabled="false" select2QueryParameterName="q" select2Width="resolve" select2WidthOther="50%"
                                        select2minimumInputLength="0" selectText="[LABEL:dropdown.select]" showSelect="true" textIfDisabledDisplay="__SELECT_TEXT__">
                                        <action class="com.nm.sdk.data.pages.views.actions.ExpressionAction" eventType="onchange"
                                            expression="$identificationItem.idIssuanceCountry := '';&#xa;If $identificationItem.idType == 'deathCertificate' Then&#xa;   $identificationItem.idExpirationDate := null;&#xa;End" phase="validate"/>
                                        <action class="com.nm.sdk.data.pages.views.actions.AjaxUpdateAreaAction" eventType="onchange" htmlIds="=CONCAT('immigrationVisaArea', ',', 'identificationArea' &amp; $identificationItem.getId())"/>
                                        <dataSource class="com.nm.sdk.data.pages.views.options.ExpressionDataSource" collection="Record $rec;&#xa;Return FILTER(RECORDS('CMN_IdentificationTypes__selector'), TOSTRING($rec.getValue('personType')) == $personType, $rec);" collectionType="none"
                                            id="TOSTRING($record.getValue('id'))" label="TOSTRING($record.getValue('description'))" type="Record" variable="record"/>
                                    </component>
                                </component>
                            </component>
                            <parameterAssignments>
                                <parameterAssignment expression="$validationManager" variable="validationManager"/>
                                <parameterAssignment expression="NotEmpty($identificationItem.idType)" variable="isValid"/>
                                <parameterAssignment expression="'[LABEL:COB_IncludePartyPersonalDetails.validation.message.identification.type]'" variable="messageWhenNotValid"/>
                                <parameterAssignment expression="'idType'" variable="itemId"/>
                            </parameterAssignments>
                        </component>
                    </customContainer>
                    <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="35">
                        <component class="com.nm.sdk.data.pages.views.components.AjaxUpdateArea" htmlId="typeUpdateArea" id="38">
                            <component class="com.nm.sdk.data.pages.views.components.If" condition="$identificationItem.idType == 'other' || $identificationItem.idType == 'otherLegal'" id="109">
                                <component class="com.nm.sdk.data.pages.views.components.Infobox" id="36" label="[LABEL:CMN_IdentificationTypes.party.identification.other.text]" orientation="vertical">
                                    <component binding="$identificationItem.otherIdentificationType" class="com.nm.sdk.data.pages.views.components.TextField" id="37" inputType="text"/>
                                </component>
                            </component>
                        </component>
                    </customContainer>
                    <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="107">
                        <component class="com.nm.sdk.data.pages.views.components.Template" id="120" screenId="CMN_TemplateValidationBox">
                            <component class="com.nm.sdk.data.pages.views.components.TemplateArea" id="121" name="CONTENT">
                                <component class="com.nm.sdk.data.pages.views.components.Infobox" id="22" label="[LABEL:CMN_Party.identification.number]" orientation="vertical">
                                    <component binding="$identificationItem.idNumber" class="com.nm.sdk.data.pages.views.components.TextField" id="23" inputType="text"/>
                                </component>
                            </component>
                            <parameterAssignments>
                                <parameterAssignment expression="'11042'" variable="gsFieldId"/>
                                <parameterAssignment expression="$identificationItem.idNumber" variable="gsFieldValue"/>
                            </parameterAssignments>
                        </component>
                    </customContainer>
                    <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="8">
                        <component class="com.nm.sdk.data.pages.views.components.Infobox" id="26" label="[LABEL:COB_identification.issuance.date]" orientation="vertical">
                            <customControl adapterName="ComponentExtension" binding="$identificationItem.idIssuanceDate" class="com.nm.sdk.data.pages.views.components.CustomControl" componentClass="com.nm.extensions.widgets.datepicker.DatePicker" id="27">
                                <converter class="com.nm.sdk.data.pages.views.converters.ExpressionConverter" input="LIB_DateHelper.parse($value)" output="LIB_DateHelper.formatDate($value)" variable="value" variableCollectionType="none" variableType="Date"/>
                                <property name="disableTyping" value="false"/>
                                <property name="format" value="=&#xa;LIB_ConfigHelper.getDatePickerFormat()"/>
                                <property name="maxDate" value="NOW()"/>
                                <property name="minDate" value="DATEADD(NOW(), -100, 'y')"/>
                                <property name="showButtonPanel" value="false"/>
                                <property name="showMonthDropdown" value="true"/>
                                <property name="showYearDropdown" value="true"/>
                                <property name="startDayIndex" value="-1"/>
                                <property name="textIfDisabled" value="false"/>
                                <property name="validateMinMaxDate" value="false"/>
                                <property name="yearRange" value="c-100:c+100"/>
                            </customControl>
                        </component>
                    </customContainer>
                    <component class="com.nm.sdk.data.pages.views.components.If" condition="$identificationItem.idType != 'deathCertificate'" id="111">
                        <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="5">
                            <component class="com.nm.sdk.data.pages.views.components.Template" id="102" screenId="CMN_TemplateValidationBox">
                                <component class="com.nm.sdk.data.pages.views.components.TemplateArea" id="103" name="CONTENT">
                                    <component class="com.nm.sdk.data.pages.views.components.Infobox" id="28" label="[LABEL:COB_identification.expiration.date]" orientation="vertical">
                                        <customControl adapterName="ComponentExtension" binding="$identificationItem.idExpirationDate" class="com.nm.sdk.data.pages.views.components.CustomControl" componentClass="com.nm.extensions.widgets.datepicker.DatePicker" id="29">
                                            <converter class="com.nm.sdk.data.pages.views.converters.ExpressionConverter" input="LIB_DateHelper.parse($value)" output="LIB_DateHelper.formatDate($value)" variable="value" variableCollectionType="none" variableType="Date"/>
                                            <property name="disableTyping" value="false"/>
                                            <property name="format" value="=&#xa;LIB_ConfigHelper.getDatePickerFormat()"/>
                                            <property name="maxDate" value="DATEADD(NOW(), 20, 'y')"/>
                                            <property name="minDate" value="NOW()"/>
                                            <property name="showButtonPanel" value="false"/>
                                            <property name="showMonthDropdown" value="true"/>
                                            <property name="showYearDropdown" value="true"/>
                                            <property name="startDayIndex" value="-1"/>
                                            <property name="textIfDisabled" value="false"/>
                                            <property name="validateMinMaxDate" value="false"/>
                                            <property name="yearRange" value="c-100:c+100"/>
                                        </customControl>
                                    </component>
                                </component>
                                <parameterAssignments>
                                    <parameterAssignment expression="$identificationItem.idExpirationDate != null" variable="isValid"/>
                                    <parameterAssignment expression="$validationManager" variable="validationManager"/>
                                    <parameterAssignment expression="'idExpirationDate'" variable="itemId"/>
                                    <parameterAssignment expression="'[LABEL:COB_IncludePartyPersonalDetails.validation.message.identification.expiration.date]'" variable="messageWhenNotValid"/>
                                </parameterAssignments>
                            </component>
                        </customContainer>
                    </component>
                    <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="2">
                        <component class="com.nm.sdk.data.pages.views.components.Infobox" id="30" label="[LABEL:CMN_Party.identification.issue.place]" orientation="vertical">
                            <component binding="$identificationItem.idIssuancePlace" class="com.nm.sdk.data.pages.views.components.TextField" id="31" inputType="text"/>
                        </component>
                    </customContainer>
                    <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="11">
                        <component class="com.nm.sdk.data.pages.views.components.Template" id="104" screenId="CMN_TemplateValidationBox">
                            <component class="com.nm.sdk.data.pages.views.components.TemplateArea" id="105" name="CONTENT">
                                <component class="com.nm.sdk.data.pages.views.components.Infobox" id="24" label="[LABEL:CMN_identification.issuance.country]" orientation="vertical">
                                    <component binding="$identificationItem.idIssuanceCountry" class="com.nm.sdk.data.pages.views.components.DropdownList" id="25" select2AllowClear="false" select2DynamicUrl="" select2IsEnabled="true" select2QueryParameterName="q" select2Width="resolve"
                                        select2WidthOther="50%" select2minimumInputLength="2" selectText="[LABEL:dropdown.select]" showSelect="true" textIfDisabledDisplay="__SELECT_TEXT__">
                                        <action class="com.nm.sdk.data.pages.views.actions.AjaxUpdateAreaAction" eventType="onchange" htmlIds="immigrationVisaArea,auaIdentificationDocumentAdditionalInfo"/>
                                        <dataSource catalogueId="CMN_Countries__selector" class="com.nm.sdk.data.pages.views.options.CatalogueDataSource" columnName="description"/>
                                    </component>
                                </component>
                            </component>
                            <parameterAssignments>
                                <parameterAssignment expression="NotEmpty($identificationItem.idIssuanceCountry)" variable="isValid"/>
                                <parameterAssignment expression="'[LABEL:COB_IncludePartyPersonalDetails.validation.message.identification.issuance.country]'" variable="messageWhenNotValid"/>
                                <parameterAssignment expression="$validationManager" variable="validationManager"/>
                                <parameterAssignment expression="'idIssuanceCountry'" variable="itemId"/>
                            </parameterAssignments>
                        </component>
                    </customContainer>
                    <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="91">
                        <component class="com.nm.sdk.data.pages.views.components.Template" id="122" screenId="CMN_TemplateValidationBox">
                            <component class="com.nm.sdk.data.pages.views.components.TemplateArea" id="123" name="CONTENT">
                                <component class="com.nm.sdk.data.pages.views.components.Infobox" id="33" label="[LABEL:CMN_identification.issued.by]" orientation="vertical">
                                    <component binding="$identificationItem.idIssuedBy" class="com.nm.sdk.data.pages.views.components.TextField" id="34" inputType="text"/>
                                </component>
                            </component>
                            <parameterAssignments>
                                <parameterAssignment expression="$identificationItem.idIssuedBy" variable="gsFieldValue"/>
                                <parameterAssignment expression="'11158'" variable="gsFieldId"/>
                            </parameterAssignments>
                        </component>
                    </customContainer>
                    <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="113">
                        <component class="com.nm.sdk.data.pages.views.components.AjaxUpdateArea" htmlId="auaIdentificationDocumentAdditionalInfo" id="112">
                            <component class="com.nm.sdk.data.pages.views.components.If" condition="EQUAL($identificationItem.idIssuanceCountry, 'US')" id="115">
                                <component class="com.nm.sdk.data.pages.views.components.Include" id="114" screenId="COB_IncludeIdentificationDocumentAdditionalInfo__selector">
                                    <parameterAssignments>
                                        <parameterAssignment expression="$identificationItem" variable="identificationItem"/>
                                        <parameterAssignment expression="$adaptiveFlowLayoutConfiguration" variable="adaptiveFlowLayoutConfiguration"/>
                                        <parameterAssignment expression="$personType" variable="personType"/>
                                        <parameterAssignment expression="$validationManager" variable="validationManager"/>
                                        <parameterAssignment expression="$isReadOnly" variable="isReadOnly"/>
                                        <parameterAssignment expression="$party" variable="party"/>
                                    </parameterAssignments>
                                </component>
                            </component>
                        </component>
                    </customContainer>
                    <property name="groupHasLayout" value="false"/>
                    <property name="groupTitle"/>
                    <property name="inheritAllParentProperties" value="false"/>
                    <property name="labelWidthPercentage"/>
                    <property name="labelWidthPixels"/>
                    <property name="labelWidthType"/>
                    <property name="maxElementPixelWidth" value="=$adaptiveFlowLayoutConfiguration.maxElementPixelWidth"/>
                    <property name="maxElementsPerRow" value="3"/>
                    <property name="targetElementPixelWidth" value="=$adaptiveFlowLayoutConfiguration.targetElementPixelWidth"/>
                    <property name="topLabelCutoff" value="=$adaptiveFlowLayoutConfiguration.topLabelCutOff"/>
                    <property name="validationExpression"/>
                    <property name="validationMessage"/>
                </customContainer>
                <property name="labelWidthPercentage"/>
                <property name="labelWidthPixels"/>
                <property name="labelWidthType"/>
                <property name="maxElementPixelWidth"/>
                <property name="maxElementsPerRow"/>
                <property name="targetElementPixelWidth"/>
                <property name="topLabelCutoff"/>
            </customContainer>
        </component>
    </view>
</screen>

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    1,1107,9698,2
<?xml version="1.0" encoding="UTF-8"?>
<object xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="object.xsd">
    <id>CMN_X26ChkLifeInsurancePolicyInsEN__CH</id>
    <uuid>c812315a-14f0-465b-a3a0-5d24e58d0fb9</uuid>
    <type>PdfOutput</type>
    <name/>
    <description>X26 - ChkLifeInsurancePolicyIns</description>
    <creator>kamal</creator>
    <creationTime>1314626802110</creationTime>
    <modifier>bernard</modifier>
    <modificationTime>1474556219432</modificationTime>
    <active>true</active>
    <versionUuid>8a4c5693-dbf5-4d81-87eb-51e42da5649f</versionUuid>
    <parentVersionUuid>4971fca1-2480-4ee2-961c-8a39ff383d97</parentVersionUuid>
    <timestamp>1475260129806</timestamp>
    <systemId>h-global-predev.appway.com</systemId>
    <copyOfUuid>8104f45d-2208-493d-a9df-ae60cf100af2</copyOfUuid>
    <committed>true</committed>
    <deleted>false</deleted>
    <userId>magloire</userId>
    <metaData>
        <property name="Refactoring-ChangeID" value="X26_ChkLifeInsurancePolicyIns>CMN_X26ChkLifeInsurancePolicyInsEN__CH"/>
    </metaData>
</object>

<?xml version="1.0" encoding="UTF-8"?>
<outputform version="1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="pdfoutput.xsd">
    <parameterDefinitions>
        <parameterDefinition collectionType="none" defaultExpression="" description="" mode="assigned" type="CMN_BusinessRelationship" variable="businessRelationship"/>
        <parameterDefinition collectionType="none" defaultExpression="NEW(CMN_DocumentHelperBusinessRelationship, $businessRelationship)" description="" mode="local" type="CMN_DocumentHelperBusinessRelationship" variable="businessRelationshipHelper"/>
    </parameterDefinitions>
    <originalfile>X26_ChkLifeInsurancePolicyIns_GB.pdf</originalfile>
    <sourcefileversion/>
    <languageid>en</languageid>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
        <formfield>
            <name/>
            <description/>
            <formfieldid>field_1314626962992_0</formfieldid>
            <nextformfieldid/>
            <replicationstrategy>0</replicationstrategy>
            <emptyvisibility>false</emptyvisibility>
            <transparency>1.0</transparency>
            <fieldMarkerExpression/>
            <fieldMarkerVisible>false</fieldMarkerVisible>
            <copy>nocopy</copy>
            <height>11.200000000000045</height>
            <leftposition>42.4</leftposition>
            <topposition>747.2999999999994</topposition>
            <width>264.0</width>
            <zindex>1</zindex>
            <expression>$businessRelationship.number</expression>
            <visibility/>
            <blank>false</blank>
            <valuefieldtype>TEXT</valuefieldtype>
            <valuefieldparameter>
                <name>fontstyle</name>
                <value>'Footer'</value>
            </valuefieldparameter>
            <valuefieldparameter>
                <name>indent</name>
                <value>0</value>
            </valuefieldparameter>
            <valuefieldparameter>
                <name>valign</name>
                <value>'top'</value>
            </valuefieldparameter>
        </formfield>
        <formfield>
            <name/>
            <description/>
            <formfieldid>field_1316428755183_0</formfieldid>
            <nextformfieldid/>
            <replicationstrategy>0</replicationstrategy>
            <emptyvisibility>false</emptyvisibility>
            <transparency>1.0</transparency>
            <fieldMarkerExpression/>
            <fieldMarkerVisible>false</fieldMarkerVisible>
            <copy>copyall</copy>
            <height>28.5</height>
            <leftposition>88.99999999999999</leftposition>
            <topposition>763.8000000000008</topposition>
            <width>147.0</width>
            <zindex>1</zindex>
            <expression>DYNAMICDOCUMENT('CMN_RefNumberBlock')</expression>
            <visibility/>
            <blank>false</blank>
            <valuefieldtype>TABLE</valuefieldtype>
            <valuefieldparameter>
                <name>indent</name>
                <value>0</value>
            </valuefieldparameter>
        </formfield>
        <formfield>
            <name/>
            <description/>
            <formfieldid>field_1432041475549_0</formfieldid>
            <nextformfieldid/>
            <replicationstrategy>0</replicationstrategy>
            <emptyvisibility>false</emptyvisibility>
            <transparency>1.0</transparency>
            <fieldMarkerExpression/>
            <fieldMarkerVisible>false</fieldMarkerVisible>
            <copy>nocopy</copy>
            <height>45.66666666666666</height>
            <leftposition>162.0</leftposition>
            <topposition>187.0</topposition>
            <width>389.0</width>
            <zindex>1</zindex>
            <expression>$businessRelationshipHelper.getName()</expression>
            <visibility>NOT($businessRelationshipHelper.useSmallBox())</visibility>
            <blank>false</blank>
            <valuefieldtype>TEXT</valuefieldtype>
            <valuefieldparameter>
                <name>fontstyle</name>
                <value>'default_small'</value>
            </valuefieldparameter>
            <valuefieldparameter>
                <name>indent</name>
                <value>0</value>
            </valuefieldparameter>
            <valuefieldparameter>
                <name>lead</name>
                <value>26.0</value>
            </valuefieldparameter>
        </formfield>
        <formfield>
            <name/>
            <description/>
            <formfieldid>field_1432041475895_1</formfieldid>
            <nextformfieldid/>
            <replicationstrategy>0</replicationstrategy>
            <emptyvisibility>false</emptyvisibility>
            <transparency>1.0</transparency>
            <fieldMarkerExpression/>
            <fieldMarkerVisible>false</fieldMarkerVisible>
            <copy>nocopy</copy>
            <height>20.0</height>
            <leftposition>162.0</leftposition>
            <topposition>213.33333333333334</topposition>
            <width>389.0</width>
            <zindex>1</zindex>
            <expression>$businessRelationshipHelper.printSmallBox2()</expression>
            <visibility>$businessRelationshipHelper.useSmallBox()</visibility>
            <blank>false</blank>
            <valuefieldtype>TEXT</valuefieldtype>
            <valuefieldparameter>
                <name>fontstyle</name>
                <value>'UI_DefaultSmall'</value>
            </valuefieldparameter>
            <valuefieldparameter>
                <name>indent</name>
                <value>0</value>
            </valuefieldparameter>
            <valuefieldparameter>
                <name>lead</name>
                <value>5.0</value>
            </valuefieldparameter>
        </formfield>
        <formfield>
            <name/>
            <description/>
            <formfieldid>field_1432041476253_2</formfieldid>
            <nextformfieldid/>
            <replicationstrategy>0</replicationstrategy>
            <emptyvisibility>false</emptyvisibility>
            <transparency>1.0</transparency>
            <fieldMarkerExpression/>
            <fieldMarkerVisible>false</fieldMarkerVisible>
            <copy>nocopy</copy>
            <height>22.0</height>
            <leftposition>162.0</leftposition>
            <topposition>186.83333333333334</topposition>
            <width>389.0</width>
            <zindex>1</zindex>
            <expression>$businessRelationshipHelper.printSmallBox1()</expression>
            <visibility>$businessRelationshipHelper.useSmallBox()</visibility>
            <blank>false</blank>
            <valuefieldtype>TEXT</valuefieldtype>
            <valuefieldparameter>
                <name>fontstyle</name>
                <value>'UI_DefaultSmall'</value>
            </valuefieldparameter>
            <valuefieldparameter>
                <name>indent</name>
                <value>0</value>
            </valuefieldparameter>
            <valuefieldparameter>
                <name>lead</name>
                <value>5</value>
            </valuefieldparameter>
        </formfield>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
        <formfield>
            <name/>
            <description/>
            <formfieldid>field_1461319029914_0</formfieldid>
            <nextformfieldid/>
            <replicationstrategy>0</replicationstrategy>
            <emptyvisibility>false</emptyvisibility>
            <transparency>1.0</transparency>
            <fieldMarkerExpression/>
            <fieldMarkerVisible>false</fieldMarkerVisible>
            <copy>nocopy</copy>
            <height>18.0</height>
            <leftposition>163.60000000000008</leftposition>
            <topposition>366.8</topposition>
            <width>388.0</width>
            <zindex>1</zindex>
            <expression>$businessRelationshipHelper.getOpeningPlace()</expression>
            <visibility/>
            <blank>false</blank>
            <valuefieldtype>TEXT</valuefieldtype>
            <valuefieldparameter>
                <name>indent</name>
                <value>0</value>
            </valuefieldparameter>
        </formfield>
        <formfield>
            <name/>
            <description/>
            <formfieldid>field_1461319029925_1</formfieldid>
            <nextformfieldid/>
            <replicationstrategy>0</replicationstrategy>
            <emptyvisibility>false</emptyvisibility>
            <transparency>1.0</transparency>
            <fieldMarkerExpression/>
            <fieldMarkerVisible>false</fieldMarkerVisible>
            <copy>nocopy</copy>
            <height>17.99999999999997</height>
            <leftposition>163.60000000000008</leftposition>
            <topposition>388.9</topposition>
            <width>127.99999999999997</width>
            <zindex>1</zindex>
            <expression>$businessRelationshipHelper.getOpeningDate()</expression>
            <visibility/>
            <blank>false</blank>
            <valuefieldtype>TEXT</valuefieldtype>
            <valuefieldparameter>
                <name>indent</name>
                <value>0</value>
            </valuefieldparameter>
            <valuefieldparameter>
                <name>valign</name>
                <value>'middle'</value>
            </valuefieldparameter>
        </formfield>
    </outputformpage>
</outputform>

pdfFile=3c0c41c4-2d44-4dbe-be29-2fe19c949dea
pdffile=3c0c41c4-2d44-4dbe-be29-2fe19c949dea
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 1,1044,6250,0
<?xml version="1.0" encoding="UTF-8"?>
<object xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="object.xsd">
    <id>CMN_IncludeKYCBusinessNature</id>
    <uuid>06133440-89b8-495a-ad3b-1e976ac4ca38</uuid>
    <type>Screen</type>
    <name/>
    <description/>
    <creator>sabino</creator>
    <creationTime>1427711531031</creationTime>
    <modifier>segafredo</modifier>
    <modificationTime>1472723464354</modificationTime>
    <active>true</active>
    <versionUuid>4d3bb0be-6f21-4184-ac68-2ce9e7926b35</versionUuid>
    <parentVersionUuid>b56d9a61-4a2e-4d85-88aa-f1e09ff4bfe5</parentVersionUuid>
    <timestamp>1475260129806</timestamp>
    <systemId>h-global-predev.appway.com</systemId>
    <copyOfUuid>74ae2f74-d1d1-465f-b73b-47c8038da2b9</copyOfUuid>
    <committed>true</committed>
    <deleted>false</deleted>
    <userId>magloire</userId>
    <metaData>
        <property name="Refactoring-ChangeID" value="CMN_IncludeKYCNatureOfBusiness>CMN_IncludeKYCBusinessNature"/>
    </metaData>
</object>

<?xml version="1.0" encoding="UTF-8"?>
<screen version="1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="screen.xsd">
    <parameterDefinitions>
        <parameterDefinition collectionType="none" defaultExpression="" description="(inherited from CMN_IncludePartiesProfilingDetail)" mode="assigned" type="Boolean" variable="isReadOnly"/>
        <parameterDefinition collectionType="none" defaultExpression="" description="" mode="assigned" type="CMN_BusinessNature" variable="natureOfBusiness"/>
        <parameterDefinition collectionType="none" defaultExpression="" description="" mode="assigned" type="CMN_PartiesProfilingValidationFactory" variable="partiesProfilingValidationFactory"/>
        <parameterDefinition collectionType="none" defaultExpression="" description="(inherited from CMN_IncludePartiesProfilingDetail)" mode="assigned" type="String" variable="screenTitle"/>
        <parameterDefinition collectionType="none" defaultExpression="NEW(CMN_ValidationManager, $partiesProfilingValidationFactory.getBusinessNatureValidationItems())" description="" mode="local" type="CMN_ValidationManager" variable="validationManager"/>
    </parameterDefinitions>
    <view class="com.nm.sdk.data.pages.views.components.View" id="0">
        <component class="com.nm.sdk.data.pages.views.components.If" condition="IsRenderingToPdf()" id="13">
            <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="14" text="=$screenTitle" textStyle="h1"/>
        </component>
        <component class="com.nm.sdk.data.pages.views.components.Group" disabled="$isReadOnly" id="1" name="">
            <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutGroup" id="2">
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutFullWidthElement" id="3">
                    <component class="com.nm.sdk.data.pages.views.components.Template" id="4" screenId="CMN_TemplateValidationBox">
                        <component class="com.nm.sdk.data.pages.views.components.TemplateArea" id="5" name="CONTENT">
                            <component class="com.nm.sdk.data.pages.views.components.Infobox" id="6" label="[LABEL:COB_kyc.nature.and.purpose.entity]" orientation="vertical">
                                <component binding="$natureOfBusiness.naturePurposeOfEntity" class="com.nm.sdk.data.pages.views.components.TextArea" cols="15" id="7" rows="5"/>
                            </component>
                        </component>
                        <parameterAssignments>
                            <parameterAssignment expression="$validationManager" variable="validationManager"/>
                            <parameterAssignment expression="'[LABEL:COB_kyc.validation.nature.and.purpose.entity]'" variable="messageWhenNotValid"/>
                            <parameterAssignment expression="'naturePurposeOfEntity'" variable="itemId"/>
                            <parameterAssignment expression="not EMPTY($natureOfBusiness.naturePurposeOfEntity) " variable="isValid"/>
                            <parameterAssignment expression="$natureOfBusiness.naturePurposeOfEntity" variable="gsFieldValue"/>
                            <parameterAssignment expression="'1911'" variable="gsFieldId"/>
                        </parameterAssignments>
                    </component>
                </customContainer>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutFullWidthElement" id="8">
                    <component class="com.nm.sdk.data.pages.views.components.Template" id="9" screenId="CMN_TemplateValidationBox">
                        <component class="com.nm.sdk.data.pages.views.components.TemplateArea" id="10" name="CONTENT">
                            <component class="com.nm.sdk.data.pages.views.components.Infobox" id="11" label="[LABEL:COB_kyc.reasons.use.entity.structure]" orientation="vertical">
                                <component binding="$natureOfBusiness.reasonsUseEntityStructure" class="com.nm.sdk.data.pages.views.components.TextArea" cols="15" id="12" rows="5"/>
                            </component>
                        </component>
                        <parameterAssignments>
                            <parameterAssignment expression="$validationManager" variable="validationManager"/>
                            <parameterAssignment expression="'[LABEL:COB_kyc.validation.reasons.use.entity.structure]'" variable="messageWhenNotValid"/>
                            <parameterAssignment expression="'customerOccupationStatus'" variable="itemId"/>
                            <parameterAssignment expression="not EMPTY($natureOfBusiness.reasonsUseEntityStructure)" variable="isValid"/>
                            <parameterAssignment expression="$natureOfBusiness.reasonsUseEntityStructure" variable="gsFieldValue"/>
                            <parameterAssignment expression="'1912'" variable="gsFieldId"/>
                        </parameterAssignments>
                    </component>
                </customContainer>
                <property name="groupHasLayout" value="false"/>
                <property name="groupTitle"/>
                <property name="inheritAllParentProperties" value="true"/>
                <property name="labelWidthPercentage"/>
                <property name="labelWidthPixels"/>
                <property name="labelWidthType"/>
                <property name="maxElementPixelWidth"/>
                <property name="maxElementsPerRow"/>
                <property name="targetElementPixelWidth"/>
                <property name="topLabelCutoff"/>
                <property name="validationExpression"/>
                <property name="validationMessage"/>
            </customContainer>
        </component>
    </view>
</screen>

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  1,1035,10076,2
<?xml version="1.0" encoding="UTF-8"?>
<object xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="object.xsd">
    <id>CMN_X26ChkFundEN__CH</id>
    <uuid>fbf0662d-05c8-4846-b4ae-3ee061865a45</uuid>
    <type>PdfOutput</type>
    <name/>
    <description>X26 - ChkFund</description>
    <creator>kamal</creator>
    <creationTime>1314625178698</creationTime>
    <modifier>bernard</modifier>
    <modificationTime>1474556127542</modificationTime>
    <active>true</active>
    <versionUuid>25702dbe-1e93-41ee-854e-5c71a6fef32f</versionUuid>
    <parentVersionUuid>2bd6917c-0db4-4eff-8ae1-4fab1d0a17d7</parentVersionUuid>
    <timestamp>1475260129806</timestamp>
    <systemId>h-global-predev.appway.com</systemId>
    <copyOfUuid>c662a1f1-e5da-4400-a0b9-399ab75eb72f</copyOfUuid>
    <committed>true</committed>
    <deleted>false</deleted>
    <userId>magloire</userId>
    <metaData>
        <property name="Refactoring-ChangeID" value="X26_ChkFund>CMN_X26ChkFundEN__CH"/>
    </metaData>
</object>

<?xml version="1.0" encoding="UTF-8"?>
<outputform version="1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="pdfoutput.xsd">
    <parameterDefinitions>
        <parameterDefinition collectionType="none" defaultExpression="" description="" mode="assigned" type="CMN_BusinessRelationship" variable="businessRelationship"/>
        <parameterDefinition collectionType="none" defaultExpression="NEW(CMN_DocumentHelperBusinessRelationship, $businessRelationship)" description="" mode="local" type="CMN_DocumentHelperBusinessRelationship" variable="businessRelationshipHelper"/>
    </parameterDefinitions>
    <originalfile>X26_ChkFund_GB.pdf</originalfile>
    <sourcefileversion/>
    <languageid>en</languageid>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
        <formfield>
            <name/>
            <description/>
            <formfieldid>field_1314625592964_0</formfieldid>
            <nextformfieldid/>
            <replicationstrategy>0</replicationstrategy>
            <emptyvisibility>false</emptyvisibility>
            <transparency>1.0</transparency>
            <fieldMarkerExpression/>
            <fieldMarkerVisible>false</fieldMarkerVisible>
            <copy>nocopy</copy>
            <height>10.399999999999977</height>
            <leftposition>42.400000000000006</leftposition>
            <topposition>747.1999999999997</topposition>
            <width>266.4</width>
            <zindex>1</zindex>
            <expression>$businessRelationshipHelper.getNumber()</expression>
            <visibility/>
            <blank>false</blank>
            <valuefieldtype>TEXT</valuefieldtype>
            <valuefieldparameter>
                <name>fontstyle</name>
                <value>'Footer'</value>
            </valuefieldparameter>
            <valuefieldparameter>
                <name>indent</name>
                <value>0</value>
            </valuefieldparameter>
            <valuefieldparameter>
                <name>valign</name>
                <value>'top'</value>
            </valuefieldparameter>
        </formfield>
        <formfield>
            <name/>
            <description/>
            <formfieldid>field_1316428643320_0</formfieldid>
            <nextformfieldid/>
            <replicationstrategy>0</replicationstrategy>
            <emptyvisibility>false</emptyvisibility>
            <transparency>1.0</transparency>
            <fieldMarkerExpression/>
            <fieldMarkerVisible>false</fieldMarkerVisible>
            <copy>copyall</copy>
            <height>28.5</height>
            <leftposition>89.30000000000005</leftposition>
            <topposition>762.9</topposition>
            <width>147.0</width>
            <zindex>1</zindex>
            <expression>DYNAMICDOCUMENT('CMN_RefNumberBlock')</expression>
            <visibility/>
            <blank>false</blank>
            <valuefieldtype>TABLE</valuefieldtype>
            <valuefieldparameter>
                <name>indent</name>
                <value>0</value>
            </valuefieldparameter>
        </formfield>
        <formfield>
            <name/>
            <description/>
            <formfieldid>field_1432043288029_0</formfieldid>
            <nextformfieldid/>
            <replicationstrategy>0</replicationstrategy>
            <emptyvisibility>false</emptyvisibility>
            <transparency>1.0</transparency>
            <fieldMarkerExpression/>
            <fieldMarkerVisible>false</fieldMarkerVisible>
            <copy>nocopy</copy>
            <height>45.66666666666666</height>
            <leftposition>162.0</leftposition>
            <topposition>187.0</topposition>
            <width>389.0</width>
            <zindex>1</zindex>
            <expression>$businessRelationshipHelper.getName()</expression>
            <visibility>NOT($businessRelationshipHelper.useSmallBox())</visibility>
            <blank>false</blank>
            <valuefieldtype>TEXT</valuefieldtype>
            <valuefieldparameter>
                <name>fontstyle</name>
                <value>'default_small'</value>
            </valuefieldparameter>
            <valuefieldparameter>
                <name>indent</name>
                <value>0</value>
            </valuefieldparameter>
            <valuefieldparameter>
                <name>lead</name>
                <value>26.0</value>
            </valuefieldparameter>
        </formfield>
        <formfield>
            <name/>
            <description/>
            <formfieldid>field_1432043288352_1</formfieldid>
            <nextformfieldid/>
            <replicationstrategy>0</replicationstrategy>
            <emptyvisibility>false</emptyvisibility>
            <transparency>1.0</transparency>
            <fieldMarkerExpression/>
            <fieldMarkerVisible>false</fieldMarkerVisible>
            <copy>nocopy</copy>
            <height>20.0</height>
            <leftposition>162.0</leftposition>
            <topposition>213.33333333333334</topposition>
            <width>389.0</width>
            <zindex>1</zindex>
            <expression>$businessRelationshipHelper.printSmallBox2()</expression>
            <visibility>$businessRelationshipHelper.useSmallBox()</visibility>
            <blank>false</blank>
            <valuefieldtype>TEXT</valuefieldtype>
            <valuefieldparameter>
                <name>fontstyle</name>
                <value>'UI_DefaultSmall'</value>
            </valuefieldparameter>
            <valuefieldparameter>
                <name>indent</name>
                <value>0</value>
            </valuefieldparameter>
            <valuefieldparameter>
                <name>lead</name>
                <value>5.0</value>
            </valuefieldparameter>
        </formfield>
        <formfield>
            <name/>
            <description/>
            <formfieldid>field_1432043288650_2</formfieldid>
            <nextformfieldid/>
            <replicationstrategy>0</replicationstrategy>
            <emptyvisibility>false</emptyvisibility>
            <transparency>1.0</transparency>
            <fieldMarkerExpression/>
            <fieldMarkerVisible>false</fieldMarkerVisible>
            <copy>nocopy</copy>
            <height>22.0</height>
            <leftposition>162.0</leftposition>
            <topposition>186.83333333333334</topposition>
            <width>389.0</width>
            <zindex>1</zindex>
            <expression>$businessRelationshipHelper.printSmallBox1()</expression>
            <visibility>$businessRelationshipHelper.useSmallBox()</visibility>
            <blank>false</blank>
            <valuefieldtype>TEXT</valuefieldtype>
            <valuefieldparameter>
                <name>fontstyle</name>
                <value>'UI_DefaultSmall'</value>
            </valuefieldparameter>
            <valuefieldparameter>
                <name>indent</name>
                <value>0</value>
            </valuefieldparameter>
            <valuefieldparameter>
                <name>lead</name>
                <value>5</value>
            </valuefieldparameter>
        </formfield>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
        <formfield>
            <name/>
            <description/>
            <formfieldid>field_1386171468542_0</formfieldid>
            <nextformfieldid/>
            <replicationstrategy>0</replicationstrategy>
            <emptyvisibility>false</emptyvisibility>
            <transparency>1.0</transparency>
            <fieldMarkerExpression/>
            <fieldMarkerVisible>false</fieldMarkerVisible>
            <copy>nocopy</copy>
            <height>17.5</height>
            <leftposition>163.1000000000002</leftposition>
            <topposition>322.58823529411825</topposition>
            <width>388.99999999999983</width>
            <zindex>1</zindex>
            <expression>$businessRelationshipHelper.getOpeningPlace()</expression>
            <visibility/>
            <blank>false</blank>
            <valuefieldtype>TEXT</valuefieldtype>
            <valuefieldparameter>
                <name>indent</name>
                <value>0</value>
            </valuefieldparameter>
        </formfield>
        <formfield>
            <name/>
            <description/>
            <formfieldid>field_1386171468554_1</formfieldid>
            <nextformfieldid/>
            <replicationstrategy>0</replicationstrategy>
            <emptyvisibility>false</emptyvisibility>
            <bgcolor>255,255,255</bgcolor>
            <transparency>1.0</transparency>
            <fieldMarkerExpression/>
            <fieldMarkerVisible>false</fieldMarkerVisible>
            <copy>nocopy</copy>
            <height>18.000000000000057</height>
            <leftposition>163.1000000000002</leftposition>
            <topposition>349.28823529411807</topposition>
            <width>130.50000000000003</width>
            <zindex>1</zindex>
            <expression>$businessRelationshipHelper.getOpeningDate()</expression>
            <visibility/>
            <blank>false</blank>
            <valuefieldtype>TEXT</valuefieldtype>
            <valuefieldparameter>
                <name>indent</name>
                <value>0</value>
            </valuefieldparameter>
        </formfield>
    </outputformpage>
</outputform>

pdfFile=37561d2a-0e3b-48e0-a882-6fb7e4952912
pdffile=37561d2a-0e3b-48e0-a882-6fb7e4952912
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              1,1021,305900,0
<?xml version="1.0" encoding="UTF-8"?>
<object xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="object.xsd">
    <id>INT_SILMappingCMNtoSIL_v2</id>
    <uuid>da6f21eb-964f-4db1-a7cd-91b8cf2337b0</uuid>
    <type>DataStructure</type>
    <name/>
    <description/>
    <creator>pezzi</creator>
    <creationTime>1472211113097</creationTime>
    <modifier>pezzi</modifier>
    <modificationTime>1474533435673</modificationTime>
    <active>true</active>
    <versionUuid>11048515-1b8d-4d0b-9eb2-5a2521617530</versionUuid>
    <parentVersionUuid>fc000e32-9a92-43aa-a43d-a0aeab07de69</parentVersionUuid>
    <timestamp>1475260129806</timestamp>
    <systemId>h-global-predev.appway.com</systemId>
    <copyOfUuid>1c860cff-fe47-4c35-acc6-d7db09f6de25</copyOfUuid>
    <committed>true</committed>
    <deleted>false</deleted>
    <userId>magloire</userId>
    <metaData>
        <property name="Refactoring-ChangeID" value="INT_SILMapping>INT_SILMappingCMNtoSIL"/>
    </metaData>
</object>

<?xml version="1.0" encoding="UTF-8"?>
<class dname="" entityStoreName="strong_entity" name="INT_SILMappingCMNtoSIL_v2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="dataitemclass.xsd">
    <superclasses>
        <superclass class="INT_Mapping"/>
    </superclasses>
    <properties/>
    <methods>
        <method name="_compareEntities" userId="pezzi" uuid="ffffffff-8892-8987-0000-000000000000">
            <definition><![CDATA[/**
  Description of function '_compareEntities'.
  @param $modifiedEntity Modified object
  @param $unmodifiedEntity Unmodified Object
  @return       The new object contain only add or removed value in the secondDataEntity
*/
StaticFunction _compareEntities(Any $modifiedEntity, Any $initialEntity) : Any Begin
   If NOTEQUAL($modifiedEntity.getDataEntityType(), $initialEntity.getDataEntityType()) Then
      FAIL('NOT SAME TYPE OF ENTITY');
   End
   If $modifiedEntity == $initialEntity Then
      If INT_Mapping._isPrimitiveType($modifiedEntity) Then
         Return NEW($initialEntity.getDataEntityType());
      Else
         Return CreateSkeletonDataClass($initialEntity.getDataEntityType());
      End
   End
   If ISA($modifiedEntity, com.nm.sdk.data.dataitems.DataObject) and ISA($initialEntity, com.nm.sdk.data.dataitems.DataObject) Then
      com.nm.sdk.data.dataitems.DataObject $modifiedDataObject := CAST(com.nm.sdk.data.dataitems.DataObject, $modifiedEntity);
      com.nm.sdk.data.dataitems.DataObject $initialDataObject := CAST(com.nm.sdk.data.dataitems.DataObject, $initialEntity);
      //For each property of the object
      ForEach Any $propertyName In $initialDataObject.getPropertiesMap().keySet() Do
         Any $modifiedProperty := $modifiedDataObject.getProperty($propertyName);
         Any $initialProperty := $initialDataObject.getProperty($propertyName);
         If $modifiedProperty == $initialProperty Then
            //We do nothing if it is the same entity, we remove it from the modifiedEntity
            $modifiedDataObject.removeProperty($propertyName);
         Else
            PRINTLN('different property: ', $propertyName);
            //properties are different, null or not null
            If $initialProperty != null Then
               //initialProperty is not null
               If $modifiedProperty != null Then
                  //PRINTLN('both are not null');
                  //modified is not null so they are different, we keep B if it's a primitive, 
                  If not INT_Mapping._isPrimitiveType($initialProperty) Then
                     //is a collection
                     If TypeOf($initialProperty, false).isCollectionType() Then
                        //PRINTLN('is a collection');
                        //call the function on each of the object of the Collection
                        Integer $subObjectIter := 1;
                        For $subObjectIter := 1 Condition $subObjectIter <= CAST(Indexed Any, $initialProperty).size() Step $subObjectIter := $subObjectIter + 1 Do
                           Any $initialSubObject := CAST(Indexed Any, $initialProperty)[$subObjectIter];
                           If ISA($initialSubObject, com.nm.sdk.data.dataitems.DataObject) Then
                              String $silId := TOSTRING(CAST(com.nm.sdk.data.dataitems.DataObject, $initialSubObject).getProperty('id'));
                              If NotEmpty($silId) Then
                                 //has a SIL ID
                                 Boolean $foundObjectWithSameSILID := false;
                                 ForEach Any $modifiedSubObject In CAST(Indexed Any, $modifiedProperty) Do
                                    If ISA($modifiedSubObject, com.nm.sdk.data.dataitems.DataObject) and EQUAL(TOSTRING(CAST(com.nm.sdk.data.dataitems.DataObject, $modifiedSubObject).getProperty('id')), $silId) Then
                                       $modifiedSubObject := INT_SILMappingCMNtoSIL_v2._compareEntities($modifiedSubObject, $initialSubObject);
                                       $foundObjectWithSameSILID := true;
                                    End
                                 End
                                 If not $foundObjectWithSameSILID Then
                                    //we must delete the ressource from first list
                                 End
                              End
                           Else
                              //We do nothing, we send the new list
                           End
                        End
                     Else
                        //is not a collection
                        PRINTLN('comparing complex data: ', $propertyName);
                        com.nm.sdk.data.dataitems.DataObject $modifiedMappedProperty := CAST(com.nm.sdk.data.dataitems.DataObject, $modifiedProperty);
                        com.nm.sdk.data.dataitems.DataObject $initialMappedProperty := CAST(com.nm.sdk.data.dataitems.DataObject, $initialProperty);
                        INT_SILMappingCMNtoSIL_v2._compareEntities($modifiedMappedProperty, $initialMappedProperty);
                     End
                  Else
                     //we keep the modified property as it has been modified and is primitive
                  End
               Else
                  //the data do not exist anymore, we must send an empty object
                  If not INT_Mapping._isPrimitiveType($initialProperty) Then
                     $modifiedDataObject.setProperty($propertyName, CreateSkeletonDataClass($initialProperty.getDataEntityType()));
                  Else
                     $modifiedDataObject.setProperty($propertyName, NEW($initialProperty.getDataEntityType()));
                  End
               End
            Else
               //initial property is null
               If $modifiedProperty != null Then
                  //we keep the modified property as it has been modified
               Else
                  FAIL('impossible ' & TOSTRING($propertyName));
                  //impossible because they are equal (null)
               End
            End
         End
      End
   End
   Return $modifiedEntity;
End]]></definition>
        </method>
        <method name="convertCMNPartyToSILInvolvedParty" userId="pezzi" uuid="ffffffff-a03a-def9-0000-000000000000">
            <definition><![CDATA[/** 
	Converts a CMN_Paty to an SIL_InvolvedParty. Always use this function to map Individual / Legal. 
    @params $cmnParty is the CMN_Party object
**/
StaticFunction convertCMNPartyToSILInvolvedParty(CMN_Party $cmnParty) : SIL_INVOLVEDPARTYinvolvedParty Begin
   SIL_INVOLVEDPARTYinvolvedParty $silInvolvedParty;
   /******************** SELECT USE CASE **********************/
   Try
      If $cmnParty.type.isPhysicalPerson() Then
         $silInvolvedParty := INT_SILMappingCMNtoSIL_v2.createSILIndividual(CAST(CMN_PhysicalPerson, $cmnParty));
      ElseIf $cmnParty.type.isLegalEntity() Then
         $silInvolvedParty := INT_SILMappingCMNtoSIL_v2.createSILOrganization(CAST(CMN_LegalEntity, $cmnParty));
      Else
         LIB_Logger.integrationError('UNKNOWN Party TYPE CONVERT: ' & TOSTRING($cmnParty));
      End
   Catch
      LIB_Logger.integrationError('[INT_SILMapping]: ' & $exception.getMessage());
   End
   /***********************************************************/
   IF($cmnParty.label != null, $silInvolvedParty.clientIdentification := $cmnParty.label);
   IF($cmnParty.fiscalDomicile != null, $silInvolvedParty.domicile := $cmnParty.fiscalDomicile);
   IF($cmnParty.tin != null, $silInvolvedParty.taxId := $cmnParty.tin);
   IF($cmnParty.getSILID() != null, $silInvolvedParty.id := $cmnParty.getSILID());
   Return $silInvolvedParty;
End]]></definition>
        </method>
        <method name="createSILAccount" userId="pezzi" uuid="00000000-6536-5e93-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILAccount'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILAccount(CMN_BusinessRelationship $cmnBusinessRelationship, SIL_ACCOUNTaccount $silAccount := null) : SIL_ACCOUNTaccount Begin
   If $silAccount == null Then
      $silAccount := CAST(SIL_ACCOUNTaccount, CreateSkeletonDataClass(SIL_ACCOUNTaccount));
   End
   /*************************************** GENERAL FIELDS ***********************************************/
   IF($cmnBusinessRelationship.getSILID() != null, $silAccount.accountId := $cmnBusinessRelationship.getSILID());
   IF($cmnBusinessRelationship.number != null, $silAccount.number := $cmnBusinessRelationship.number);
   IF(NotEmpty($cmnBusinessRelationship.clientSubtype), $silAccount.accountSubType := LIST($cmnBusinessRelationship.clientSubtype, 'CMN_ClientSubtype', 'sil_Id'));
   If $cmnBusinessRelationship.relationshipCode != null or $cmnBusinessRelationship.kytProfile.purposeOfAccount.actualRelationshipSize != null Then
      SIL_GROUPrelationship $silGroupRelation := CAST(SIL_GROUPrelationship, CreateSkeletonDataClass(SIL_GROUPrelationship));
      IF($cmnBusinessRelationship.kytProfile.purposeOfAccount.actualRelationshipSize != null, $silGroupRelation.expectedAUM := $cmnBusinessRelationship.kytProfile.purposeOfAccount.actualRelationshipSize);
      IF($cmnBusinessRelationship.relationshipCode != null, $silGroupRelation.id := $cmnBusinessRelationship.relationshipCode);
      $silAccount.relationships.addElement($silGroupRelation);
   End
   $silAccount.openningTeam := CAST(SIL_INVOLVEDPARTYdesk, CreateSkeletonDataClass(SIL_INVOLVEDPARTYdesk));
   $silAccount.openningTeam.costCenterId := $cmnBusinessRelationship.openingTeamGroup;
   If $cmnBusinessRelationship.bookingCenter != null Then
      SIL_INVOLVEDPARTYdepartment $silDepartment := CAST(SIL_INVOLVEDPARTYdepartment, CreateSkeletonDataClass(SIL_INVOLVEDPARTYdepartment));
      $silAccount.openningTeam.isRelatedToUnit := $silDepartment;
      $silDepartment.bookingCenter := LIST($cmnBusinessRelationship.bookingCenter, 'CMN_BookingCenter__selector', 'sil_Id', 'id');
   End
   If NotEmpty($cmnBusinessRelationship.relationshipCountry) Then
      $silAccount.accountMarketPurityCountry := CAST(SIL_STATICcountry, CreateSkeletonDataClass(SIL_STATICcountry));
      $silAccount.accountMarketPurityCountry.code := $cmnBusinessRelationship.relationshipCountry;
   End
   IF($cmnBusinessRelationship.kytProfile.generalInformation.committedDate != null, $silAccount.openingDate := $cmnBusinessRelationship.kytProfile.generalInformation.committedDate);
   IF($cmnBusinessRelationship.kytProfile.generalInformation.accountHeadingType != null, $silAccount.accountHeadingType := LIST($cmnBusinessRelationship.kytProfile.generalInformation.accountHeadingType, 'COB_AccountHeadingTypes', 'sil_Id'));
   IF($cmnBusinessRelationship.kytProfile.generalInformation.isCoreMarket != null, $silAccount.accountInCoreMarketIndicator := $cmnBusinessRelationship.kytProfile.generalInformation.isCoreMarket);
   IF($cmnBusinessRelationship.kytProfile.generalInformation.descriptionCoreMarket != null, $silAccount.nonCoreMarketApprovalDescription := $cmnBusinessRelationship.kytProfile.generalInformation.descriptionCoreMarket);
   $silAccount.pcmProductIndicator := $cmnBusinessRelationship.optionalServices.isOptionSelected('paymentsAndCashMngService');
   IF($cmnBusinessRelationship.kytProfile.purposeOfAccount.PCMId != null and $silAccount.pcmProductIndicator, $silAccount.pcmProductReferenceId := $cmnBusinessRelationship.kytProfile.purposeOfAccount.PCMId);
   IF($cmnBusinessRelationship.kytProfile.purposeOfAccount.reasonAccountOpened != null, $silAccount.openingReason := $cmnBusinessRelationship.kytProfile.purposeOfAccount.reasonAccountOpened);
   If $cmnBusinessRelationship.currency != null Then
      $silAccount.defaultCurrency := INT_SILMappingCMNtoSIL_v2.createSILCurrency($cmnBusinessRelationship.currency);
   End
   IF(NotEmpty($cmnBusinessRelationship.getName()), $silAccount.longName := $cmnBusinessRelationship.getName());
   /******** KYT - General Information ************/
   $silAccount.society := LIST($cmnBusinessRelationship.bookingCenter, 'CMN_BookingCenter__selector', 'sil_Id', 'id');
   /******** Relationship Manager ************/
   $silAccount.accountRelations := NewIndexed(SIL_RELATIONrelation);
   If NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.accountManager) Then
      SIL_INVOLVEDPARTYRELATIONemployeeContractRelation $silINVOLVEDPARTYRELATIONemployeeContractRelation := CAST(SIL_INVOLVEDPARTYRELATIONemployeeContractRelation, CreateSkeletonDataClass(SIL_INVOLVEDPARTYRELATIONemployeeContractRelation));
      SIL_INVOLVEDPARTYaccountOfficer $silINVOLVEDPARTYrelationshipManager := CAST(SIL_INVOLVEDPARTYaccountOfficer, CreateSkeletonDataClass(SIL_INVOLVEDPARTYaccountOfficer));
      $silAccount.accountEmployees.addElement($silINVOLVEDPARTYRELATIONemployeeContractRelation);
      $silINVOLVEDPARTYrelationshipManager.type := LIST($cmnBusinessRelationship.kytProfile.generalInformation.accountManager, 'CMN_KYTAccountManager__selector', 'sil_id');
      If EQUAL($cmnBusinessRelationship.kytProfile.generalInformation.accountManager, 'grou') Then
         If NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.hsbcEntityCountry) Then
            SIL_INVOLVEDPARTYorganization $silDepartment := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
            SIL_INVOLVEDPARTYincorporation $silIncorporation := CAST(SIL_INVOLVEDPARTYincorporation, CreateSkeletonDataClass(SIL_INVOLVEDPARTYincorporation));
            $silIncorporation.incorporateCountry := INT_SILMappingCMNtoSIL_v2.createSILCountry($cmnBusinessRelationship.kytProfile.generalInformation.hsbcEntityCountry);
            $silDepartment.documentationItems.addElement($silIncorporation);
            //String $countryCode := LIST($cmnBusinessRelationship.kytProfile.generalInformation.hsbcEntityCountry, 'CMN_ReferralEntity__selector', 'sil_id');
            // $silDepartment.country := INT_SILMappingCMNtoSIL_v2.createSILCountry($countryCode);
            $silDepartment.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName);
            SIL_INVOLVEDPARTYorganizationName $businessName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
            $businessName.businessName := $cmnBusinessRelationship.kytProfile.generalInformation.getHSBCEntityName();
            $silDepartment.names.addElement($businessName);
            //$silDepartment.id
            $silINVOLVEDPARTYrelationshipManager.inContext := $silDepartment;
         End
      Else
         If NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.companyName) or NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.firstName) or NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.lastName) Then
            If NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.companyName) and (EMPTY($cmnBusinessRelationship.kytProfile.generalInformation.firstName) and NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.lastName)) Then
               $silINVOLVEDPARTYrelationshipManager.party := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
               $silINVOLVEDPARTYrelationshipManager.party.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName);
               SIL_INVOLVEDPARTYorganizationName $businessName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
               $businessName.businessName := $cmnBusinessRelationship.kytProfile.generalInformation.companyName;
               $silINVOLVEDPARTYrelationshipManager.party.names.addElement($businessName);
            ElseIf (NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.firstName) or NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.lastName)) Then
               $silINVOLVEDPARTYrelationshipManager.party := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
               $silINVOLVEDPARTYrelationshipManager.party.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName);
               SIL_INVOLVEDPARTYindividualName $rmName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
               IF($cmnBusinessRelationship.kytProfile.generalInformation.firstName != null, $rmName.firstName := $cmnBusinessRelationship.kytProfile.generalInformation.firstName);
               IF($cmnBusinessRelationship.kytProfile.generalInformation.lastName != null, $rmName.lastName := $cmnBusinessRelationship.kytProfile.generalInformation.lastName);
               $silINVOLVEDPARTYrelationshipManager.party.names.addElement($rmName);
            End
            IF(NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.id), $silINVOLVEDPARTYrelationshipManager.party.id := $cmnBusinessRelationship.kytProfile.generalInformation.id);
         Else
            LIB_Logger.integrationWarn('Unable to map account is managed by to identified type: ' & $cmnBusinessRelationship.kytProfile.generalInformation.companyName & ', ' & $cmnBusinessRelationship.kytProfile.generalInformation.firstName & ', ' & $cmnBusinessRelationship.kytProfile.generalInformation.lastName);
         End
         If NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.country) Then
            SIL_INVOLVEDPARTYorganization $silDepartment := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
            SIL_INVOLVEDPARTYincorporation $silIncorporation := CAST(SIL_INVOLVEDPARTYincorporation, CreateSkeletonDataClass(SIL_INVOLVEDPARTYincorporation));
            $silIncorporation.incorporateCountry := INT_SILMappingCMNtoSIL_v2.createSILCountry($cmnBusinessRelationship.kytProfile.generalInformation.country);
            $silDepartment.documentationItems.addElement($silIncorporation);
            $silINVOLVEDPARTYrelationshipManager.inContext := $silDepartment;
         End
         If EQUAL($cmnBusinessRelationship.kytProfile.generalInformation.accountManager, 'pbsg') or EQUAL($cmnBusinessRelationship.kytProfile.generalInformation.accountManager, 'pbhk') Then
            SIL_INVOLVEDPARTYaccountOfficer $silINVOLVEDPARTYSecondaryrelationshipManager := CAST(SIL_INVOLVEDPARTYaccountOfficer, CreateSkeletonDataClass(SIL_INVOLVEDPARTYaccountOfficer));
            $silINVOLVEDPARTYrelationshipManager.secondary := $silINVOLVEDPARTYSecondaryrelationshipManager;
            If NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.id2nd) Then
               $silINVOLVEDPARTYSecondaryrelationshipManager.party := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
               $silINVOLVEDPARTYSecondaryrelationshipManager.party.id := $cmnBusinessRelationship.kytProfile.generalInformation.id2nd;
               If NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.firstName2nd) or NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.lastName2nd) Then
                  SIL_INVOLVEDPARTYindividualName $rmName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
                  IF($cmnBusinessRelationship.kytProfile.generalInformation.firstName2nd != null, $rmName.firstName := $cmnBusinessRelationship.kytProfile.generalInformation.firstName2nd);
                  IF($cmnBusinessRelationship.kytProfile.generalInformation.lastName2nd != null, $rmName.lastName := $cmnBusinessRelationship.kytProfile.generalInformation.lastName2nd);
                  $silINVOLVEDPARTYSecondaryrelationshipManager.party.names.addElement($rmName);
               End
               If NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.country2nd) Then
                  SIL_INVOLVEDPARTYorganization $silDepartment := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
                  SIL_INVOLVEDPARTYincorporation $silIncorporation := CAST(SIL_INVOLVEDPARTYincorporation, CreateSkeletonDataClass(SIL_INVOLVEDPARTYincorporation));
                  $silIncorporation.incorporateCountry := INT_SILMappingCMNtoSIL_v2.createSILCountry($cmnBusinessRelationship.kytProfile.generalInformation.country2nd);
                  $silDepartment.documentationItems.addElement($silIncorporation);
                  $silINVOLVEDPARTYSecondaryrelationshipManager.inContext := $silDepartment;
               End
            End
         End
      End
      $silINVOLVEDPARTYRELATIONemployeeContractRelation.employeeRole := $silINVOLVEDPARTYrelationshipManager;
   End
   If NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.businessAreaDeskHead) Then
      SIL_INVOLVEDPARTYRELATIONemployeeContractRelation $silINVOLVEDPARTYRELATIONemployeeContractRelation := CAST(SIL_INVOLVEDPARTYRELATIONemployeeContractRelation, CreateSkeletonDataClass(SIL_INVOLVEDPARTYRELATIONemployeeContractRelation));
      SIL_INVOLVEDPARTYemployeeRole $silINVOLVEDPARTYrelationshipManager := CAST(SIL_INVOLVEDPARTYemployeeRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYemployeeRole));
      $silINVOLVEDPARTYRELATIONemployeeContractRelation.employeeRole := $silINVOLVEDPARTYrelationshipManager;
      $silAccount.accountEmployees.addElement($silINVOLVEDPARTYRELATIONemployeeContractRelation);
      $silINVOLVEDPARTYrelationshipManager.party := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
      SIL_INVOLVEDPARTYindividualName $deskHeadName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
      $silINVOLVEDPARTYrelationshipManager.party.names.addElement($deskHeadName);
      LIB_User $deskHead := NEW(LIB_User, $cmnBusinessRelationship.kytProfile.generalInformation.businessAreaDeskHead);
      $silINVOLVEDPARTYrelationshipManager.id := $deskHead.getUserId();
      $deskHeadName.firstName := $deskHead.getFirstName();
      $deskHeadName.lastName := $deskHead.getLastName();
      $deskHeadName.fullName := $deskHead.getFullName();
   End
   INT_SILMappingCMNtoSILVariationFactory__selector().createSILAccount($cmnBusinessRelationship, $silAccount);
   /******** Portfolio Manager ************/
   $silAccount.portfolios := INT_SILMappingCMNtoSIL_v2.createSILPortfolios($cmnBusinessRelationship);
   Return $silAccount;
End]]></definition>
        </method>
        <method name="createSILAccountFunding" userId="pezzi" uuid="00000000-0ba9-00ea-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILAccountFunding'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILAccountFunding(CMN_BusinessRelationship $cmnBusinessRelationship, SIL_ACCOUNTaccountFunding $silAccountFunding := null) : SIL_ACCOUNTaccountFunding Begin
   If $silAccountFunding == null Then
      $silAccountFunding := CAST(SIL_ACCOUNTaccountFunding, CreateSkeletonDataClass(SIL_ACCOUNTaccountFunding));
   End
   IF($cmnBusinessRelationship.kytProfile.purposeOfAccount.expectedAccountSize != null, $silAccountFunding.expectedAmount := TODOUBLE($cmnBusinessRelationship.kytProfile.purposeOfAccount.expectedAccountSize));
   IF($cmnBusinessRelationship.kytProfile.purposeOfAccount.deadlineToFundAccount != null, $silAccountFunding.expectedAmountDeadline := DATEPARSE(TOSTRING($cmnBusinessRelationship.kytProfile.purposeOfAccount.deadlineToFundAccount), 'y', LIB_ConfigHelper.getDefaultLocale('en'), 'UTC'));
   IF($cmnBusinessRelationship.kytProfile.purposeOfAccount.comments != null, $silAccountFunding.comments := $cmnBusinessRelationship.kytProfile.purposeOfAccount.comments);
   IF(NotEmpty($cmnBusinessRelationship.kytProfile.initialFunding.getSILID()), $silAccountFunding.id := $cmnBusinessRelationship.kytProfile.initialFunding.getSILID());
   IF($cmnBusinessRelationship.kytProfile.initialFunding.fundsExplanation != null, $silAccountFunding.initialFundingExplanation := $cmnBusinessRelationship.kytProfile.initialFunding.fundsExplanation);
   //IF($cmnBusinessRelationship.kytProfile.initialOverallRiskAssessment.hasInitialFunding != null, $silAccountFunding.largePhysicalAssetDepositIndicator := $cmnBusinessRelationship.kytProfile.initialOverallRiskAssessment.hasInitialFunding);
   Return $silAccountFunding;
End]]></definition>
        </method>
        <method name="createSILAccountFundingTransfer" userId="pezzi" uuid="00000000-2969-92f5-0000-000000000000">
            <definition><![CDATA[StaticFunction createSILAccountFundingTransfer(CMN_BusinessRelationship $cmnBusinessRelationship, Indexed SIL_ORDERtransfer $silAccountFundingTransfers := null) : Indexed SIL_ORDERtransfer Begin
   If not LIB_Validator.validateNotEmptyIndexed($silAccountFundingTransfers) Then
      $silAccountFundingTransfers := NewIndexed(SIL_ORDERtransfer);
   End
   SIL_ORDERtransfer $silORDERtransfer;
   /********************* SOURCE OF FUNDS ***************************/
   If $cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsCashAmount != null Then
      $silORDERtransfer := INT_SILMappingCMNtoSIL_v2.createSILTransfer($cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsCashAmount, '6');
      If $silORDERtransfer != null Then
         IF(NotEmpty($cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsCashAmountId), $silORDERtransfer.id := $cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsCashAmountId);
         $silAccountFundingTransfers.addElement($silORDERtransfer);
      End
   End
   If $cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsPreciousMetalAmount != null Then
      $silORDERtransfer := INT_SILMappingCMNtoSIL_v2.createSILTransfer($cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsPreciousMetalAmount, '8');
      If $silORDERtransfer != null Then
         IF(NotEmpty($cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsPreciousMetalAmountId), $silORDERtransfer.id := $cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsPreciousMetalAmountId);
         $silAccountFundingTransfers.addElement($silORDERtransfer);
      End
   End
   If $cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsSecuritiesAmount != null Then
      $silORDERtransfer := INT_SILMappingCMNtoSIL_v2.createSILTransfer($cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsSecuritiesAmount, '9');
      If $silORDERtransfer != null Then
         IF(NotEmpty($cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsSecuritiesAmountId), $silORDERtransfer.id := $cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsSecuritiesAmountId);
         $silAccountFundingTransfers.addElement($silORDERtransfer);
      End
   End
   /********************* CHEQUE Transfers ***************************/
   CMN_KYTSourceOfFund $cmnKYTSourceOfFund;
   If LIB_Validator.validateNotEmptyIndexed($cmnBusinessRelationship.kytProfile.initialFunding.cheque) Then
      ForEach $cmnKYTSourceOfFund In $cmnBusinessRelationship.kytProfile.initialFunding.cheque Do
         //If $cmnKYTSourceOfFund.expectedAmount != 0.0 Then
         $silORDERtransfer := INT_SILMappingCMNtoSIL_v2.createSILTransfer($cmnKYTSourceOfFund.expectedAmount, '5', $cmnKYTSourceOfFund, $cmnBusinessRelationship);
         If $silORDERtransfer != null Then
            $silAccountFundingTransfers.addElement($silORDERtransfer);
         End
         //End
      End
   End
   /********************* WIRE Transfers ***************************/
   If LIB_Validator.validateNotEmptyIndexed($cmnBusinessRelationship.kytProfile.initialFunding.wireTransfers) Then
      ForEach $cmnKYTSourceOfFund In $cmnBusinessRelationship.kytProfile.initialFunding.wireTransfers Do
         $silORDERtransfer := INT_SILMappingCMNtoSIL_v2.createSILTransfer($cmnKYTSourceOfFund.expectedAmount, '3', $cmnKYTSourceOfFund, $cmnBusinessRelationship);
         If $silORDERtransfer != null Then
            $silAccountFundingTransfers.addElement($silORDERtransfer);
         End
      End
   End
   /********************* SECURITY Transfers ***************************/
   If LIB_Validator.validateNotEmptyIndexed($cmnBusinessRelationship.kytProfile.initialFunding.securities) Then
      ForEach $cmnKYTSourceOfFund In $cmnBusinessRelationship.kytProfile.initialFunding.securities Do
         $silORDERtransfer := INT_SILMappingCMNtoSIL_v2.createSILTransfer($cmnKYTSourceOfFund.expectedAmount, '4', $cmnKYTSourceOfFund, $cmnBusinessRelationship);
         If $silORDERtransfer != null Then
            $silAccountFundingTransfers.addElement($silORDERtransfer);
         End
      End
   End
   Return $silAccountFundingTransfers;
End]]></definition>
        </method>
        <method name="createSILAccountHolderRole" userId="pezzi" uuid="ffffffff-80b4-6b35-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILAccountHolderRole'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILAccountHolderRole(CMN_Party $cmnParty, CMN_BusinessRelationship $cmnBusinessRelationship, SIL_INVOLVEDPARTYinvolvedParty $silParty) : SIL_INVOLVEDPARTYinvolvedParty Begin
   If $silParty == null Then
      Return $silParty;
   End
   CMN_AssignedBRRole $accountHolderRole := CAST(CMN_AssignedBRRole, $cmnParty.getAssignedRole('ah'));
   If $accountHolderRole == null Then
      Return $silParty;
   End
   SIL_INVOLVEDPARTYaccountHolder $silRole := CAST(SIL_INVOLVEDPARTYaccountHolder, CreateSkeletonDataClass(SIL_INVOLVEDPARTYaccountHolder));
   IF($accountHolderRole.getBRRoleAttributes().isMain != null, $silRole.isPrimary := $accountHolderRole.getBRRoleAttributes().isMain);
   $silParty.roles.addElement($silRole);
   Return $silParty;
End]]></definition>
        </method>
        <method name="createSILAccountInvestment" userId="pezzi" uuid="00000000-3c77-91c6-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILAccountInvestment'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILAccountInvestment(CMN_BusinessRelationship $businessRelationship) : Indexed SIL_ACCOUNTaccountInvestment Begin
   Indexed SIL_ACCOUNTaccountInvestment $silAccountInvestments := NewIndexed(SIL_ACCOUNTaccountInvestment);
   If $businessRelationship != null && $businessRelationship.optionalServices != null Then
      CMN_AvailableOptionCategory $availableOptionCategory;
      String $optionID := '';
      $optionID := 'fiduciaryTimeDepositMandate';
      SIL_ACCOUNTaccountInvestment $silAccountInvestment := CAST(SIL_ACCOUNTaccountInvestment, CreateSkeletonDataClass(SIL_ACCOUNTaccountInvestment));
      SIL_ORDERfiduciary $silFiduciary := CAST(SIL_ORDERfiduciary, CreateSkeletonDataClass(SIL_ORDERfiduciary));
      $silAccountInvestment.fiduciary.addElement($silFiduciary);
      $silAccountInvestments.addElement($silAccountInvestment);
      If $businessRelationship.optionalServices.isOptionSelected($optionID) Then
         CMN_OptionalServiceFiducTimeDepMandate $optionalService := CAST(CMN_OptionalServiceFiducTimeDepMandate, $businessRelationship.optionalServices.getOptionalService($optionID));
         If NotEmpty($optionalService.fiduciaryAccount) Then
            ForEach String $fiduciaryAccount In SPLIT($optionalService.fiduciaryAccount, '|') Do
               $silFiduciary.executionSignatureTypes.addElement(LIST($fiduciaryAccount, 'CMN_OptionsFiduciaryDeposit', 'sil_Id'));
            End
         End
      End
      $optionID := 'fiduciaryDepositHighRisk';
      If $businessRelationship.optionalServices.isOptionSelected($optionID) Then
         CMN_OptionalServiceFiducTimeDepMandateHighRisk $optionalService := CAST(CMN_OptionalServiceFiducTimeDepMandateHighRisk, $businessRelationship.optionalServices.getOptionalService($optionID));
         $silFiduciary.counterpartyRole := CAST(SIL_INVOLVEDPARTYthirdPartyRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYthirdPartyRole));
         $silFiduciary.counterpartyRole.party := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
         SIL_INVOLVEDPARTYorganizationName $silOrganizationName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
         $silFiduciary.counterpartyRole.party.names.addElement($silOrganizationName);
         $silOrganizationName.businessName := $optionalService.counterPartyBank;
         $silFiduciary.fiduciaryAmount := $optionalService.amount;
         If NotEmpty($optionalService.address) Then
            SIL_INVOLVEDPARTYpostalAddress $silPostalAddress := CAST(SIL_INVOLVEDPARTYpostalAddress, CreateSkeletonDataClass(SIL_INVOLVEDPARTYpostalAddress));
            $silPostalAddress.fullAddress := $optionalService.address;
            $silFiduciary.counterpartyRole.party.addresses.addElement($silPostalAddress);
         End
         IF(NotEmpty($optionalService.currency), $silFiduciary.defaultCurrency := INT_SILMappingCMNtoSIL_v2.createSILCurrency($optionalService.currency));
         IF(NotEmpty($optionalService.duration), $silFiduciary.fiduciaryAmount := IF($optionalService.duration == 'determined', 'DET', 'UND'));
         If $optionalService.duration == 'determined' Then
            $silFiduciary.specifyDuration := $optionalService.durationDetermined;
            IF(NotEmpty($optionalService.renewableOption), $silFiduciary.renewableType := LIST($optionalService.renewableOption, 'CMN_OptionalFiduciaryDepositHighRisk', 'sil_Id'));
         End
      End
      $silAccountInvestment.investedInDerivativeProductIndicator := $businessRelationship.optionalServices.isOptionSelected('specialForwardTransaction');
   End
   Return $silAccountInvestments;
End]]></definition>
        </method>
        <method name="createSILAccountProfile" userId="pezzi" uuid="00000000-1797-c796-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILAccountProfile'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILAccountProfile(CMN_BusinessRelationship $cmnBusinessRelationship, SIL_ACCOUNTaccount $silACCOUNTaccount := null) : SIL_ACCOUNTaccount Begin
   If $silACCOUNTaccount == null Then
      $silACCOUNTaccount := CAST(SIL_ACCOUNTaccount, CreateSkeletonDataClass(SIL_ACCOUNTaccount));
   End
   If $cmnBusinessRelationship == null Then
      Return $silACCOUNTaccount;
   End
   If $silACCOUNTaccount.initialVisit == null Then
      $silACCOUNTaccount.initialVisit := CAST(SIL_ACCOUNTaccountInitialVisit, CreateSkeletonDataClass(SIL_ACCOUNTaccountInitialVisit));
   End
   If $silACCOUNTaccount.accountProfile == null Then
      $silACCOUNTaccount.accountProfile := CAST(SIL_ACCOUNTaccountProfile, CreateSkeletonDataClass(SIL_ACCOUNTaccountProfile));
   End
   If $cmnBusinessRelationship.kytProfile.visitation.hasCustomerVisitedPremises != null Then
      $silACCOUNTaccount.accountProfile.hasClientBeenVisited := $cmnBusinessRelationship.kytProfile.visitation.hasCustomerVisitedPremises;
   End
   If $cmnBusinessRelationship.kytProfile.referrals.isReferred != null Then
      $silACCOUNTaccount.accountProfile.isReferred := INT_SILMatchingTools_v2.matchCMNBooleanToSILYesNo($cmnBusinessRelationship.kytProfile.referrals.isReferred);
   End
   
   $silACCOUNTaccount.accountProfile.addtionalSafeNeeded := $cmnBusinessRelationship.kytProfile.purposeOfAccount.hasRelationshipSafeAttorneyOrHolder($cmnBusinessRelationship);
   If $cmnBusinessRelationship.kytProfile.visitation.hasCustomerVisitedPremises != null Then
      If $cmnBusinessRelationship.kytProfile.visitation.hasCustomerVisitedPremises Then
         If LIB_Validator.validateNotEmptyIndexed($cmnBusinessRelationship.kytProfile.visitation.placesFirstVisit) Then
            $silACCOUNTaccount.initialVisit.initialVisitLocations := NewIndexed(SIL_STATICLocation);
            ForEach String $location In $cmnBusinessRelationship.kytProfile.visitation.placesFirstVisit Do
               SIL_STATICLocation $silSTATIClocation := CAST(SIL_STATICLocation, CreateSkeletonDataClass(SIL_STATICLocation));
               If $location.equals('others') && NotEmpty($cmnBusinessRelationship.kytProfile.visitation.othersPlacesVisit) Then
                  $silSTATIClocation.name := $cmnBusinessRelationship.kytProfile.visitation.othersPlacesVisit;
               End
               $silSTATIClocation.type := LIST($location, 'CMN_PlaceOfFirstVisit__selector', 'sil_id', 'id');
               $silACCOUNTaccount.initialVisit.initialVisitLocations.addElement($silSTATIClocation);
            End
         End
         IF($cmnBusinessRelationship.kytProfile.visitation.descriptionFirstVisitNewClient != null, $silACCOUNTaccount.initialVisit.report := $cmnBusinessRelationship.kytProfile.visitation.descriptionFirstVisitNewClient);
         If LIB_Validator.validateNotEmptyIndexed($cmnBusinessRelationship.kytProfile.partners) Then
            $silACCOUNTaccount.initialVisit.contactActivities := NewIndexed(SIL_CONTACTACTIVITYvisitComplete);
            SIL_CONTACTACTIVITYvisitComplete $silCONTACTACTIVITYcontactActivity;
            ForEach CMN_Partner $cmnPartner In $cmnBusinessRelationship.kytProfile.partners Do
               If $cmnPartner.isVisited Then
                  $silCONTACTACTIVITYcontactActivity := CAST(SIL_CONTACTACTIVITYvisitComplete, CreateSkeletonDataClass(SIL_CONTACTACTIVITYvisitComplete));
                  SIL_INVOLVEDPARTYcustomerRole $silINVOLVEDPARTYinvolvedPartyRole := CAST(SIL_INVOLVEDPARTYcustomerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcustomerRole));
                  $silINVOLVEDPARTYinvolvedPartyRole.party := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
                  IF(NotEmpty($cmnPartner.id), $silINVOLVEDPARTYinvolvedPartyRole.party.id := $cmnPartner.id);
                  If NotEmpty($cmnPartner.getFullName()) Then
                     $silINVOLVEDPARTYinvolvedPartyRole.party.names := NewIndexed(SIL_INVOLVEDPARTYindividualName);
                     SIL_INVOLVEDPARTYindividualName $silINVOLVEDPARTYindividualName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
                     $silINVOLVEDPARTYindividualName.firstName := $cmnPartner.firstName;
                     $silINVOLVEDPARTYindividualName.lastName := $cmnPartner.lastName;
                     $silINVOLVEDPARTYindividualName.fullName := $cmnPartner.getFullName();
                     $silINVOLVEDPARTYinvolvedPartyRole.party.names[1] := $silINVOLVEDPARTYindividualName;
                  End
                  If NotEmpty($cmnPartner.role) Then
                     ForEach String $role In SPLIT($cmnPartner.role, ',') Do
                        If EMPTY($silINVOLVEDPARTYinvolvedPartyRole.type) Then
                           $silINVOLVEDPARTYinvolvedPartyRole.type := TRANSLATE($role, 'en');
                        Else
                           $silINVOLVEDPARTYinvolvedPartyRole.type := CONCAT($silINVOLVEDPARTYinvolvedPartyRole.type, ',', TRANSLATE($role, 'en'));
                        End
                     End
                  End
                  IF($cmnPartner.visitedDate != null, $silCONTACTACTIVITYcontactActivity.dateOfVisit := $cmnPartner.visitedDate);
                  $silCONTACTACTIVITYcontactActivity.responsibleRole := CAST(SIL_INVOLVEDPARTYemployeeRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYemployeeRole));
                  $silCONTACTACTIVITYcontactActivity.responsibleRole.party := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
                  $silCONTACTACTIVITYcontactActivity.responsibleRole.party.names := NewIndexed(SIL_INVOLVEDPARTYindividualName);
                  SIL_INVOLVEDPARTYindividualName $individualName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
                  IF($cmnPartner.visitedbyFirstName != null, $individualName.firstName := $cmnPartner.visitedbyFirstName);
                  IF($cmnPartner.visitedbyLastName != null, $individualName.lastName := $cmnPartner.visitedbyLastName);
                  $silCONTACTACTIVITYcontactActivity.responsibleRole.party.names.addElement($individualName);
                  $silCONTACTACTIVITYcontactActivity.visitedRoles := NewIndexed(SIL_INVOLVEDPARTYaccountPartyRole);
                  $silCONTACTACTIVITYcontactActivity.visitedRoles.addElement($silINVOLVEDPARTYinvolvedPartyRole);
                  $silACCOUNTaccount.initialVisit.contactActivities.addElement($silCONTACTACTIVITYcontactActivity);
               End
            End
         End
      Else
         IF($cmnBusinessRelationship.kytProfile.visitation.reasonCustomerNotVisited != null, $silACCOUNTaccount.initialVisit.nextVisitPlanDescription := $cmnBusinessRelationship.kytProfile.visitation.reasonCustomerNotVisited);
         IF($cmnBusinessRelationship.kytProfile.visitation.plannedFirstVisitDate != null, $silACCOUNTaccount.initialVisit.nextVisitDate := $cmnBusinessRelationship.kytProfile.visitation.plannedFirstVisitDate);
      End
   End
   /**** Variated property ****/
   INT_SILMappingCMNtoSILVariationFactory__selector().createSILAccountProfile($cmnBusinessRelationship, $silACCOUNTaccount);
   Return $silACCOUNTaccount;
End]]></definition>
        </method>
        <method name="createSILAccountPurpose" userId="pezzi" uuid="00000000-1ce5-3b0b-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILPurposeAccount'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILAccountPurpose(CMN_BusinessRelationship $cmnBusinessRelationship, SIL_ACCOUNTaccount $silAccount) : SIL_ACCOUNTaccount Begin
   If $silAccount == null Then
      $silAccount := CAST(SIL_ACCOUNTaccount, CreateSkeletonDataClass(SIL_ACCOUNTaccount));
   End
   If $cmnBusinessRelationship == null Then
      Return $silAccount;
   End
   /************** Puprpose of account *****************/
   $silAccount.accountPurposes := NewIndexed(SIL_ACCOUNTaccountPurpose);
   If LIB_Validator.validateNotEmptyIndexed($cmnBusinessRelationship.kytProfile.purposeOfAccount.purposeSelection) Then
      ForEach String $cmnAccountPurpose In $cmnBusinessRelationship.kytProfile.purposeOfAccount.purposeSelection Do
         SIL_ACCOUNTaccountPurpose $silAccountPurpose := CAST(SIL_ACCOUNTaccountPurpose, CreateSkeletonDataClass(SIL_ACCOUNTaccountPurpose));
         $silAccountPurpose.purposeType := INT_SILMatchingTools_v2.matchCMNIdToSILAccountPurposeId($cmnAccountPurpose);
         IF($cmnAccountPurpose == 'others', $silAccountPurpose.description := $cmnBusinessRelationship.kytProfile.purposeOfAccount.otherPurpose);
         $silAccount.accountPurposes.addElement($silAccountPurpose);
      End
   End
   INT_SILMappingCMNtoSILVariationFactory__selector().createSILAccountPurpose($cmnBusinessRelationship, $silAccount);
   Return $silAccount;
End]]></definition>
        </method>
        <method name="createSILAccountReferral" userId="pezzi" uuid="ffffffff-ec0c-fb50-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILAccountReferral'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILAccountReferral(CMN_BusinessRelationship $cmnBusinessRelationship, SIL_ACCOUNTaccountReferral $silAccountReferral := null) : SIL_ACCOUNTaccountReferral Begin
   If $silAccountReferral == null Then
      $silAccountReferral := CAST(SIL_ACCOUNTaccountReferral, CreateSkeletonDataClass(SIL_ACCOUNTaccountReferral));
   End
   /********************** Refered Partner ***************************/
   If $cmnBusinessRelationship.kytProfile.referrals != null Then
      CMN_KYTReferrals $referrals := $cmnBusinessRelationship.kytProfile.referrals;
      IF(NotEmpty($cmnBusinessRelationship.kytProfile.referrals.getSILID()), $silAccountReferral.id := $cmnBusinessRelationship.kytProfile.referrals.getSILID());
      $silAccountReferral.referredPartnerRoles := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyRole);
      SIL_INVOLVEDPARTYcustomerRole $silINVOLVEDPARTYinvolvedPartyRole := CAST(SIL_INVOLVEDPARTYcustomerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcustomerRole));
      $silAccountReferral.referredPartnerRoles.addElement($silINVOLVEDPARTYinvolvedPartyRole);
      If $referrals.isReferred and LIB_Validator.validateNotEmptyIndexed($cmnBusinessRelationship.kytProfile.partners) Then
         ForEach CMN_Partner $cmnpartner In $cmnBusinessRelationship.kytProfile.partners Do
            If $cmnpartner.isReferred() Then
               SIL_INVOLVEDPARTYindividual $silINVOLVEDPARTYindividual := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
               IF(NotEmpty($cmnpartner.id), $silINVOLVEDPARTYindividual.id := $cmnpartner.id);
               $silINVOLVEDPARTYindividual.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName);
               SIL_INVOLVEDPARTYindividualName $silINVOLVEDPARTYindividualName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
               IF($cmnpartner.firstName != null, $silINVOLVEDPARTYindividualName.firstName := $cmnpartner.firstName);
               IF($cmnpartner.lastName != null, $silINVOLVEDPARTYindividualName.lastName := $cmnpartner.lastName);
               IF($cmnpartner.getFullName() != null, $silINVOLVEDPARTYindividualName.fullName := $cmnpartner.getFullName());
               $silINVOLVEDPARTYindividual.names.addElement($silINVOLVEDPARTYindividualName);
               $silINVOLVEDPARTYinvolvedPartyRole.party := $silINVOLVEDPARTYindividual;
               //IF(NotEmpty($cmnpartner.id), $silINVOLVEDPARTYinvolvedPartyRole.id := $cmnpartner.id);
               If NotEmpty($cmnpartner.role) Then
                  ForEach String $role In SPLIT($cmnpartner.role, ',') Do
                     If EMPTY($silINVOLVEDPARTYinvolvedPartyRole.type) Then
                        $silINVOLVEDPARTYinvolvedPartyRole.type := TRANSLATE($role, 'en');
                     Else
                        $silINVOLVEDPARTYinvolvedPartyRole.type := CONCAT($silINVOLVEDPARTYinvolvedPartyRole.type, ',', TRANSLATE($role, 'en'));
                     End
                  End
               End
               Break;
            End
         End
      End
      SIL_INVOLVEDPARTYreferrerRole $silNVOLVEDPARTYreferrerRole := CAST(SIL_INVOLVEDPARTYreferrerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYreferrerRole));
      $silAccountReferral.referrerRole := $silNVOLVEDPARTYreferrerRole;
      If NotEmpty($referrals.isAnExistingPbrsClient6months) Then
         $silNVOLVEDPARTYreferrerRole.referredByType := '08';
         SIL_INVOLVEDPARTYindividual $silIndividual := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
         $silNVOLVEDPARTYreferrerRole.party := $silIndividual;
         $silNVOLVEDPARTYreferrerRole.party.existingCustomerIndicator := true;
      End
      If NotEmpty($referrals.referredType) Then
         $silNVOLVEDPARTYreferrerRole.referredByType := LIST($referrals.referredType, 'CMN_ReferralReferredParty', 'sil_id');
         /************************ Referring Party ***************************/
         If $referrals.isHSBCGroup() or $referrals.isHSBCGroupPrivateBanking() Then
            If NotEmpty($referrals.referredBy.hsbcGroupCountry) Then
               SIL_INVOLVEDPARTYorganization $silOrganization := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
               SIL_INVOLVEDPARTYincorporation $silIncorporation := CAST(SIL_INVOLVEDPARTYincorporation, CreateSkeletonDataClass(SIL_INVOLVEDPARTYincorporation));
               String $countryCode := LIST($referrals.referredBy.hsbcGroupCountry, 'CMN_ReferralEntity__selector', 'countryCode');
               $silIncorporation.incorporateCountry := INT_SILMappingCMNtoSIL_v2.createSILCountry($countryCode);
               $silOrganization.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName);
               SIL_INVOLVEDPARTYorganizationName $businessName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
               $silOrganization.id := LIST($referrals.referredBy.hsbcGroupCountry, 'CMN_ReferralEntity__selector', 'sil_id');
               $businessName.businessName := LIST($referrals.referredBy.hsbcGroupCountry, 'CMN_ReferralEntity__selector', 'sil_id');
               $businessName.fullName := LIST($referrals.referredBy.hsbcGroupCountry, 'CMN_ReferralEntity__selector', 'sil_id');
               $silOrganization.names.addElement($businessName);
               $silOrganization.documentationItems := NewIndexed(SIL_INVOLVEDPARTYdocumentationItem);
               $silOrganization.documentationItems.addElement($silIncorporation);
               $silNVOLVEDPARTYreferrerRole.party := $silOrganization;
               $silNVOLVEDPARTYreferrerRole.party.existingCustomerIndicator := false;
            End
         Else
            SIL_INVOLVEDPARTYindividual $silIndividual := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
            SIL_INVOLVEDPARTYindividualName $silIndividualName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
            IF($referrals.referredBy.firstName != null, $silIndividualName.firstName := $referrals.referredBy.firstName);
            IF($referrals.referredBy.surname != null, $silIndividualName.lastName := $referrals.referredBy.surname);
            IF($referrals.referredBy.getFullName() != null, $silIndividualName.fullName := $referrals.referredBy.getFullName());
            $silIndividual.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName);
            $silIndividual.names.addElement($silIndividualName);
            IF($referrals.referredBy.id != null, $silIndividual.id := $referrals.referredBy.id);
            IF($referrals.referredBy.relationship != null, $silNVOLVEDPARTYreferrerRole.relationshipWithReferredPartner := $referrals.referredBy.relationship);
            $silNVOLVEDPARTYreferrerRole.party := $silIndividual;
            $silNVOLVEDPARTYreferrerRole.party.existingCustomerIndicator := false;
         End
         If NotEmpty($referrals.referredBy.type) Then
            $silNVOLVEDPARTYreferrerRole.referredBySubType := LIST($referrals.referredBy.type, 'CMN_ReferredTypeByReferralsReferredType', 'sil_Id');
         End
         IF($referrals.referredBy.referredDate != null, $silNVOLVEDPARTYreferrerRole.knowsReferredPartnerSince := $referrals.referredBy.referredDate);
      End
   End
   Return $silAccountReferral;
End]]></definition>
        </method>
        <method name="createSILAccountRelation" userId="pezzi" uuid="ffffffff-f612-79af-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILAccountRelation'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILAccountRelation(CMN_BusinessRelationship $cmnBusinessRelationship, Indexed SIL_INVOLVEDPARTYcustomerRole $silINVOLVEDPARTYaccountPartyRoleList := null) : Indexed SIL_INVOLVEDPARTYcustomerRole Begin
   If not LIB_Validator.validateNotEmptyIndexed($silINVOLVEDPARTYaccountPartyRoleList) Then
      $silINVOLVEDPARTYaccountPartyRoleList := NewIndexed(SIL_INVOLVEDPARTYcustomerRole);
   End
   Record $iRecord;
   SIL_INVOLVEDPARTYcustomerRole $silAcountPartyRoler;
   //$silAccount.accountReferrals.isAnExistingCustomer := INT_SILMatchingTools_v2.matchCMNBooleanToSILYesNo($cmnParty.hasRelationshipHSBCGroup);
   /* Indexed Record $parties := NewIndexed(Record);
   ForEach $iRecord In RECORDS('SIL_BusinessRelationshipRoles__selector') Do
      String $roleID := TOSTRING($iRecord.getValue($cmnBusinessRelationship.useCase));
      If NotEmpty($roleID) Then
         ForEach CMN_Party $aParty In UNION($cmnBusinessRelationship.getRoleManager().getPartiesInRole($roleID), ERROR($cmnBusinessRelationship.getMainCustomer().getRoleManager($cmnBusinessRelationship).getPartiesInRole($roleID), null)) Do
            Record $record := NEW(Record);
            $record.setValue('role', $iRecord.getValue('id'));
            $record.setValue('roleID', $roleID);
            //$record.setValue('silRole', $roleID);
            $record.setValue('party', $aParty);
            $parties.addElement($record);
         End
      End
   End
   If LIB_Validator.validateNotEmptyIndexed($parties) Then*/
   ForEach CMN_Party $party In $cmnBusinessRelationship.getInvolvedParties() Do
      // String $silRole := TOSTRING($partyRecord.getValue('role'));
      //String $roleID := TOSTRING($partyRecord.getValue('roleID'));
      //LIB_Logger.tmpLog('mapping role: ' & $silRole & ', ' & $roleID);
      //CMN_Party $party := CAST(CMN_Party, $partyRecord.getValue('party'));
      Indexed CMN_AssignedRole $assignedRoles := $cmnBusinessRelationship.getRoleManager().getRolesOfParty($party);
      CMN_AssignedBRRole $assignedRole;
      ForEach CMN_AssignedRole $anAssignedRole In $assignedRoles Do
         String $roleID := $anAssignedRole.getRoleID();
         String $silRole := LIST($roleID, 'CMN_BRRoles', 'sil_Id');
         If ISA($anAssignedRole, CMN_AssignedBRRole) Then
            $assignedRole := CAST(CMN_AssignedBRRole, $anAssignedRole);
         End
         //End
         If NotEmpty($silRole) && ISA($anAssignedRole, CMN_AssignedBRRole) Then
            CMN_ApplicableRole $applicableRole := $cmnBusinessRelationship.getRoleManager().getApplicableRole($roleID);
            If $party.type.isHSBCEntity() Then
               CMN_LegalEntityHSBC $hsbcEntity := CAST(CMN_LegalEntityHSBC, $party);
               ForEach String $entity In $hsbcEntity.hsbcEntities Do
                  $silAcountPartyRoler := CAST(SIL_INVOLVEDPARTYcustomerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcustomerRole));
                  $silAcountPartyRoler.party := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
                  $silAcountPartyRoler.party.id := LIST($entity, 'CMN_HSBCEntities__selector', 'crmId');
                  $silAcountPartyRoler.type := $silRole;
                  $silINVOLVEDPARTYaccountPartyRoleList.addElement($silAcountPartyRoler);
               End
            Else
               $silAcountPartyRoler := CAST(SIL_INVOLVEDPARTYcustomerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcustomerRole));
               If $party.type.isPhysicalPerson() Then
                  SIL_INVOLVEDPARTYindividual $silIndividual := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
                  $silAcountPartyRoler.party := $silIndividual;
                  If $applicableRole != null && $assignedRole != null && $applicableRole.hasDetailSignaturePower() Then
                     $silAcountPartyRoler.signature := CAST(SIL_INVOLVEDPARTYsignature, CreateSkeletonDataClass(SIL_INVOLVEDPARTYsignature));
                     IF($assignedRole.getBRRoleAttributes().signaturePowerType != null, $silAcountPartyRoler.signature.signatureType := LIST($assignedRole.getBRRoleAttributes().signaturePowerType, 'CMN_SignatureType', 'sil_Id'));
                     If $assignedRole.getBRRoleAttributes().signaturePowerType == 'jointyby' Then
                        IF($assignedRole.getBRRoleAttributes().signPowJointbyNumberOfParties != null, $silAcountPartyRoler.signature.cardinality := ERROR(TOINTEGER($assignedRole.getBRRoleAttributes().signPowJointbyNumberOfParties), 0));
                     ElseIf $assignedRole.getBRRoleAttributes().signaturePowerType == 'jointlywith' Then
                        IF($assignedRole.getBRRoleAttributes().signPowJointlyWithPaties != null, $silAcountPartyRoler.signature.parties := $assignedRole.getBRRoleAttributes().signPowJointlyWithPaties);
                     End
                     If $roleID == 'authorisedRepresentative' Then
                        /*IF($assignedRole.getBRRoleAttributes().hasExistingList != null, $silIndividual.agreeSignatureListAgreementIndicator := $assignedRole.getBRRoleAttributes().hasExistingList);
                     If $assignedRole.getBRRoleAttributes().hasExistingList Then
                        IF($assignedRole.getBRRoleAttributes().signPowListExtListDateIssue != null, $silIndividual.signatureListIssuedDate := $assignedRole.getBRRoleAttributes().signPowListExtListDateIssue);
                        IF($assignedRole.getBRRoleAttributes().signPowListExtListNumParties != null, $silIndividual.signature.cardinality := TOINTEGER($assignedRole.getBRRoleAttributes().signPowListExtListNumParties));
                     End
                     IF($assignedRole.getBRRoleAttributes().hasSignatureList != null, $silIndividual.agreeSignatureMasterfileAgreementIndicator := $assignedRole.getBRRoleAttributes().hasSignatureList);
                     If $assignedRole.getBRRoleAttributes().hasSignatureList Then
                        IF($assignedRole.getBRRoleAttributes().signPowListBankListMaster != null, $silIndividual.numberOfMasterFile := TODOUBLE($assignedRole.getBRRoleAttributes().signPowListBankListMaster));
                     End*/
                     End
                  End
               ElseIf $party.type.isTrustOrFoundation() Then
                  $silAcountPartyRoler.party := CAST(SIL_INVOLVEDPARTYtrust, CreateSkeletonDataClass(SIL_INVOLVEDPARTYtrust));
               ElseIf $party.type.isLegalEntity() Then
                  SIL_INVOLVEDPARTYorganization $silOrganiation := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
                  $silAcountPartyRoler.party := $silOrganiation;
                  If $applicableRole != null && $assignedRole != null && $applicableRole.hasDetailSignaturePower() Then
                     $silAcountPartyRoler.signature := CAST(SIL_INVOLVEDPARTYsignature, CreateSkeletonDataClass(SIL_INVOLVEDPARTYsignature));
                     If $roleID != 'powerOfAdminMFO' Then
                        IF($assignedRole.getBRRoleAttributes().signaturePowerType != null, $silAcountPartyRoler.signature.signatureType := LIST($assignedRole.getBRRoleAttributes().signaturePowerType, 'CMN_SignatureType', 'sil_Id'));
                        If $assignedRole.getBRRoleAttributes().signaturePowerType == 'jointyby' Then
                           IF($assignedRole.getBRRoleAttributes().signPowJointbyNumberOfParties != null, $silAcountPartyRoler.signature.cardinality := ERROR(TOINTEGER($assignedRole.getBRRoleAttributes().signPowJointbyNumberOfParties), 0));
                        ElseIf $assignedRole.getBRRoleAttributes().signaturePowerType == 'jointlywith' Then
                           IF($assignedRole.getBRRoleAttributes().signPowJointlyWithPaties != null, $silAcountPartyRoler.signature.parties := $assignedRole.getBRRoleAttributes().signPowJointlyWithPaties);
                        End
                        If $roleID == 'powerOfAttorney' Then
                           IF($assignedRole.getBRRoleAttributes().hasAttachedList and $assignedRole.getBRRoleAttributes().individualListNames != null, $silAcountPartyRoler.signature.description := $assignedRole.getBRRoleAttributes().individualListNames);
                        End
                     End
                     If OR($roleID == 'powerOfAdminMFO', $roleID == 'powerOfAdmin', $roleID == 'powerOfAttorney', $roleID == 'authorizedSignature', $roleID == 'authorisedRepresentative') Then
                        IF($assignedRole.getBRRoleAttributes().hasExistingList != null, $silOrganiation.agreeSignatureListAgreementIndicator := $assignedRole.getBRRoleAttributes().hasExistingList);
                        If $assignedRole.getBRRoleAttributes().hasExistingList Then
                           IF($assignedRole.getBRRoleAttributes().signPowListExtListDateIssue != null, $silOrganiation.signatureListIssuedDate := $assignedRole.getBRRoleAttributes().signPowListExtListDateIssue);
                           IF($assignedRole.getBRRoleAttributes().signPowListExtListNumParties != null, $silOrganiation.signatureListPartyCount := $assignedRole.getBRRoleAttributes().signPowListExtListNumParties);
                        End
                        IF($assignedRole.getBRRoleAttributes().hasSignatureList != null, $silOrganiation.agreeSignatureMasterfileAgreementIndicator := $assignedRole.getBRRoleAttributes().hasSignatureList);
                        If $assignedRole.getBRRoleAttributes().hasSignatureList Then
                           IF($assignedRole.getBRRoleAttributes().signPowListBankListMaster != null, $silOrganiation.numberOfMasterFile := ERROR(TODOUBLE($assignedRole.getBRRoleAttributes().signPowListBankListMaster), 0.));
                           If ($cmnBusinessRelationship.useCase == 'trust' or $roleID != 'authorizedSignature') and $roleID != 'powerOfAttorney' and $roleID == 'authorisedRepresentative' Then
                              IF($assignedRole.getBRRoleAttributes().signPowListBankListNumInd != null, $silAcountPartyRoler.signature.cardinality := ERROR(TOINTEGER($assignedRole.getBRRoleAttributes().signPowListBankListNumInd), 0));
                           End
                        End
                     End
                  End
               Else
                  LIB_Logger.integrationError('UNKNOWN ENTITY TYPE: ' & TOSTRING($party));
               End
               If $silAcountPartyRoler.party != null Then
                  $silAcountPartyRoler.party.id := $party.getSILID();
               End
               IF(EMPTY($party.getSILID()), LIB_Logger.integrationWarn('Party has no SIL ID: ' & $party.getFullName()));
               $silAcountPartyRoler.type := $silRole;
               IF(EMPTY($silAcountPartyRoler.type), LIB_Logger.integrationWarn('Corresponding BR Role was not found: ' & $roleID));
               $silINVOLVEDPARTYaccountPartyRoleList.addElement($silAcountPartyRoler);
            End
         End
      End
   End
   Return $silINVOLVEDPARTYaccountPartyRoleList;
End]]></definition>
        </method>
        <method name="createSILAccountServices" userId="pezzi" uuid="00000000-6953-9011-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILClientServices'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILAccountServices(CMN_BusinessRelationship $businessRelationship) : Indexed SIL_RELATIONservice Begin
   Indexed SIL_RELATIONservice $silServices := NewIndexed(SIL_RELATIONservice);
   If $businessRelationship != null && $businessRelationship.optionalServices != null Then
      CMN_AvailableOptionCategory $availableOptionCategory;
      String $optionID := '';
      $optionID := 'safeDepositBox';
      If $businessRelationship.optionalServices.isOptionSelected($optionID) Then
         SIL_RELATIONsafeService $silSafeService := CAST(SIL_RELATIONsafeService, CreateSkeletonDataClass(SIL_RELATIONsafeService));
         CMN_OptionalServiceSafeDepositBox $optionalService := CAST(CMN_OptionalServiceSafeDepositBox, $businessRelationship.optionalServices.getOptionalService($optionID));
         $silSafeService.safeBoxNumber := $optionalService.safeBoxNumber;
         IF(NotEmpty($optionalService.building), $silSafeService.location := LIST($optionalService.building, 'CMN_safeBoxBuildings', 'sil_Id'));
         If NotEmpty($optionalService.option1) Then
            SIL_INVOLVEDPARTYinvolvedPartyRole $silRole := CAST(SIL_INVOLVEDPARTYcustomerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcustomerRole));
            SIL_INVOLVEDPARTYorganization $silOrg := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
            SIL_INVOLVEDPARTYorganizationName $silOrgName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
            $silOrgName.fullName := $optionalService.option1;
            $silOrg.names.addElement($silOrgName);
            $silRole.party := $silOrg;
            $silSafeService.authorizedParties.addElement($silRole);
         End
         IF(NotEmpty($optionalService.option2), $silSafeService.details := $optionalService.option2);
         $silSafeService.rentalAmount := $optionalService.price;
         $silSafeService.keyNumberHeldByCustomer := $optionalService.keysClient;
         $silSafeService.keyNumberHeldByBank := $optionalService.keysBank;
         IF(NotEmpty($optionalService.attorneySignature), $silSafeService.safeBoxAttorneyType := LIST($optionalService.attorneySignature, 'CMN_AttoneySignatureCard', 'sil_Id'));
         $silServices.addElement($silSafeService);
      End
      $optionID := 'directInternetAccessHSBCSite';
      If $businessRelationship.optionalServices.isOptionSelected($optionID) Then
         CMN_OptionalServiceDirectInternetAccess $optionalService := CAST(CMN_OptionalServiceDirectInternetAccess, $businessRelationship.optionalServices.getOptionalService($optionID));
         SIL_RELATIONinternetBankingService $silInternetService := CAST(SIL_RELATIONinternetBankingService, CreateSkeletonDataClass(SIL_RELATIONinternetBankingService));
         $silInternetService.dMDSId := $optionalService.clientID;
         $silServices.addElement($silInternetService);
         SIL_RELATIONglobalResearchService $silGlobalService := CAST(SIL_RELATIONglobalResearchService, CreateSkeletonDataClass(SIL_RELATIONglobalResearchService));
         SIL_INVOLVEDPARTYcustomerRole $silRole := CAST(SIL_INVOLVEDPARTYcustomerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcustomerRole));
         SIL_INVOLVEDPARTYindividual $silInd := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
         If NotEmpty($optionalService.rmName) Then
            SIL_INVOLVEDPARTYindividualName $silIndName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
            $silInd.names.addElement($silIndName);
            $silIndName.fullName := $optionalService.rmName;
            $silRole.party := $silInd;
            $silGlobalService.rmRoles.addElement($silRole);
         End
         If NotEmpty($optionalService.clientCountry) Then
            $silInd.addresses.addElement(INT_SILMappingCMNtoSIL_v2.createSILCountryAddress($optionalService.clientCountry, INT_SILEnumerations.getCountryTypeDomicile()));
         End
         If NotEmpty($optionalService.clientEmail) Then
            SIL_INVOLVEDPARTYemailAddress $silEmail := CAST(SIL_INVOLVEDPARTYemailAddress, CreateSkeletonDataClass(SIL_INVOLVEDPARTYemailAddress));
            $silEmail.email := $optionalService.clientEmail;
            $silEmail.type := INT_SILEnumerations.getEmailTypeDirectInternetAccess();
            $silInd.addresses.addElement($silEmail);
         End
         If NotEmpty($optionalService.researchProducts) Then
            ForEach String $researchProducts In SPLIT($optionalService.researchProducts, '|') Do
               $silGlobalService.researchProducts.addElement(LIST($researchProducts, 'CMN_OptionsResearchProducts', 'sil_Id'));
            End
         End
         $silGlobalService.elegibleType := LIST($optionalService.eligibility, 'CMN_OptionsDirectAccessEligibility', 'sil_Id');
         $silServices.addElement($silGlobalService);
      End
      $optionID := 'internetBanking';
      If $businessRelationship.optionalServices.isOptionSelected($optionID) Then
         CMN_OptionalServiceInternetBanking $optionalService := CAST(CMN_OptionalServiceInternetBanking, $businessRelationship.optionalServices.getOptionalService('internetBanking'));
         SIL_RELATIONinternetBankingService $silInternetService := CAST(SIL_RELATIONinternetBankingService, CreateSkeletonDataClass(SIL_RELATIONinternetBankingService));
         IF(NotEmpty($optionalService.hsbcPublicationsOption), $silInternetService.accessType := LIST($optionalService.hsbcPublicationsOption, 'CMN_InternetAccessHSBCPublications', 'sil_Id'));
         $silServices.addElement($silInternetService);
      End
   End
   Return $silServices;
End]]></definition>
        </method>
        <method name="createSILAccountTaxInformation" userId="pezzi" uuid="00000000-2929-21f4-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILAccountTaxInformation'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILAccountTaxInformation(CMN_BusinessRelationship $cmnBusinessRelationship) : SIL_INVOLVEDPARTYtaxInformation Begin
   If $cmnBusinessRelationship == null Then
      Return null;
   End
   SIL_INVOLVEDPARTYtaxInformation $silTaxInformation := CAST(SIL_INVOLVEDPARTYtaxInformation, CreateSkeletonDataClass(SIL_INVOLVEDPARTYtaxInformation));
   $silTaxInformation.taxDetails := NewIndexed(SIL_INVOLVEDPARTYtaxDetail);
   If $cmnBusinessRelationship.getMainCustomer() != null Then
      CMN_Party $cmnParty := $cmnBusinessRelationship.getMainCustomer();
      CMN_TaxTransparency $cmnTaxTransparency;
      If $cmnParty.type.isPhysicalPerson() Then
         CMN_RegulatoryProfilePhysical $cmnRegulatoryProfilePhysical := CAST(CMN_PhysicalPerson, $cmnParty).regulatoryProfile;
         $cmnTaxTransparency := $cmnRegulatoryProfilePhysical.taxTransparency;
      ElseIf $cmnParty.type.isLegalEntity() Then
         CMN_RegulatoryProfileLegal $cmnRegulatoryProfileLegal := CAST(CMN_LegalEntity, $cmnParty).regulatoryProfile;
         /******************************** Tax & Regulatory ****************************************************/
         $cmnTaxTransparency := $cmnRegulatoryProfileLegal.taxTransparency;
      End
      If $cmnTaxTransparency.openingAccountReason != null Then
         SIL_INVOLVEDPARTYtaxDetail $taxDetail := CAST(SIL_INVOLVEDPARTYtaxDetail, CreateSkeletonDataClass(SIL_INVOLVEDPARTYtaxDetail));
         $taxDetail.bookingCentreDissemblanceOpenReason := $cmnTaxTransparency.openingAccountReason;
         $silTaxInformation.taxDetails.addElement($taxDetail);
      End
   End
   /********** Tax Statements and for Tax Reclaim *********/
   INT_SILMappingCMNtoSILVariationFactory__selector().createSILAccountTaxInformation($cmnBusinessRelationship, $silTaxInformation);
   Return $silTaxInformation;
End]]></definition>
        </method>
        <method name="createSILAccountTransferActivity" userId="pezzi" uuid="ffffffff-d3b3-10cd-0000-000000000000">
            <definition><![CDATA[StaticFunction createSILAccountTransferActivity(CMN_BusinessRelationship $cmnBusinessRelationship, Indexed SIL_KYCaccountTransferActivity $silAccountTransferActivities := null) : Indexed SIL_KYCaccountTransferActivity Begin
   If $silAccountTransferActivities == null Then
      $silAccountTransferActivities := NewIndexed(SIL_KYCaccountTransferActivity);
   End
   If $cmnBusinessRelationship == null || $cmnBusinessRelationship.kytProfile.expectedAccountActivity == null Then
      Return $silAccountTransferActivities;
   End
   CMN_KYTExpectedAccountActivity $expectedAccountActivity := $cmnBusinessRelationship.kytProfile.expectedAccountActivity;
   SIL_KYCaccountTransferActivity $silAccountTransferActivity;
   CMN_KYTTransferActivity $kytTransferActivity;
   /*If not $expectedAccountActivity.hasExpectedInflowsOrOutflows Then
      Return $silAccountTransferActivities;
   End*/
   //If $expectedAccountActivity.hasExpectedInflowsOrOutflows Then
   //If $expectedAccountActivity.transferIn != null Then
   //If $silAccountTransferActivities.size() == 1 Then
   /******************** Account Activity IN ********************/
   $kytTransferActivity := $expectedAccountActivity.transferIn;
   If $kytTransferActivity != null Then
      /*** TOTAL IN ***/
      $silAccountTransferActivity := CAST(SIL_KYCaccountTransferInActivity, CreateSkeletonDataClass(SIL_KYCaccountTransferInActivity));
      $silAccountTransferActivity.averageAmount := TODOUBLE(LIB_Numbers.deformatThousand($kytTransferActivity.getAvgAmountPerTransaction()));
      $silAccountTransferActivity.totalAmount := $kytTransferActivity.getTotalAmountPerYear();
      $silAccountTransferActivity.totalNumberOfTransactions := $kytTransferActivity.getTotalTransNumberPerYear();
      $silAccountTransferActivity.type := 'TOTAL_TRANSFER_IN';
      IF($silAccountTransferActivity.type != null && NotEmpty($kytTransferActivity.silIds[$silAccountTransferActivity.type]), $silAccountTransferActivity.id := $kytTransferActivity.silIds[$silAccountTransferActivity.type]);
      $silAccountTransferActivities.addElement($silAccountTransferActivity);
      /*** PHYSICAL ***/
      $silAccountTransferActivity := CAST(SIL_KYCaccountTransferInActivity, CreateSkeletonDataClass(SIL_KYCaccountTransferInActivity));
      IF($expectedAccountActivity.inflowsOrOutflowsReason != null, $silAccountTransferActivity.reason := $expectedAccountActivity.inflowsOrOutflowsReason);
      $silAccountTransferActivity.transferHighRiskCountryIndicator := $expectedAccountActivity.isHighRiskOrSensitive;
      $silAccountTransferActivity.isAnyTransferExpected := $expectedAccountActivity.hasExpectedInflowsOrOutflows;
      $silAccountTransferActivity.cashTotalAmountInUSD := $kytTransferActivity.cashTotalAmount;
      $silAccountTransferActivity.cashNumberOfTransactions := $kytTransferActivity.cashTransNumber;
      $silAccountTransferActivity.securitiesTotalAmountInUSD := $kytTransferActivity.securitiesTotalAmount;
      $silAccountTransferActivity.securitiesNumberOfTransactions := $kytTransferActivity.securitiesTransNumber;
      $silAccountTransferActivity.preciousMetalTotalAmountInUSD := $kytTransferActivity.preciousMetalTotalAmount;
      $silAccountTransferActivity.preciousMetalNumberOfTransactions := $kytTransferActivity.preciousMetalTransNumber;
      IF($kytTransferActivity.purposeDescription != null, $silAccountTransferActivity.transactionPurpose := $kytTransferActivity.purposeDescription);
      $silAccountTransferActivity.totalAmount := $kytTransferActivity.getNonPhyAssetTotalAmount();
      $silAccountTransferActivity.totalNumberOfTransactions := $kytTransferActivity.getNonPhyAssetTransNumber();
      $silAccountTransferActivity.type := 'PHYSICAL';
      IF($silAccountTransferActivity.type != null && NotEmpty($kytTransferActivity.silIds[$silAccountTransferActivity.type]), $silAccountTransferActivity.id := $kytTransferActivity.silIds[$silAccountTransferActivity.type]);
      $silAccountTransferActivities.addElement($silAccountTransferActivity);
      /*** NON PHYSICAL ***/
      $silAccountTransferActivity := CAST(SIL_KYCaccountTransferInActivity, CreateSkeletonDataClass(SIL_KYCaccountTransferInActivity));
      $silAccountTransferActivity.reason := $expectedAccountActivity.inflowsOrOutflowsReason;
      $silAccountTransferActivity.transferHighRiskCountryIndicator := $expectedAccountActivity.isHighRiskOrSensitive;
      $silAccountTransferActivity.isAnyTransferExpected := $expectedAccountActivity.hasExpectedInflowsOrOutflows;
      $silAccountTransferActivity.chequeTotalAmountInUSD := $kytTransferActivity.chequeTotalAmount;
      $silAccountTransferActivity.chequeNumberOfTransactions := $kytTransferActivity.chequeTransNumber;
      If NotEmpty($kytTransferActivity.chequeCountries) Then
         $silAccountTransferActivity.chequeCountries := NewIndexed(SIL_STATICcountry);
         $silAccountTransferActivity.chequeCountries.addElement(INT_SILMappingCMNtoSIL_v2.createSILCountry($kytTransferActivity.chequeCountries));
      End
      $silAccountTransferActivity.securitiesTotalAmountInUSD := $kytTransferActivity.nonPhySecuritiesTotalAmount;
      $silAccountTransferActivity.securitiesNumberOfTransactions := $kytTransferActivity.nonPhySecuritiesTransNumber;
      If NotEmpty($kytTransferActivity.nonPhySecurietiesCountries) Then
         $silAccountTransferActivity.securitiesCountries := NewIndexed(SIL_STATICcountry);
         $silAccountTransferActivity.securitiesCountries.addElement(INT_SILMappingCMNtoSIL_v2.createSILCountry($kytTransferActivity.nonPhySecurietiesCountries));
      End
      $silAccountTransferActivity.wireTransferTotalAmountInUSD := $kytTransferActivity.wireTransfersTotalAmount;
      $silAccountTransferActivity.wireTransferNumberOfTransactions := $kytTransferActivity.wireTransfersTransNumber;
      If NotEmpty($kytTransferActivity.wireTransferCountries) Then
         $silAccountTransferActivity.wireTransferCountries := NewIndexed(SIL_STATICcountry);
         $silAccountTransferActivity.wireTransferCountries.addElement(INT_SILMappingCMNtoSIL_v2.createSILCountry($kytTransferActivity.wireTransferCountries));
      End
      IF($kytTransferActivity.nonPhyPurposeDescription != null, $silAccountTransferActivity.transactionPurpose := $kytTransferActivity.nonPhyPurposeDescription);
      $silAccountTransferActivity.type := 'NONPHYSICAL';
      IF($silAccountTransferActivity.type != null && NotEmpty($kytTransferActivity.silIds[$silAccountTransferActivity.type]), $silAccountTransferActivity.id := $kytTransferActivity.silIds[$silAccountTransferActivity.type]);
      $silAccountTransferActivities.addElement($silAccountTransferActivity);
   End
   /******************** Account Activity OUT ********************/
   $kytTransferActivity := $expectedAccountActivity.transferOut;
   If $kytTransferActivity != null Then
      /*** TOTAL IN ***/
      $silAccountTransferActivity := CAST(SIL_KYCaccountTransferOutActivity, CreateSkeletonDataClass(SIL_KYCaccountTransferOutActivity));
      $silAccountTransferActivity.averageAmount := TODOUBLE(LIB_Numbers.deformatThousand($kytTransferActivity.getAvgAmountPerTransaction()));
      $silAccountTransferActivity.totalAmount := $kytTransferActivity.getTotalAmountPerYear();
      $silAccountTransferActivity.totalNumberOfTransactions := $kytTransferActivity.getTotalTransNumberPerYear();
      $silAccountTransferActivity.type := 'TOTAL_TRANSFER_OUT';
      IF($silAccountTransferActivity.type != null && NotEmpty($kytTransferActivity.silIds[$silAccountTransferActivity.type]), $silAccountTransferActivity.id := $kytTransferActivity.silIds[$silAccountTransferActivity.type]);
      $silAccountTransferActivities.addElement($silAccountTransferActivity);
      /*** PHYSICAL ***/
      $silAccountTransferActivity := CAST(SIL_KYCaccountTransferOutActivity, CreateSkeletonDataClass(SIL_KYCaccountTransferOutActivity));
      $silAccountTransferActivity.reason := $expectedAccountActivity.inflowsOrOutflowsReason;
      $silAccountTransferActivity.transferHighRiskCountryIndicator := $expectedAccountActivity.isHighRiskOrSensitive;
      $silAccountTransferActivity.isAnyTransferExpected := $expectedAccountActivity.hasExpectedInflowsOrOutflows;
      $silAccountTransferActivity.cashTotalAmountInUSD := $kytTransferActivity.cashTotalAmount;
      $silAccountTransferActivity.cashNumberOfTransactions := $kytTransferActivity.cashTransNumber;
      $silAccountTransferActivity.securitiesTotalAmountInUSD := $kytTransferActivity.securitiesTotalAmount;
      $silAccountTransferActivity.securitiesNumberOfTransactions := $kytTransferActivity.securitiesTransNumber;
      $silAccountTransferActivity.preciousMetalTotalAmountInUSD := $kytTransferActivity.preciousMetalTotalAmount;
      $silAccountTransferActivity.preciousMetalNumberOfTransactions := $kytTransferActivity.preciousMetalTransNumber;
      IF($kytTransferActivity.purposeDescription != null, $silAccountTransferActivity.transactionPurpose := $kytTransferActivity.purposeDescription);
      $silAccountTransferActivity.totalAmount := $kytTransferActivity.getPhyAssetTotalAmount();
      $silAccountTransferActivity.totalNumberOfTransactions := $kytTransferActivity.getPhyAssetTransNumber();
      $silAccountTransferActivity.type := 'PHYSICAL';
      IF($silAccountTransferActivity.type != null && NotEmpty($kytTransferActivity.silIds[$silAccountTransferActivity.type]), $silAccountTransferActivity.id := $kytTransferActivity.silIds[$silAccountTransferActivity.type]);
      $silAccountTransferActivities.addElement($silAccountTransferActivity);
      /*** NON PHYSICAL ***/
      $silAccountTransferActivity := CAST(SIL_KYCaccountTransferOutActivity, CreateSkeletonDataClass(SIL_KYCaccountTransferOutActivity));
      $silAccountTransferActivity.reason := $expectedAccountActivity.inflowsOrOutflowsReason;
      $silAccountTransferActivity.transferHighRiskCountryIndicator := $expectedAccountActivity.isHighRiskOrSensitive;
      $silAccountTransferActivity.isAnyTransferExpected := $expectedAccountActivity.hasExpectedInflowsOrOutflows;
      $silAccountTransferActivity.chequeTotalAmountInUSD := $kytTransferActivity.chequeTotalAmount;
      $silAccountTransferActivity.chequeNumberOfTransactions := $kytTransferActivity.chequeTransNumber;
      If NotEmpty($kytTransferActivity.chequeCountries) Then
         $silAccountTransferActivity.chequeCountries := NewIndexed(SIL_STATICcountry);
         $silAccountTransferActivity.chequeCountries.addElement(INT_SILMappingCMNtoSIL_v2.createSILCountry($kytTransferActivity.chequeCountries));
      End
      $silAccountTransferActivity.securitiesTotalAmountInUSD := $kytTransferActivity.nonPhySecuritiesTotalAmount;
      $silAccountTransferActivity.securitiesNumberOfTransactions := $kytTransferActivity.nonPhySecuritiesTransNumber;
      If NotEmpty($kytTransferActivity.nonPhySecurietiesCountries) Then
         $silAccountTransferActivity.securitiesCountries := NewIndexed(SIL_STATICcountry);
         $silAccountTransferActivity.securitiesCountries.addElement(INT_SILMappingCMNtoSIL_v2.createSILCountry($kytTransferActivity.nonPhySecurietiesCountries));
      End
      $silAccountTransferActivity.wireTransferTotalAmountInUSD := $kytTransferActivity.wireTransfersTotalAmount;
      $silAccountTransferActivity.wireTransferNumberOfTransactions := $kytTransferActivity.wireTransfersTransNumber;
      If NotEmpty($kytTransferActivity.wireTransferCountries) Then
         $silAccountTransferActivity.wireTransferCountries := NewIndexed(SIL_STATICcountry);
         $silAccountTransferActivity.wireTransferCountries.addElement(INT_SILMappingCMNtoSIL_v2.createSILCountry($kytTransferActivity.wireTransferCountries));
      End
      IF($kytTransferActivity.nonPhyPurposeDescription != null, $silAccountTransferActivity.transactionPurpose := $kytTransferActivity.nonPhyPurposeDescription);
      $silAccountTransferActivity.type := 'NONPHYSICAL';
      IF($silAccountTransferActivity.type != null && NotEmpty($kytTransferActivity.silIds[$silAccountTransferActivity.type]), $silAccountTransferActivity.id := $kytTransferActivity.silIds[$silAccountTransferActivity.type]);
      $silAccountTransferActivities.addElement($silAccountTransferActivity);
   End
   Return $silAccountTransferActivities;
End]]></definition>
        </method>
        <method name="createSILAffiliate" userId="bernard" uuid="ffffffff-bcb0-d833-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILAffiliate'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILAffiliate(CMN_Party $cmnParty, Indexed SIL_INVOLVEDPARTYorganization $silAffiliates := null) : Indexed SIL_INVOLVEDPARTYorganization Begin
   If $silAffiliates == null Then
      $silAffiliates := NewIndexed(SIL_INVOLVEDPARTYorganization);
   End
   If $cmnParty == null || not ISA($cmnParty, CMN_LegalEntity) Then
      Return $silAffiliates;
   End
   /********************************** GENERAL FIELDS ********************************/
   CMN_LegalEntity $legalEntity := CAST(CMN_LegalEntity, $cmnParty);
   CMN_LegalEntityKycProfile $cmnLegalEntityKycProfile := $legalEntity.getKYCProfile();
   If LIB_Validator.validateNotEmptyIndexed($cmnLegalEntityKycProfile.sourceOfWealth.affiliate) Then
      CMN_KYCLegalAffiliate $cmnKYCLegalAffiliate;
      ForEach $cmnKYCLegalAffiliate In $cmnLegalEntityKycProfile.sourceOfWealth.affiliate Do
         SIL_INVOLVEDPARTYorganization $silAffiliate := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
         IF(NotEmpty($cmnKYCLegalAffiliate.getSILID()), $silAffiliate.id := $cmnKYCLegalAffiliate.getSILID());
         IF($cmnKYCLegalAffiliate.ownershipRate != null, $silAffiliate.parentOwnshipRatio := $cmnKYCLegalAffiliate.ownershipRate);
         IF($cmnKYCLegalAffiliate.noEmployeeDetails != null, $silAffiliate.noEmployeeReason := $cmnKYCLegalAffiliate.noEmployeeDetails);
         $silAffiliates.addElement($silAffiliate);
         SIL_INVOLVEDPARTYorganization $subSILOrganization := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
         $silAffiliate.isParentOrganizationOf.addElement($subSILOrganization);
         $subSILOrganization.addresses := NewIndexed(SIL_INVOLVEDPARTYaddress);
         If $cmnKYCLegalAffiliate.name != null Then
            $subSILOrganization.names := NewIndexed(SIL_INVOLVEDPARTYInvolvedPartyName);
            SIL_INVOLVEDPARTYorganizationName $subSilOrganizationName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
            $subSilOrganizationName.businessName := $cmnKYCLegalAffiliate.name;
            $subSILOrganization.names.addElement($subSilOrganizationName);
         End
         IF($cmnKYCLegalAffiliate.companyDescription != null, $subSILOrganization.businessDescription := $cmnKYCLegalAffiliate.companyDescription);
         IF($cmnKYCLegalAffiliate.numberOfEmployees != null, $subSILOrganization.numberOfEmployees := $cmnKYCLegalAffiliate.numberOfEmployees);
         INT_SILMatchingTools_v2.matchCMNMainBusinessToSILOrganization($cmnKYCLegalAffiliate.mainBusinessActivity, $subSILOrganization);
         If LIB_Validator.validateNotEmptyIndexed($cmnKYCLegalAffiliate.countryOfOperation) Then
            ForEach String $cmnKCountryOfOperationy In $cmnKYCLegalAffiliate.countryOfOperation Do
               If NotEmpty($cmnKCountryOfOperationy) Then
                  $subSILOrganization.addresses.addElement(INT_SILMappingCMNtoSIL_v2.createSILCountryAddress($cmnKCountryOfOperationy, INT_SILEnumerations.getCountryTypeOperation()));
               End
            End
         End
         If LIB_Validator.validateNotEmptyIndexed($cmnKYCLegalAffiliate.businessExposure) Then
            CMN_KycBusinessExposure $cmnKycBusinessExposure;
            ForEach $cmnKycBusinessExposure In $cmnKYCLegalAffiliate.businessExposure Do
               //1904 should not be mapped like 
               If NotEmpty($cmnKycBusinessExposure.businessExposure) Then
                  SIL_INVOLVEDPARTYcountryAddress $silCountryAddress := INT_SILMappingCMNtoSIL_v2.createSILCountryAddress($cmnKycBusinessExposure.businessExposure, INT_SILEnumerations.getCountryTypeExposure());
                  $silCountryAddress.percentage := $cmnKycBusinessExposure.businessExposureRate;
                  $subSILOrganization.addresses.addElement($silCountryAddress);
               End
            End
         End
         If $cmnKYCLegalAffiliate.hasGovernmentContractDeal != null Then
            IF($subSILOrganization.businessNatureDetails == null, $subSILOrganization.businessNatureDetails := NewIndexed(SIL_INVOLVEDPARTYbusinessNatureDetails));
            IF(not LIB_Validator.validateNotEmptyIndexed($subSILOrganization.businessNatureDetails), $subSILOrganization.businessNatureDetails[1] := CAST(SIL_INVOLVEDPARTYbusinessNatureDetails, CreateSkeletonDataClass(SIL_INVOLVEDPARTYbusinessNatureDetails)));
            $subSILOrganization.businessNatureDetails[1].isInvolvedInGovernmentContract := $cmnKYCLegalAffiliate.hasGovernmentContractDeal;
            If LIB_Validator.validateNotEmptyIndexed($cmnKYCLegalAffiliate.countryOfJuridiction) Then
               CMN_KycSowJuridictionCountry $cmnKycSowJuridictionCountry;
               ForEach $cmnKycSowJuridictionCountry In $cmnKYCLegalAffiliate.countryOfJuridiction Do
                  If NotEmpty($cmnKycSowJuridictionCountry.countryOfJuridiction) Then
                     IF($subSILOrganization.businessNatureDetails[1].businessCustomers == null, $subSILOrganization.businessNatureDetails[1].businessCustomers := NewIndexed(SIL_INVOLVEDPARTYbusinessCustomer));
                     SIL_INVOLVEDPARTYbusinessCustomer $silBusinessCustomer := CAST(SIL_INVOLVEDPARTYbusinessCustomer, CreateSkeletonDataClass(SIL_INVOLVEDPARTYbusinessCustomer));
                     $silBusinessCustomer.isGovernmental := true;
                     $silBusinessCustomer.country := INT_SILMappingCMNtoSIL_v2.createSILCountry($cmnKycSowJuridictionCountry.countryOfJuridiction);
                     IF($cmnKycSowJuridictionCountry.comments != null, $silBusinessCustomer.comment := $cmnKycSowJuridictionCountry.comments);
                     $subSILOrganization.businessNatureDetails[1].businessCustomers.addElement($silBusinessCustomer);
                  End
               End
            End
         End
      End
   End
   Return $silAffiliates;
End]]></definition>
        </method>
        <method name="createSILBusinessOrganization" userId="bernard" uuid="00000000-6707-626d-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILBusinessOrganization'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.cmnBusinessRelationship
*/
StaticFunction createSILBusinessOrganization(CMN_Party $cmnParty) : SIL_INVOLVEDPARTYorganization Begin
   If $cmnParty == null || not ISA($cmnParty, CMN_LegalEntity) Then
      Return null;
   End
   SIL_INVOLVEDPARTYorganization $silOrganization := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
   /********************************** GENERAL FIELDS ********************************/
   CMN_LegalEntity $legalEntity := CAST(CMN_LegalEntity, $cmnParty);
   CMN_LegalEntityKycProfile $legalEntityKycProfile := $legalEntity.getKYCProfile();
   SIL_INVOLVEDPARTYcustomerRole $customerRole := CAST(SIL_INVOLVEDPARTYcustomerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcustomerRole));
   $silOrganization.roles.addElement($customerRole);
   /*********************** NATURE OF BUSINESS & SOURCE OF WEALTH ***********************/
   If $cmnParty.type.isCommercialOperatingBusiness() Then
      If $legalEntityKycProfile.sourceOfWealth != null Then
         $silOrganization.businessNatureDetails.addElement(CAST(SIL_INVOLVEDPARTYbusinessNatureDetails, CreateSkeletonDataClass(SIL_INVOLVEDPARTYbusinessNatureDetails)));
         IF($legalEntityKycProfile.sourceOfWealth.companyDescription != null, $silOrganization.businessDescription := $legalEntityKycProfile.sourceOfWealth.companyDescription);
         If $legalEntityKycProfile.sourceOfWealth.originOfSow != null Then
            $silOrganization.originalWealthDescription := $legalEntityKycProfile.sourceOfWealth.originOfSow;
         End
         If $legalEntityKycProfile.sourceOfWealth.numberOfEmployees != null Then
            IF($legalEntityKycProfile.sourceOfWealth.numberOfEmployees > 0, $silOrganization.numberOfEmployees := $legalEntityKycProfile.sourceOfWealth.numberOfEmployees);
            IF($legalEntityKycProfile.sourceOfWealth.numberOfEmployees == 0, $silOrganization.noEmployeeReason := $legalEntityKycProfile.sourceOfWealth.noEmployeeDetails);
         End
         INT_SILMatchingTools_v2.matchCMNMainBusinessToSILOrganization($legalEntityKycProfile.sourceOfWealth.mainBusiness, $silOrganization);
         If LIB_Validator.validateNotEmptyIndexed($legalEntityKycProfile.sourceOfWealth.countryOfOperation) Then
            ForEach String $cmnKCountryOfOperationy In $legalEntityKycProfile.sourceOfWealth.countryOfOperation Do
               If NotEmpty($cmnKCountryOfOperationy) Then
                  $silOrganization.addresses.addElement(INT_SILMappingCMNtoSIL_v2.createSILCountryAddress($cmnKCountryOfOperationy, INT_SILEnumerations.getCountryTypeOperation()));
               End
            End
         End
         If LIB_Validator.validateNotEmptyIndexed($legalEntityKycProfile.sourceOfWealth.businessExposure) Then
            CMN_KycBusinessExposure $cmnKycBusinessExposure;
            ForEach $cmnKycBusinessExposure In $legalEntityKycProfile.sourceOfWealth.businessExposure Do
               If NotEmpty($cmnKycBusinessExposure.businessExposure) Then
                  SIL_INVOLVEDPARTYcountryAddress $silCountry := INT_SILMappingCMNtoSIL_v2.createSILCountryAddress($cmnKycBusinessExposure.businessExposure, INT_SILEnumerations.getCountryTypeExposure());
                  $silCountry.percentage := $cmnKycBusinessExposure.businessExposureRate;
                  $silOrganization.addresses.addElement($silCountry);
               End
            End
         End
         IF($legalEntityKycProfile.sourceOfWealth.isHighRiskJuridictionCountry != null, $silOrganization.highRiskCountryExposureNoHSBCPresenceIndicator := $legalEntityKycProfile.sourceOfWealth.isHighRiskJuridictionCountry);
         IF($legalEntityKycProfile.sourceOfWealth.hasBusActivitiesGreather50 != null, $silOrganization.isReliantOnKeyCustomerIndicator := $legalEntityKycProfile.sourceOfWealth.hasBusActivitiesGreather50);
         If $legalEntityKycProfile.sourceOfWealth.hasBusActivitiesGreather50 Then
            SIL_INVOLVEDPARTYinvolvedPartyRelationship $silRelation := CAST(SIL_INVOLVEDPARTYinvolvedPartyRelationship, CreateSkeletonDataClass(SIL_INVOLVEDPARTYinvolvedPartyRelationship));
            $silRelation.relationshipType := 'Key Customer';
            $customerRole.involvedPartyRelationships.addElement($silRelation);
            SIL_INVOLVEDPARTYorganization $silRelationOrganization := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
            $silRelation.party := $silRelationOrganization;
            If $legalEntityKycProfile.sourceOfWealth.keyCustomerName != null Then
               SIL_INVOLVEDPARTYorganizationName $silRelationOrganizationName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
               $silRelationOrganization.names.addElement($silRelationOrganizationName);
               $silRelationOrganizationName.businessName := $legalEntityKycProfile.sourceOfWealth.keyCustomerName;
            End
            If $legalEntityKycProfile.sourceOfWealth.industryName != null Then
               INT_SILMatchingTools_v2.matchCMNMainBusinessToSILOrganization($legalEntityKycProfile.sourceOfWealth.industryName, $silRelationOrganization);
            End
            IF($legalEntityKycProfile.sourceOfWealth.customerKeyType != null, $silRelationOrganization.entityType := $legalEntityKycProfile.sourceOfWealth.customerKeyType);
         End
         If $legalEntityKycProfile.sourceOfWealth.hasGovernmentContractDeal != null Then
            $silOrganization.businessNatureDetails[1].isInvolvedInGovernmentContract := $legalEntityKycProfile.sourceOfWealth.hasGovernmentContractDeal;
         End
         If $legalEntityKycProfile.sourceOfWealth.hasGovernmentContractDeal Then
            If LIB_Validator.validateNotEmptyIndexed($legalEntityKycProfile.sourceOfWealth.countryOfJuridiction) Then
               CMN_KycSowJuridictionCountry $cmnKycSowJuridictionCountry;
               ForEach $cmnKycSowJuridictionCountry In $legalEntityKycProfile.sourceOfWealth.countryOfJuridiction Do
                  SIL_INVOLVEDPARTYbusinessCustomer $silBusinessCustomer := CAST(SIL_INVOLVEDPARTYbusinessCustomer, CreateSkeletonDataClass(SIL_INVOLVEDPARTYbusinessCustomer));
                  $silOrganization.businessNatureDetails[1].businessCustomers.addElement($silBusinessCustomer);
                  IF(NotEmpty($cmnKycSowJuridictionCountry.countryOfJuridiction), $silBusinessCustomer.country := INT_SILMappingCMNtoSIL_v2.createSILCountry($cmnKycSowJuridictionCountry.countryOfJuridiction));
                  IF($cmnKycSowJuridictionCountry.comments != null, $silBusinessCustomer.relationshipDescription := $cmnKycSowJuridictionCountry.comments);
                  $silBusinessCustomer.isGovernmental := true;
               End
            End
         End
         If $legalEntityKycProfile.sourceOfWealth.customerType != null Then
            $silOrganization.legalForm := LIST($legalEntityKycProfile.sourceOfWealth.customerType, 'CMN_KycLegalCustomerType', 'sil_Id');
            IF($legalEntityKycProfile.sourceOfWealth.otherCustomerTypeDetail != null, $silOrganization.entityNature := $legalEntityKycProfile.sourceOfWealth.otherCustomerTypeDetail);
         End
         If $legalEntityKycProfile.sourceOfWealth.hasAffiliate != null Then
            $silOrganization.hasSubOrganizationIndicator := $legalEntityKycProfile.sourceOfWealth.hasAffiliate;
         End
      End
      If $legalEntity.structureDetails != null Then
         /******************************** Corporate Structure and Regulation ****************************************************/
         $silOrganization.structures := NewIndexed(SIL_INVOLVEDPARTYorganizationStructure);
         $silOrganization.structures.addElement(CAST(SIL_INVOLVEDPARTYorganizationStructure, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationStructure)));
         IF($legalEntity.structureDetails.isOperatingOrHoldingCompany != null, $silOrganization.structures[1].operationCompanyIndicator := $legalEntity.structureDetails.isOperatingOrHoldingCompany == 'operatingCompany');
         IF($legalEntity.structureDetails.isCustomerPartOfMastergroup != null, $silOrganization.structures[1].masterGroupCustomerIndicator := $legalEntity.structureDetails.isCustomerPartOfMastergroup);
         IF($legalEntity.structureDetails.nameMastergroup != null, $silOrganization.structures[1].masterGroupName := $legalEntity.structureDetails.nameMastergroup);
         ForEach String $countryCode In $legalEntity.structureDetails.countryOfOperationsAssets Do
            $silOrganization.addresses.addElement(INT_SILMappingCMNtoSIL_v2.createSILCountryAddress($countryCode, INT_SILEnumerations.getCountryTypeOperation()));
         End
         IF($legalEntity.structureDetails.numberBranches != null, $silOrganization.numberOfBranches := $legalEntity.structureDetails.numberBranches);
         IF($legalEntity.structureDetails.hasEquityListingHSBCExchange != null, $silOrganization.stockExchangeApprovalIndicator := $legalEntity.structureDetails.hasEquityListingHSBCExchange);
         IF($legalEntity.structureDetails.hasShareCapital != null, $silOrganization.hasShareCapitalIndicator := $legalEntity.structureDetails.hasShareCapital);
         IF($legalEntity.structureDetails.clarificationShareCapital != null, $silOrganization.hasShareCapitalDescription := $legalEntity.structureDetails.clarificationShareCapital);
         If $legalEntity.structureDetails.isCustControlledByParentComp != null Then
            $silOrganization.controlledByParentIndicator := $legalEntity.structureDetails.isCustControlledByParentComp;
            IF($legalEntity.structureDetails.percParentCompanyOwnership != null, $silOrganization.parentOwnshipRatio := $legalEntity.structureDetails.percParentCompanyOwnership);
            /********** Parent structure details ************/
            If $legalEntity.structureDetails.isCustControlledByParentComp Then
               $silOrganization.isSubOrganizationOf := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
               IF($legalEntity.structureDetails.percParentCompanyOwnership != null, $silOrganization.parentOwnshipRatio := $legalEntity.structureDetails.percParentCompanyOwnership);
               IF($legalEntity.structureDetails.isExistingClient != null, $silOrganization.isSubOrganizationOf.existingCustomerIndicator := $legalEntity.structureDetails.isExistingClient);
               IF(NotEmpty($legalEntity.structureDetails.uniqueIdentifier), $silOrganization.isSubOrganizationOf.id := $legalEntity.structureDetails.uniqueIdentifier);
               If $legalEntity.structureDetails.nameCustomerParent != null Then
                  $silOrganization.names := NewIndexed(SIL_INVOLVEDPARTYorganizationName);
                  $silOrganization.names[1] := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
                  CAST(SIL_INVOLVEDPARTYorganizationName, $silOrganization.names[1]).businessName := $legalEntity.structureDetails.nameCustomerParent;
               End
               If $legalEntity.structureDetails.countryIncorporation != null Then
                  $silOrganization.isSubOrganizationOf.documentationItems := NewIndexed(SIL_INVOLVEDPARTYdocumentationItem);
                  SIL_INVOLVEDPARTYincorporation $silIncorporation := CAST(SIL_INVOLVEDPARTYincorporation, CreateSkeletonDataClass(SIL_INVOLVEDPARTYincorporation));
                  $silOrganization.isSubOrganizationOf.documentationItems.addElement($silIncorporation);
                  $silIncorporation.incorporateCountry := INT_SILMappingCMNtoSIL_v2.createSILCountry($legalEntity.structureDetails.countryIncorporation);
               End
               $silOrganization.isSubOrganizationOf.regulatedBy := NewIndexed(SIL_INVOLVEDPARTYregulatoryBody);
               SIL_INVOLVEDPARTYregulatoryBody $silSubRegulatoryBody := CAST(SIL_INVOLVEDPARTYregulatoryBody, CreateSkeletonDataClass(SIL_INVOLVEDPARTYregulatoryBody));
               $silOrganization.isSubOrganizationOf.regulatedBy.addElement($silSubRegulatoryBody);
               If $legalEntity.structureDetails.nameRegulatoryBodyParent != null Then
                  $silSubRegulatoryBody.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName);
                  SIL_INVOLVEDPARTYorganizationName $silOrganizationName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
                  $silSubRegulatoryBody.names.addElement($silOrganizationName);
                  $silOrganizationName.businessName := $legalEntity.structureDetails.nameRegulatoryBodyParent;
               End
               If NotEmpty($legalEntity.structureDetails.countryRegulatoryBody) Then
                  SIL_INVOLVEDPARTYcountryAddress $silCountryAddress := INT_SILMappingCMNtoSIL_v2.createSILCountryAddress($legalEntity.structureDetails.countryRegulatoryBody, INT_SILEnumerations.getCountryTypeJuridiction());
                  $silSubRegulatoryBody.addresses.addElement($silCountryAddress);
               End
               IF($legalEntity.structureDetails.isFinancialInstitution != null, $silOrganization.isSubOrganizationOf.regulatedFinancialInstitutionIndicator := $legalEntity.structureDetails.isFinancialInstitution);
               IF($legalEntity.structureDetails.isParentListInStockExchange != null, $silOrganization.isSubOrganizationOf.listedStockExchangeIndicator := $legalEntity.structureDetails.isParentListInStockExchange);
               IF($legalEntity.structureDetails.nameExchangeParent != null, $silOrganization.isSubOrganizationOf.stockExchangeCode := $legalEntity.structureDetails.nameExchangeParent);
               INT_SILMatchingTools_v2.matchCMNMainBusinessToSILOrganization($legalEntity.structureDetails.mainBusinessActivity, $silOrganization.isSubOrganizationOf);
            End
         End
         If $legalEntity.structureDetails.financialInstitution != null Then
            /*** FINANCIAL INFORMATION ***/
            $silOrganization.regulatedBy := NewIndexed(SIL_INVOLVEDPARTYregulatoryBody);
            IF($legalEntity.structureDetails.financialInstitution.isRegFinancialInstitution != null, $silOrganization.regulatedFinancialInstitutionIndicator := $legalEntity.structureDetails.financialInstitution.isRegFinancialInstitution);
            SIL_INVOLVEDPARTYregulatoryBody $silRegulatoryBody := CAST(SIL_INVOLVEDPARTYregulatoryBody, CreateSkeletonDataClass(SIL_INVOLVEDPARTYregulatoryBody));
            $silOrganization.regulatedBy.addElement($silRegulatoryBody);
            If $legalEntity.structureDetails.financialInstitution.isRegFinancialInstitution != null Then
               $silRegulatoryBody.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName);
               SIL_INVOLVEDPARTYorganizationName $silOrganizationName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
               $silRegulatoryBody.names.addElement($silOrganizationName);
               $silOrganizationName.businessName := $legalEntity.structureDetails.financialInstitution.nameRegulatoryBody;
            End
            If NotEmpty($legalEntity.structureDetails.financialInstitution.countryRegulatoryBody) Then
               SIL_INVOLVEDPARTYcountryAddress $silCountryAddress := INT_SILMappingCMNtoSIL_v2.createSILCountryAddress($legalEntity.structureDetails.financialInstitution.countryRegulatoryBody, INT_SILEnumerations.getCountryTypeJuridiction());
               $silCountryAddress.country.highRiskJuridictionIndicator := $legalEntity.structureDetails.financialInstitution.isCountryNonHighRisk;
               $silRegulatoryBody.addresses.addElement($silCountryAddress);
            End
            IF($legalEntity.structureDetails.financialInstitution.isCountryMemberOfFATF != null, $silRegulatoryBody.strategicDeficiencyFATFIndicator := $legalEntity.structureDetails.financialInstitution.isCountryMemberOfFATF);
            IF($legalEntity.structureDetails.financialInstitution.regulatoryReferenceNumber != null, $silOrganization.regulatoryReferenceNumber := $legalEntity.structureDetails.financialInstitution.regulatoryReferenceNumber);
            IF($legalEntity.structureDetails.financialInstitution.hasCountryMeetingEUCriteria != null, $silRegulatoryBody.meetEUJurisdictionEquivalentIndicator := $legalEntity.structureDetails.financialInstitution.hasCountryMeetingEUCriteria);
            IF($legalEntity.structureDetails.financialInstitution.isPartyListedStockExchange != null, $silOrganization.listedStockExchangeIndicator := $legalEntity.structureDetails.financialInstitution.isPartyListedStockExchange);
            IF($legalEntity.structureDetails.financialInstitution.nameStockExchange != null, $silOrganization.stockExchangeCode := $legalEntity.structureDetails.financialInstitution.nameStockExchange);
            IF($legalEntity.structureDetails.financialInstitution.hasApprovedEquityExchange != null, $silOrganization.hasApprovedEquityListedOnHSBCIndicator := $legalEntity.structureDetails.financialInstitution.hasApprovedEquityExchange);
            IF($legalEntity.structureDetails.financialInstitution.hasInternationalFirm != null, $silOrganization.auditByInternationalAccountantIndicator := $legalEntity.structureDetails.financialInstitution.hasInternationalFirm);
            If LIB_Validator.validateNotEmptyIndexed($legalEntity.structureDetails.hasMeetFinancialCriteria) Then
               $silOrganization.financialCriteriaSatisfaction := NewIndexed(String);
               ForEach String $financialCriteria In $legalEntity.structureDetails.hasMeetFinancialCriteria Do
                  $silOrganization.financialCriteriaSatisfaction.addElement($financialCriteria);
               End
            End
            If LIB_Validator.validateNotEmptyIndexed($legalEntity.structureDetails.hasMeetNonFinancialCriteria) Then
               $silOrganization.nonFinancialCriteriaSatisfaction := NewIndexed(String);
               ForEach String $financialCriteria In $legalEntity.structureDetails.hasMeetNonFinancialCriteria Do
                  $silOrganization.nonFinancialCriteriaSatisfaction.addElement($financialCriteria);
               End
            End
            If $legalEntity.structureDetails.financialInstitution.nameAuditAccountingFirm != null Then
               SIL_INVOLVEDPARTYcustomerRole $silRole := CAST(SIL_INVOLVEDPARTYcustomerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcustomerRole));
               $silOrganization.roles.addElement($silRole);
               $silRole.involvedPartyRelationships := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyRelationship);
               $silRole.involvedPartyRelationships.addElement(CAST(SIL_INVOLVEDPARTYinvolvedPartyRelationship, CreateSkeletonDataClass(SIL_INVOLVEDPARTYinvolvedPartyRelationship)));
               $silRole.involvedPartyRelationships[1].relationshipType := 'AccountingAuditFirm';
               SIL_INVOLVEDPARTYorganization $silParty := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
               $silRole.party := $silParty;
               SIL_INVOLVEDPARTYorganizationName $silOrganizationName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
               $silOrganizationName.businessName := $legalEntity.structureDetails.financialInstitution.nameAuditAccountingFirm;
               $silParty.names := NewIndexed(SIL_INVOLVEDPARTYorganizationName);
               $silParty.names.addElement($silOrganizationName);
            End
         End
      End
   End
   /******************************** Nature Of Business ****************************************************/
   If OR($cmnParty.type.isPrivateInvestmentCompany(), $cmnParty.type.isTrustOrFoundation()) and $legalEntityKycProfile.businessNature != null Then
      IF($legalEntityKycProfile.businessNature.naturePurposeOfEntity != null, $silOrganization.entityNature := $legalEntityKycProfile.businessNature.naturePurposeOfEntity);
      IF($legalEntityKycProfile.businessNature.reasonsUseEntityStructure != null, $silOrganization.reasonForEntityStructure := $legalEntityKycProfile.businessNature.reasonsUseEntityStructure);
   End
   /******************************** Bearer Shares ****************************************************/
   If OR($cmnParty.type.isPrivateInvestmentCompany(), $cmnParty.type.isCommercialOperatingBusiness()) and $legalEntityKycProfile.bearerShares != null Then
      If $legalEntityKycProfile.bearerShares.isBearerSharesCapableCompany != null Then
         $silOrganization.hasIssuedBearerShares := $legalEntityKycProfile.bearerShares.isBearerSharesCapableCompany;
         If $legalEntityKycProfile.bearerShares.hasIBSCApprovedAtRRCSC != null Then
            SIL_INVOLVEDPARTYbearShareInformation $silBearShare := CAST(SIL_INVOLVEDPARTYbearShareInformation, CreateSkeletonDataClass(SIL_INVOLVEDPARTYbearShareInformation));
            $silBearShare.bearerSharesIBSCApprovalIndicator := $legalEntityKycProfile.bearerShares.hasIBSCApprovedAtRRCSC;
            If NotEmpty($legalEntityKycProfile.bearerShares.approvedCustodianName) Then
               SIL_INVOLVEDPARTYorganization $silCustodian := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
               SIL_INVOLVEDPARTYorganizationName $silCustodianName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
               $silCustodianName.businessName := $legalEntityKycProfile.bearerShares.approvedCustodianName;
               $silCustodian.names.addElement($silCustodianName);
               $silBearShare.custodians.addElement($silCustodian);
            End
            If NotEmpty($legalEntityKycProfile.bearerShares.RRCSCReferallOutcome) Then
               $silBearShare.RRCSCApprovalType := LIST($legalEntityKycProfile.bearerShares.RRCSCReferallOutcome, 'CMN_KYCRRCSCReferralOutcome', 'sil_Id');
            End
            $silOrganization.bearShares.addElement($silBearShare);
         End
      End
      IF($legalEntityKycProfile.bearerShares.isIBSCCompany != null, $silOrganization.isCapableOfIssuingBearerShares := $legalEntityKycProfile.bearerShares.isIBSCCompany);
      If $legalEntityKycProfile.bearerShares.hyperlinkPBTCs != null Then
         SIL_CMSdocument $silDocument := INT_SILMappingCMNtoSIL_v2.createSILDocument($legalEntityKycProfile.bearerShares.hyperlinkPBTCs, 'Bearer Share Document');
         If $silDocument != null Then
            $customerRole.documents.addElement($silDocument);
         End
      End
   End
   /******************************* Financial Information ************************/
   If $legalEntity.getKYCProfile().financialInformation != null Then
      IF($legalEntity.getKYCProfile().financialInformation.hasChangesToBusiness != null, $silOrganization.businessMaterialChangeIndicator := $legalEntity.getKYCProfile().financialInformation.hasChangesToBusiness);
      IF($legalEntity.getKYCProfile().financialInformation.hasChangesToBusiness && $legalEntity.getKYCProfile().financialInformation.changesToBusinessComment != null, $silOrganization.businessMaterialChangeDescription := $legalEntity.getKYCProfile().financialInformation.changesToBusinessComment);
   End
   Return $silOrganization;
End]]></definition>
        </method>
        <method name="createSILClientServices" userId="pezzi" uuid="00000000-5a01-fa23-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILClientServices'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILClientServices(CMN_BusinessRelationship $businessRelationship, CMN_Party $cmnParty) : Indexed SIL_RELATIONservice Begin
   Indexed SIL_RELATIONservice $silServices := NewIndexed(SIL_RELATIONservice);
   If $businessRelationship != null && $businessRelationship.optionalServices != null Then
      CMN_AvailableOptionCategory $availableOptionCategory;
      String $optionID := 'internetBanking';
      If $businessRelationship.optionalServices.isOptionSelected($optionID) Then
         CMN_OptionalServiceInternetBanking $optionalService := CAST(CMN_OptionalServiceInternetBanking, $businessRelationship.optionalServices.getOptionalService('internetBanking'));
         Indexed CMN_AssignedRole $roles := $cmnParty.getAssignedRoles();
         ForEach CMN_AssignedRole $assignedRole In $roles Do
            If ($assignedRole.getRoleID() == 'internetBanking') Then
               $optionalService := CAST(CMN_OptionalServiceInternetBanking, $businessRelationship.optionalServices.getOptionalService('internetBanking'));
               SIL_RELATIONinternetBankingService $silInternetService := CAST(SIL_RELATIONinternetBankingService, CreateSkeletonDataClass(SIL_RELATIONinternetBankingService));
               $silInternetService.authorityType := LIST(CAST(CMN_AssignedBRRole, $assignedRole).getBRRoleAttributes().internetBankingAuthority, 'CMN_InternetAuthorities__selector', 'sil_Id');
               If CAST(CMN_AssignedBRRole, $assignedRole).getBRRoleAttributes().internetBankingAuthority == 'linked' Then
                  $silInternetService.serviceId := CAST(CMN_AssignedBRRole, $assignedRole).getBRRoleAttributes().internetBASWGVNumber;
               End
               $silServices.addElement($silInternetService);
            End
         End
      End
   End
   Return $silServices;
End]]></definition>
        </method>
        <method name="createSILConnectedParties" userId="pezzi" uuid="00000000-7aad-6115-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILConnectedParties'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILConnectedParties(CMN_Party $cmnParty, CMN_BusinessRelationship $cmnBusinessRelationship := null, Indexed SIL_INVOLVEDPARTYinvolvedPartyRelationship $silPartyStructure := null) : Indexed SIL_INVOLVEDPARTYinvolvedPartyRelationship Begin
   If $silPartyStructure == null Then
      $silPartyStructure := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyRelationship);
   End
   If $cmnParty == null Then
      Return $silPartyStructure;
   End
   /******************************************* CONNECTED PARTIES SCREEN ********************************************/
   If $cmnBusinessRelationship != null Then
      ForEach $iRecord In RECORDS('CMN_PartyRoles') Do
         String $roleID := TOSTRING($iRecord.getValue('id'));
         Indexed CMN_Party $parties := $cmnParty.getInvolvedParties($cmnBusinessRelationship, $roleID);
         If LIB_Validator.validateNotEmptyIndexed($parties) && NotEmpty($roleID) Then
            IF($silPartyStructure == null, $silPartyStructure := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyRelationship));
            ForEach CMN_Party $party In $parties Do
               SIL_INVOLVEDPARTYinvolvedPartyRelationship $silINVOLVEDPARTYinvolvedPartyRelationship := CAST(SIL_INVOLVEDPARTYinvolvedPartyRelationship, CreateSkeletonDataClass(SIL_INVOLVEDPARTYinvolvedPartyRelationship));
               If $party.type.isPhysicalPerson() Then
                  CMN_PhysicalPerson $physicalPerson := CAST(CMN_PhysicalPerson, $party);
                  $silINVOLVEDPARTYinvolvedPartyRelationship.party := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
                  $silINVOLVEDPARTYinvolvedPartyRelationship.party.names := NewIndexed(SIL_INVOLVEDPARTYindividualName);
                  SIL_INVOLVEDPARTYindividualName $silIndividualName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
                  If $physicalPerson.lastName != null Then
                     $silIndividualName.lastName := $physicalPerson.lastName;
                  End
                  If $physicalPerson.firstName != null Then
                     $silIndividualName.firstName := $physicalPerson.firstName;
                  End
                  $silINVOLVEDPARTYinvolvedPartyRelationship.party.names.addElement($silIndividualName);
               ElseIf $party.type.isLegalEntity() Then
                  CMN_LegalEntity $legalEntity := CAST(CMN_LegalEntity, $party);
                  $silINVOLVEDPARTYinvolvedPartyRelationship.party := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
                  $silINVOLVEDPARTYinvolvedPartyRelationship.party.names := NewIndexed(SIL_INVOLVEDPARTYorganizationName);
                  SIL_INVOLVEDPARTYorganizationName $silOrganizationName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
                  If $legalEntity.companyName != null Then
                     $silOrganizationName.businessName := $legalEntity.companyName;
                  End
                  $silINVOLVEDPARTYinvolvedPartyRelationship.party.names.addElement($silOrganizationName);
               End
               /*String $relationshipRole := LIST($roleID, 'SIL_PartyRoles__selector', 'relationshipRole', 'id');
               If NotEmpty($relationshipRole) Then
                  $silINVOLVEDPARTYinvolvedPartyRelationship.relationshipRole := $relationshipRole;
               End*/
               String $relationshipType := LIST($roleID, 'CMN_PartyRoles', 'sil_Id', 'id');
               If NotEmpty($relationshipType) Then
                  $silINVOLVEDPARTYinvolvedPartyRelationship.relationshipType := $relationshipType;
               End
               If NotEmpty($party.getSILID()) Then
                  $silINVOLVEDPARTYinvolvedPartyRelationship.party.id := $party.getSILID();
               End
               $silPartyStructure.addElement($silINVOLVEDPARTYinvolvedPartyRelationship);
            End
         End
      End
   End
   Return $silPartyStructure;
End]]></definition>
        </method>
        <method name="createSILCountry" userId="pezzi" uuid="ffffffff-e47a-2bfc-0000-000000000000">
            <definition><![CDATA[/**
  Function to create a SIL_Country instance given a country code.
  @return SIL_STATICCountry instance.
*/
StaticFunction createSILCountry(String $countryCode) : SIL_STATICcountry Begin
   SIL_STATICcountry $country := CAST(SIL_STATICcountry, CreateSkeletonDataClass(SIL_STATICcountry));
   If EMPTY($countryCode) || EMPTY(LIST($countryCode, 'CMN_Countries__selector', 'description', 'id')) Then
      If EMPTY($countryCode) Then
         $countryCode := 'missing';
      End
      LIB_Logger.integrationWarn('[INT_SILMapping]: Unknown or missing country code found for country code: ' & $countryCode);
      Return $country;
   End
   $country.code := $countryCode;
   $country.name := TRANSLATE(LIST($countryCode, 'CMN_Countries__selector', 'description', 'id'), 'en');
   Return $country;
End]]></definition>
        </method>
        <method name="createSILCountryAddress" userId="pezzi" uuid="00000000-3147-d458-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILCountryAddress'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILCountryAddress(String $countryCode, String $countryType) : SIL_INVOLVEDPARTYcountryAddress Begin
   SIL_INVOLVEDPARTYcountryAddress $silCountryAddress := CAST(SIL_INVOLVEDPARTYcountryAddress, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcountryAddress));
   If EMPTY($countryCode) || EMPTY($countryType) Then
      LIB_Logger.integrationWarn('[INT_SILMapping]: Missing Country code or missing country type. Generating empty country address');
      Return $silCountryAddress;
   End
   $silCountryAddress.country := INT_SILMappingCMNtoSIL_v2.createSILCountry($countryCode);
   $silCountryAddress.countryType := $countryType;
   Return $silCountryAddress;
End]]></definition>
        </method>
        <method name="createSILCredit" userId="pezzi" uuid="00000000-0fc3-b1d3-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILCredit'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILCredit(CMN_BusinessRelationship $businessRelationship) : Indexed SIL_CREDITcredit Begin
   Indexed SIL_CREDITcredit $credits := NewIndexed(SIL_CREDITcredit);
   If $businessRelationship != null && $businessRelationship.optionalServices != null Then
      CMN_AvailableOptionCategory $availableOptionCategory;
      String $optionID := '';
      $optionID := 'generalAgreementTradeOperation';
      SIL_CREDITcredit $silCredit := CAST(SIL_CREDITcredit, CreateSkeletonDataClass(SIL_CREDITcredit));
      If $businessRelationship.optionalServices.isOptionSelected($optionID) Then
         $silCredit.documentCreditAgreementIndicator := true;
         CMN_OptionalServiceGenAgrTradeOper $optionalService := CAST(CMN_OptionalServiceGenAgrTradeOper, $businessRelationship.optionalServices.getOptionalService($optionID));
         IF($optionalService.agreementOn != null, $silCredit.documentCreditAgreementDate := $optionalService.agreementOn);
      Else
         $silCredit.documentCreditAgreementIndicator := false;
      End
      $credits.addElement($silCredit);
      $optionID := 'guaranteeLetter';
      $silCredit.letterOfCreditIndicator := $businessRelationship.optionalServices.isOptionSelected($optionID);
   End
   Return $credits;
End]]></definition>
        </method>
        <method name="createSILCurrency" userId="pezzi" uuid="ffffffff-e343-a86b-0000-000000000000">
            <definition><![CDATA[/**
  Create SIL_Currency instance based on its code
  @param $curCode 3 letter currency code
  @return Matching currency instance
*/
StaticFunction createSILCurrency(String $curCode) : SIL_STATICCurrency Begin
   SIL_STATICCurrency $currency := CAST(SIL_STATICCurrency, CreateSkeletonDataClass(SIL_STATICCurrency));
   If EMPTY($curCode) || EMPTY(LIST($curCode, 'CMN_Currencies__selector', 'shortName', 'id')) Then
      If EMPTY($curCode) Then
         $curCode := 'missing';
      End
      LIB_Logger.integrationWarn('[INT_SILMapping]: Unknown or missing currency code found for SIL_Currency ' & $curCode);
      Return $currency;
   End
   $currency.code := $curCode;
   $currency.name := LIST($curCode, 'CMN_Currencies__selector', 'fullName', 'id');
   Return $currency;
End]]></definition>
        </method>
        <method name="createSILCustomerRole" userId="pezzi" uuid="ffffffff-c8f9-50ce-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILCustomerRole'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILCustomerRole(CMN_Party $cmnParty, CMN_BusinessRelationship $cmnBusinessRelationship, SIL_INVOLVEDPARTYinvolvedParty $silParty) : SIL_INVOLVEDPARTYinvolvedParty Begin
   If $silParty == null Then
      Return $silParty;
   End
   SIL_INVOLVEDPARTYcustomerRole $customerRole := CAST(SIL_INVOLVEDPARTYcustomerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcustomerRole));
   $customerRole.customerRisks := NewIndexed(SIL_INVOLVEDPARTYcustomerRisk);
   $customerRole.preferences := NewIndexed(SIL_PREFERENCESpreferences);
   $customerRole.documents := NewIndexed(SIL_CMSdocument);
   $customerRole.references := NewIndexed(SIL_RELATIONreference);
   $customerRole.connectedParties := NewIndexed(SIL_INVOLVEDPARTYRELATIONparties);
   $customerRole.kycs := NewIndexed(SIL_KYCkyc);
   $customerRole.relations := NewIndexed(SIL_INVOLVEDPARTYRELATIONipRelation);
   $customerRole.customerClassifications := NewIndexed(SIL_CUSTOMERCLASSIFICATIONcustomerClassification);
   /******************************** CUSTOMER CLASSIFICATION ***************************************/
   SIL_CUSTOMERCLASSIFICATIONfccram $fccramCustomerClassification := CAST(SIL_CUSTOMERCLASSIFICATIONfccram, CreateSkeletonDataClass(SIL_CUSTOMERCLASSIFICATIONfccram));
   IF(NotEmpty($cmnParty.FCCRiskRating.customerFamily), $fccramCustomerClassification.customerFamily := LIST($cmnParty.FCCRiskRating.customerFamily, 'SIL_FCCRAMCustomerFamilies', 'id', 'cmn_description'));
   IF(NotEmpty($cmnParty.FCCRiskRating.customerType), $fccramCustomerClassification.customerType := LIST($cmnParty.FCCRiskRating.customerType, 'SIL_FCCRAMCustomerTypes', 'description', 'cmn_description'));
   IF($cmnBusinessRelationship != null and NotEmpty($cmnParty.legalEntityStructure), $fccramCustomerClassification.classification := LIST($cmnParty.legalEntityStructure, 'SIL_LegalEntityStructures', 'sil_Id'));
   If $cmnBusinessRelationship.partyIsCustomer($cmnParty) Then
      IF(NotEmpty($cmnParty.FCCRiskRating.newManualFCCRRCode), $fccramCustomerClassification.manualOverrideValue := LIST($cmnParty.FCCRiskRating.newManualFCCRRCode, 'SIL_FCCRCodes', 'sil_id'));
      IF(NotEmpty($cmnParty.FCCRiskRating.newCalculatedFCCRRCode), $fccramCustomerClassification.calculatedFCCRRCode := LIST($cmnParty.FCCRiskRating.newCalculatedFCCRRCode, 'SIL_FCCRCodes', 'sil_id'));
      IF(NotEmpty($cmnParty.FCCRiskRating.calculatedFCCRRCountryCode), $fccramCustomerClassification.calculatedFCCRRCountryCode := $cmnParty.FCCRiskRating.calculatedFCCRRCountryCode);
      IF(NotEmpty($cmnParty.FCCRiskRating.calculatedFCCRRBusinessOccCode), $fccramCustomerClassification.calculatedFCCRRBusinessOccupationCode := $cmnParty.FCCRiskRating.calculatedFCCRRBusinessOccCode);
      IF(NotEmpty($cmnParty.FCCRiskRating.calculatedFCCRRLegalStructCode), $fccramCustomerClassification.calculatedFCCRRLegalEntityStructureCode := $cmnParty.FCCRiskRating.calculatedFCCRRLegalStructCode);
      IF(NotEmpty($cmnParty.FCCRiskRating.calculatedFCCRRProductCode), $fccramCustomerClassification.calculatedFCCRRProductCode := $cmnParty.FCCRiskRating.calculatedFCCRRProductCode);
      /* If NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.fccrmLegalEntityStructure) Then
      $customerRole.legalFormFCCRAMCode := NewIndexed(SIL_INVOLVEDPARTYlegalEntityStructure);
      $customerRole.legalFormFCCRAMCode.addElement(LIST($cmnBusinessRelationship.kytProfile.generalInformation.fccrmLegalEntityStructure, 'SIL_LegalEntityStructures', 'description', 'id'));
      //$customerRole.legalFormFCCRAMCode.addElement($cmnBusinessRelationship.kytProfile.generalInformation.fccrmLegalEntityStructure);
   End*/
      If LIB_Validator.validateNotEmptyIndexed($cmnParty.FCCRiskRating.auditReasonCodes) Then
         $fccramCustomerClassification.auditReasonCodes := NewIndexed(String);
         $fccramCustomerClassification.auditReasonCodes.addAll($cmnParty.FCCRiskRating.auditReasonCodes);
      End
   End
   $customerRole.customerClassifications.addElement($fccramCustomerClassification);
   /********* DOCUMENT ***********/
   CMN_h