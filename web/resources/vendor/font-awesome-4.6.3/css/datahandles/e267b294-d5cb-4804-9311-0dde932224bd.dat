 <property name="maxElementsPerRow"/>
                <property name="targetElementPixelWidth"/>
                <property name="topLabelCutoff"/>
                <property name="validationExpression"/>
                <property name="validationMessage"/>
            </customContainer>
        </component>
        <component class="com.nm.sdk.data.pages.views.components.If" condition="$entityParties.size() > 0" id="244">
            <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutGroup" editorDescription="non fcrr Customer sumUp" id="121">
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutFullWidthElement" editorDescription="negative news" id="122">
                    <component autoLayout="true" breakpoint="500" class="com.nm.sdk.data.pages.views.components.Table" columnSpacing="0" id="123" maxWidth="-1" mobileStyle="list" rowSpacing="0">
                        <component class="com.nm.sdk.data.pages.views.components.Row" id="225" type="header">
                            <component align="left" class="com.nm.sdk.data.pages.views.components.Cell" id="226" valign="top">
                                <style>
                                    <property name="border-style" value="none solid none none"/>
                                    <property name="border-color" value="#CBCBCB"/>
                                    <property name="border" value="1px"/>
                                </style>
                                <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="227" inline="true" text="[LABEL:COB_tax.full.name]"/>
                            </component>
                            <component align="left" class="com.nm.sdk.data.pages.views.components.Cell" id="228" valign="top">
                                <style>
                                    <property name="border-style" value="none solid none none"/>
                                    <property name="border-color" value="#CBCBCB"/>
                                    <property name="border" value="1px"/>
                                </style>
                                <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="229" inline="true" text="[LABEL:COB_taxation.roles]"/>
                            </component>
                            <component align="left" class="com.nm.sdk.data.pages.views.components.Cell" id="256" valign="top">
                                <style>
                                    <property name="border-style" value="none solid none none"/>
                                    <property name="border-color" value="#CBCBCB"/>
                                    <property name="border" value="1px"/>
                                </style>
                                <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="257" inline="true" text="[LABEL:CMN_fcrrCalculation.question.is.the.party.scc]"/>
                            </component>
                            <component align="left" class="com.nm.sdk.data.pages.views.components.Cell" id="230" valign="top">
                                <style>
                                    <property name="border-style" value="none solid none none"/>
                                    <property name="border-color" value="#CBCBCB"/>
                                    <property name="border" value="1px"/>
                                </style>
                                <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="232" text="[LABEL:CMN_kyc.negative.facts.negative.news]"/>
                            </component>
                            <component align="left" class="com.nm.sdk.data.pages.views.components.Cell" id="233" valign="top">
                                <style>
                                    <property name="border-style" value="none solid none none"/>
                                    <property name="border-color" value="#CBCBCB"/>
                                    <property name="border" value="1px"/>
                                </style>
                                <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="235" text="[LABEL:COB_KycScreening.connected.party.compliance.legal.regulatory.issue]"/>
                            </component>
                            <component align="left" class="com.nm.sdk.data.pages.views.components.Cell" id="237" valign="top">
                                <style>
                                    <property name="border-style" value="none solid"/>
                                    <property name="border-color" value="#CBCBCB"/>
                                    <property name="border" value="1px"/>
                                </style>
                                <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="239" text="[LABEL:COB_KycScreening.has.complex.usual.structure]"/>
                            </component>
                            <component align="left" class="com.nm.sdk.data.pages.views.components.Cell" id="240" valign="top">
                                <style>
                                    <property name="border-style" value="none none none none"/>
                                    <property name="border-color" value="#CBCBCB"/>
                                    <property name="border" value="1px"/>
                                </style>
                                <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="242" text="[LABEL:CMN_kyc.government.contract.deal.government.body]"/>
                            </component>
                        </component>
                        <component class="com.nm.sdk.data.pages.views.components.Foreach" collection="$entityParties" collectionType="none" editorDescription="non FCRR (Customers SumUp) legal" id="119" iterationCounter="counter" type="CMN_LegalEntity" variable="party">
                            <component class="com.nm.sdk.data.pages.views.components.Script" code="$riskAssessment := $party.getKYCProfile().initialRiskAssessment" id="120" phase="always"/>
                            <component class="com.nm.sdk.data.pages.views.components.Row" id="150">
                                <component align="left" class="com.nm.sdk.data.pages.views.components.Cell" id="151" valign="top">
                                    <style>
                                        <property name="border-style" value="none solid none none"/>
                                        <property name="border-color" value="#CBCBCB"/>
                                        <property name="border" value="1px"/>
                                    </style>
                                    <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="152" text="=$party.getFullName()"/>
                                </component>
                                <component align="left" class="com.nm.sdk.data.pages.views.components.Cell" id="153" valign="top">
                                    <style>
                                        <property name="border-style" value="none solid none none"/>
                                        <property name="border-color" value="#CBCBCB"/>
                                        <property name="border" value="1px"/>
                                    </style>
                                    <component class="com.nm.sdk.data.pages.views.components.Include" id="155" screenId="CMN_IncludePartyRoles">
                                        <parameterAssignments>
                                            <parameterAssignment expression="$party" variable="party"/>
                                            <parameterAssignment expression="true" variable="layoutHorizontally"/>
                                        </parameterAssignments>
                                    </component>
                                </component>
                                <component align="left" class="com.nm.sdk.data.pages.views.components.Cell" id="258" valign="top">
                                    <style>
                                        <property name="border-style" value="none solid none none"/>
                                        <property name="border-color" value="#CBCBCB"/>
                                        <property name="border" value="1px"/>
                                    </style>
                                    <component class="com.nm.sdk.data.pages.views.components.Include" id="260" screenId="CMN_IncludeIndexStatusDisplay">
                                        <parameterAssignments>
                                            <parameterAssignment expression="Return TOSTRING($party.kycProfile.pepSCCDetails.isPartyScc)" variable="indiciaStatus"/>
                                        </parameterAssignments>
                                    </component>
                                </component>
                                <component align="left" class="com.nm.sdk.data.pages.views.components.Cell" id="156" valign="top">
                                    <style>
                                        <property name="border-style" value="none solid none none"/>
                                        <property name="border-color" value="#CBCBCB"/>
                                        <property name="border" value="1px"/>
                                    </style>
                                    <component class="com.nm.sdk.data.pages.views.components.Include" id="158" screenId="CMN_IncludeIndexStatusDisplay">
                                        <parameterAssignments>
                                            <parameterAssignment expression="TOSTRING($riskAssessment.isSubjectToNegativeNews)" variable="indiciaStatus"/>
                                        </parameterAssignments>
                                    </component>
                                </component>
                                <component align="left" class="com.nm.sdk.data.pages.views.components.Cell" id="159" valign="top">
                                    <style>
                                        <property name="border-style" value="none solid none none"/>
                                        <property name="border-color" value="#CBCBCB"/>
                                        <property name="border" value="1px"/>
                                    </style>
                                    <component class="com.nm.sdk.data.pages.views.components.Include" id="161" screenId="CMN_IncludeIndexStatusDisplay">
                                        <parameterAssignments>
                                            <parameterAssignment expression="TOSTRING($riskAssessment.hasComplianceLegalRegIssues)" variable="indiciaStatus"/>
                                        </parameterAssignments>
                                    </component>
                                </component>
                                <component align="left" class="com.nm.sdk.data.pages.views.components.Cell" id="169" valign="top">
                                    <style>
                                        <property name="border-style" value="none solid none none"/>
                                        <property name="border-color" value="#CBCBCB"/>
                                        <property name="border" value="1px"/>
                                    </style>
                                    <component class="com.nm.sdk.data.pages.views.components.Include" id="171" screenId="CMN_IncludeIndexStatusDisplay">
                                        <parameterAssignments>
                                            <parameterAssignment expression="TOSTRING($riskAssessment.hasComplexUnusualStructure)" variable="indiciaStatus"/>
                                        </parameterAssignments>
                                    </component>
                                </component>
                                <component align="left" class="com.nm.sdk.data.pages.views.components.Cell" id="172" valign="top">
                                    <style>
                                        <property name="border-style" value="none none none none"/>
                                        <property name="border-color" value="#CBCBCB"/>
                                        <property name="border" value="1px"/>
                                    </style>
                                    <component class="com.nm.sdk.data.pages.views.components.Include" id="174" screenId="CMN_IncludeIndexStatusDisplay">
                                        <parameterAssignments>
                                            <parameterAssignment expression="TOSTRING($riskAssessment.hasInvolveGovContract)" variable="indiciaStatus"/>
                                        </parameterAssignments>
                                    </component>
                                </component>
                            </component>
                        </component>
                    </component>
                </customContainer>
                <property name="groupHasLayout" value="true"/>
                <property name="groupTitle" value="Legal Entities"/>
                <property name="inheritAllParentProperties" value="true"/>
                <property name="labelWidthPercentage"/>
                <property name="labelWidthPixels"/>
                <property name="labelWidthType"/>
                <property name="maxElementPixelWidth"/>
                <property name="maxElementsPerRow"/>
                <property name="targetElementPixelWidth"/>
                <property name="topLabelCutoff"/>
                <property name="validationExpression"/>
                <property name="validationMessage"/>
            </customContainer>
        </component>
    </view>
</screen>

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             1,901,425,0
<?xml version="1.0" encoding="UTF-8"?>
<object xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="object.xsd">
    <id>COB_document.US12Facts.title</id>
    <uuid>d0cafb15-f97e-4472-943e-b9fff70b45b6</uuid>
    <type>Label</type>
    <name/>
    <description/>
    <creator>bernard</creator>
    <creationTime>1467202577027</creationTime>
    <modifier>30039678</modifier>
    <modificationTime>1473882153892</modificationTime>
    <active>true</active>
    <versionUuid>8525fdb9-95a0-4bce-bab5-e2f752e9ffe5</versionUuid>
    <parentVersionUuid>2aa97f19-044a-4f48-900d-4266f0d6654e</parentVersionUuid>
    <timestamp>1475260129806</timestamp>
    <systemId>HSBC COB US DEV</systemId>
    <copyOfUuid>8518aabe-f584-4a37-9163-6337c4a9430f</copyOfUuid>
    <committed>true</committed>
    <deleted>false</deleted>
    <userId>magloire</userId>
    <metaData/>
</object>

<?xml version="1.0" encoding="UTF-8"?>
<label version="1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="label.xsd">
    <text language="ch">Facts</text>
    <text language="de">Facts</text>
    <text language="en">Facts</text>
    <text language="fr">Facts</text>
    <text language="it">Facts</text>
    <text language="pt">Facts</text>
    <text language="sp">Facts</text>
</label>

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    1,932,430,0
<?xml version="1.0" encoding="UTF-8"?>
<object xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="object.xsd">
    <id>CMN_IncludeAccompanier.accompanier.relationship</id>
    <uuid>c6417230-4ddb-4098-8804-c0b499870c3b</uuid>
    <type>Label</type>
    <name>CMN_IncludeAccompanier.accompanier.relationship</name>
    <description/>
    <creator>segafredo</creator>
    <creationTime>1473665609611</creationTime>
    <modifier>segafredo</modifier>
    <modificationTime>1473665716927</modificationTime>
    <active>true</active>
    <versionUuid>46a76043-ed08-4bc9-afd7-5e80bdc7dc09</versionUuid>
    <parentVersionUuid/>
    <timestamp>1475260129806</timestamp>
    <systemId>h-global-predev.appway.com</systemId>
    <copyOfUuid>0f6c41da-7791-463f-af1a-c4984d4330eb</copyOfUuid>
    <committed>true</committed>
    <deleted>false</deleted>
    <userId>magloire</userId>
    <metaData/>
</object>

<?xml version="1.0" encoding="UTF-8"?>
<label version="1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="label.xsd">
    <text language="de">Relationship</text>
    <text language="en">Relationship</text>
    <text language="fr">Relationship</text>
    <text language="it">Relationship</text>
    <text language="pt">Relationship</text>
    <text language="sp">Relationship</text>
</label>

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                1,1047,13587,2
<?xml version="1.0" encoding="UTF-8"?>
<object xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="object.xsd">
    <id>CMN_LifeInsPolicyHolderDE__CH</id>
    <uuid>09d50792-06ba-4064-b33b-07456180d2c3</uuid>
    <type>PdfOutput</type>
    <name/>
    <description/>
    <creator>kamal</creator>
    <creationTime>1313503784085</creationTime>
    <modifier>12042666-CH00</modifier>
    <modificationTime>1474622827302</modificationTime>
    <active>true</active>
    <versionUuid>6265b718-b80f-4270-8d46-b7f913672d34</versionUuid>
    <parentVersionUuid>12f0f5b2-827e-4459-bf57-a392df3add57</parentVersionUuid>
    <timestamp>1475260129806</timestamp>
    <systemId>HSBC COB CH DIT (Integrated)</systemId>
    <copyOfUuid>a3e698cc-6f3c-49c7-a155-55f834c480f6</copyOfUuid>
    <committed>true</committed>
    <deleted>false</deleted>
    <userId>magloire</userId>
    <metaData>
        <property name="Refactoring-ChangeID" value="LifeIns_PolicyHolder_DE>CMN_LifeInsPolicyHolderDE__CH"/>
    </metaData>
</object>

<?xml version="1.0" encoding="UTF-8"?>
<outputform version="1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="pdfoutput.xsd">
    <parameterDefinitions/>
    <originalfile>LifeIns_PolicyHolder_DE.pdf</originalfile>
    <sourcefileversion/>
    <languageid>de</languageid>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
    <outputformpage>
        <rotation>0</rotation>
        <visibility/>
        <replicationstrategy>0</replicationstrategy>
    </outputformpage>
</outputform>

pdfFile=2052adb3-1f21-47d7-917b-b61eaaea9c94
pdffile=2052adb3-1f21-47d7-917b-b61eaaea9c94
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           1,913,34266,0
<?xml version="1.0" encoding="UTF-8"?>
<object xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="object.xsd">
    <id>COB_PartiesProfilingSections</id>
    <uuid>cf274524-9f9f-40dd-afdc-9f38ebade7f5</uuid>
    <type>Rule</type>
    <name/>
    <description/>
    <creator>bellanca</creator>
    <creationTime>1440771252003</creationTime>
    <modifier>segafredo</modifier>
    <modificationTime>1474022241340</modificationTime>
    <active>true</active>
    <versionUuid>d04c3b1c-3599-429d-90c8-03933f7a882b</versionUuid>
    <parentVersionUuid>50f35212-8334-4beb-81d7-4618c94d6bdc</parentVersionUuid>
    <timestamp>1475260129806</timestamp>
    <systemId>h-global-predev.appway.com</systemId>
    <copyOfUuid>655aec6b-45d3-469a-906e-a15045c3b180</copyOfUuid>
    <committed>true</committed>
    <deleted>false</deleted>
    <userId>magloire</userId>
    <metaData/>
</object>

<?xml version="1.0" encoding="UTF-8"?>
<decisiontree xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="decisiontree.xsd">
    <definition>
        <scope active="true" name="" showChildren="true">
            <parameterdefinition collectiontype="none" defaultexpression="" description="" mode="inherited" type="CMN_Party" variable="party"/>
            <parameterdefinition collectiontype="none" defaultexpression="" description="" mode="inherited" type="COB_Root" variable="root"/>
            <parameterdefinition collectiontype="none" defaultexpression="CMN_BusinessRelationship.getKYCLevelForParty($party)" description="" mode="local" type="String" variable="kycLevel"/>
            <parameterdefinition collectiontype="none" defaultexpression="$root.getProcessHistory().currentStageIsCOBTeamPreValidationOrAfter()" description="" mode="local" type="Boolean" variable="cobTeamPreValidationOrAfter"/>
            <parameterdefinition collectiontype="none" defaultexpression="$root.getProcessHistory().currentStageIsRMBookletOrAfter()" description="" mode="local" type="Boolean" variable="rmBookletPrinting"/>
            <parameterdefinition collectiontype="none" defaultexpression="$root.getProcessHistory().currentStageIsFinalScreening()" description="" mode="local" type="Boolean" variable="finalScreening"/>
            <parameterdefinition collectiontype="none" defaultexpression="$root.getProcessHistory().currentStageIsFrontReview()" description="" mode="local" type="Boolean" variable="isStageFrontReview"/>
            <parameterdefinition collectiontype="none" defaultexpression="$root.getProcessHistory().currentStageIsAdvisoryReview()" description="" mode="local" type="Boolean" variable="isStageAdvisoryReview"/>
            <parameterdefinition collectiontype="none" defaultexpression="$root.getProcessHistory().currentStageIsAdvisoryPreValidation()" description="" mode="local" type="Boolean" variable="isAdisoryPreValidation"/>
            <parameterdefinition collectiontype="none"
                defaultexpression="$root.getProcessHistory().currentStageIsCEOApproves() or $root.getProcessHistory().currentStageIsCSEMApproval() or $root.getProcessHistory().currentStageIsDeskHeadApproves() or $root.getProcessHistory().currentStageIsFCCCountryHeadApproval() or $root.getProcessHistory().currentStageIsFCCEscalation() or $root.getProcessHistory().currentStageIsGPBHeadFCCApproval() or $root.getProcessHistory().currentStageIsRMApprovesOrAfter() or $root.getProcessHistory().currentStageIsRMSupervisorApproves()"
                description="" mode="local" type="Boolean" variable="isApproval"/>
            <parameterdefinition collectiontype="none" defaultexpression="$root.getProcessHistory().currentStageIsFCCEscalation()" description="" mode="local" type="Boolean" variable="isStageFCCEscalation"/>
            <parameterdefinition collectiontype="none" defaultexpression="ERROR($party.isDeadSettlor(), false)" description="" mode="local" type="Boolean" variable="isDeadSettlor"/>
            <condition active="true" alternative="false" decision="" description="Physical Person" expression="$party.type.isPhysicalPerson()" negate="false" showChildren="true">
                <action active="true" function="section" id="1420800052678" label="Identification" showChildren="true">
                    <description><![CDATA[]]></description>
                    <property key="fatherSection" value="''"/>
                    <property key="warningsRuleID" value="If false Then&#xa;   GETBUSINESSOBJECT('Rule', 'CMN_IdentificationWarnings');&#xa;End&#xa;Return 'CMN_IdentificationWarnings';"/>
                    <property key="isVisitable" value="'true'"/>
                    <property key="sectionScreen" value="'COB_IncludeShowEditParty'"/>
                    <property key="roleName" value="''"/>
                    <property key="description" value="'[LABEL:COB_text.parties.identification.title]'"/>
                    <property key="action" value="'partyIdentification'"/>
                    <property key="caption" value="'[LABEL:COB_text.parties.identification.title]'"/>
                    <property key="readOnly" value="$isAdisoryPreValidation || $isStageFrontReview || $isStageAdvisoryReview || $isApproval "/>
                    <property key="id" value="'partyIdentification'"/>
                    <property key="isMandatory" value="'false'"/>
                </action>
                <condition active="true" alternative="false" decision="" description="Not hidden" expression="$kycLevel != CMN_KYCLevel.hide() and $kycLevel != CMN_KYCLevel.identificationOnly()" negate="false" showChildren="true">
                    <action active="true" function="script" id="1473861492657" label="To Remove" showChildren="true">
                        <description><![CDATA[]]></description>
                        <property key="script" value="If CAST(CMN_PhysicalPerson, $party).getKYCProfile().generalInformation == null Then&#xa;   CAST(CMN_PhysicalPerson, $party).getKYCProfile().generalInformation := NEW(CMN_KycGeneralInformationPhysicalPerson);&#xa;End"/>
                    </action>
                    <action active="true" function="section" id="1473154849986" label="General Information" showChildren="true">
                        <description><![CDATA[]]></description>
                        <property key="mainSection" value="''"/>
                        <property key="warningsRuleID" value=""/>
                        <property key="toolbarDisabled" value="false"/>
                        <property key="isVisitable" value="'true'"/>
                        <property key="description" value="'[LABEL:CMN_kyc.partyGeneralInformation]'"/>
                        <property key="action" value="'partyGeneralInformation'"/>
                        <property key="caption" value="'[LABEL:CMN_kyc.partyGeneralInformation]'"/>
                        <property key="readOnly" value="$party.isTakenFromSIL || $isAdisoryPreValidation || $isStageFrontReview || $isStageAdvisoryReview || $isApproval"/>
                        <property key="id" value="'partyGeneralInformation'"/>
                        <property key="isMandatory" value="'false'"/>
                    </action>
                    <condition active="true" alternative="false" decision="" description="Has relevant PVC role" expression="$party.hasRelevantCustomerRole($root.getBusinessRelationship())" negate="false" showChildren="true"/>
                    <action active="true" function="section" id="1407399307568" label="Tax" showChildren="true">
                        <description><![CDATA[]]></description>
                        <property key="fatherSection" value="''"/>
                        <property key="warningsRuleID" value="If false Then&#xa;   GETBUSINESSOBJECT('Rule', 'CMN_TaxRegulatoryWarnings');&#xa;End&#xa;Return 'CMN_TaxRegulatoryWarnings';"/>
                        <property key="isVisitable" value="'true'"/>
                        <property key="sectionScreen" value="'COB_IncludeTaxDetail'"/>
                        <property key="roleName" value="''"/>
                        <property key="description" value="'[LABEL:CMN_kyc.tax.regulatory]'"/>
                        <property key="action" value="'tax'"/>
                        <property key="caption" value="'[LABEL:CMN_kyc.tax.regulatory]'"/>
                        <property key="readOnly" value="$isAdisoryPreValidation || $isStageFrontReview || $isStageAdvisoryReview || $isApproval  "/>
                        <property key="id" value="'tax'"/>
                        <property key="isMandatory" value="'false'"/>
                    </action>
                    <condition active="true" alternative="false" decision="" description="Has KYC" expression="$kycLevel != CMN_KYCLevel.none()" label="Has KYC" negate="false" showChildren="true">
                        <action active="true" function="section" id="1423738703740" label="Screening" showChildren="true">
                            <description><![CDATA[]]></description>
                            <property key="mainSection" value="'kyc'"/>
                            <property key="warningsRuleID" value="'CMN_ScreeningWarnings'"/>
                            <property key="isVisitable" value="'true'"/>
                            <property key="description" value="'[LABEL:CMN_kyc.screening]'"/>
                            <property key="action" value="'screening'"/>
                            <property key="caption" value="'[LABEL:CMN_kyc.screening]'"/>
                            <property key="readOnly" value="$isStageFrontReview || $isStageAdvisoryReview || $isApproval"/>
                            <property key="id" value="'screening'"/>
                            <property key="isMandatory" value="'false'"/>
                        </action>
                        <action active="true" function="section" id="1423738601670" label="SCC PEP" showChildren="true">
                            <description><![CDATA[]]></description>
                            <property key="mainSection" value="'kyc'"/>
                            <property key="isVisitable" value="'true'"/>
                            <property key="description" value="'[LABEL:CMN_kyc.scc.pep]'"/>
                            <property key="action" value="'sccPep'"/>
                            <property key="caption" value="'[LABEL:CMN_kyc.scc.pep]'"/>
                            <property key="readOnly" value="$isAdisoryPreValidation || $isStageFrontReview || $isStageAdvisoryReview || ($isApproval and not $isStageFCCEscalation)"/>
                            <property key="id" value="'sccPep'"/>
                            <property key="isMandatory" value="'false'"/>
                        </action>
                        <condition active="true" alternative="false" decision="" description="Full KYC" expression="$kycLevel == CMN_KYCLevel.full()" label="Full KYC" negate="false" showChildren="true">
                            <action active="true" function="section" id="1423738668194" label="SOW" showChildren="true">
                                <description><![CDATA[]]></description>
                                <property key="mainSection" value="'kyc'"/>
                                <property key="isVisitable" value="'true'"/>
                                <property key="description" value="'[LABEL:CMN_kyc.source.of.wealth]'"/>
                                <property key="action" value="'sow'"/>
                                <property key="caption" value="'[LABEL:CMN_kyc.source.of.wealth]'"/>
                                <property key="readOnly" value="$isAdisoryPreValidation || $isStageFrontReview || $isStageAdvisoryReview || $isApproval"/>
                                <property key="id" value="'sow'"/>
                                <property key="isMandatory" value="'false'"/>
                            </action>
                            <action active="true" function="section" id="1424861676167" label="Overall Net Worth Income" showChildren="true">
                                <description><![CDATA[]]></description>
                                <property key="mainSection" value=""/>
                                <property key="isVisitable" value="'true'"/>
                                <property key="description" value="'[LABEL:CMN_kyc.overall.net.worth.income]'"/>
                                <property key="action" value="'overallNetWorthIncome'"/>
                                <property key="caption" value="'[LABEL:CMN_kyc.overall.net.worth.income]'"/>
                                <property key="readOnly" value="$isAdisoryPreValidation || $isStageFrontReview || $isStageAdvisoryReview || $isApproval"/>
                                <property key="id" value="'overallNetWorthIncome'"/>
                                <property key="isMandatory" value="'false'"/>
                            </action>
                            <action active="true" function="section" id="1407399307568" label="Linked Accounts" showChildren="true">
                                <description><![CDATA[]]></description>
                                <property key="fatherSection" value="''"/>
                                <property key="isVisitable" value="'true'"/>
                                <property key="sectionScreen" value="'COB_IncludeTaxDetail'"/>
                                <property key="roleName" value="''"/>
                                <property key="description" value="'[LABEL:CMN_kyc.linked.accounts.regulatory]'"/>
                                <property key="action" value="'linkedAccounts'"/>
                                <property key="caption" value="'[LABEL:CMN_kyc.linked.accounts.regulatory]'"/>
                                <property key="readOnly" value="$isAdisoryPreValidation || $isStageFrontReview || $isStageAdvisoryReview || $isApproval"/>
                                <property key="id" value="'linkedAccounts'"/>
                                <property key="isMandatory" value="'false'"/>
                            </action>
                        </condition>
                        <condition active="true" alternative="false" decision="" description="BasicPlus KYC" expression="$kycLevel == CMN_KYCLevel.basicPlus()" label="BasicPlus KYC" negate="false" showChildren="true">
                            <action active="true" function="section" id="1462781000364" label="SOW" showChildren="true">
                                <description><![CDATA[]]></description>
                                <property key="mainSection" value="'kyc'"/>
                                <property key="warningsRuleID" value=""/>
                                <property key="toolbarDisabled" value="true"/>
                                <property key="isVisitable" value="'true'"/>
                                <property key="description" value="'[LABEL:CMN_kyc.source.of.wealth]'"/>
                                <property key="action" value="'sow'"/>
                                <property key="caption" value="'[LABEL:CMN_kyc.source.of.wealth]'"/>
                                <property key="readOnly" value="$isAdisoryPreValidation || $isStageFrontReview || $isStageAdvisoryReview || $isApproval"/>
                                <property key="id" value="'sow'"/>
                                <property key="isMandatory" value="'false'"/>
                            </action>
                        </condition>
                        <action active="true" function="section" id="1407399307568" label="Risk Assessment" showChildren="true">
                            <description><![CDATA[]]></description>
                            <property key="fatherSection" value="''"/>
                            <property key="warningsRuleID" value="If false Then&#xa;   GETBUSINESSOBJECT('Rule', 'CMN_RiskAssessmentWarnings');&#xa;End&#xa;Return 'CMN_RiskAssessmentWarnings';"/>
                            <property key="isVisitable" value="'true'"/>
                            <property key="roleName" value="''"/>
                            <property key="description" value="'[LABEL:CMN_kyc.risk.assessment]'"/>
                            <property key="action" value="'riskAssessment'"/>
                            <property key="caption" value="'[LABEL:CMN_kyc.risk.assessment]'"/>
                            <property key="readOnly" value="$isAdisoryPreValidation || $isStageFrontReview || $isStageAdvisoryReview || $isApproval"/>
                            <property key="id" value="'riskAssessment'"/>
                            <property key="isMandatory" value="'false'"/>
                        </action>
                    </condition>
                </condition>
            </condition>
            <condition active="true" alternative="false" decision="" description="Entity" expression="$party.type.isLegalEntity()" negate="false" showChildren="true">
                <action active="true" function="section" id="1420800052678" label="Identification" showChildren="true">
                    <description><![CDATA[]]></description>
                    <property key="fatherSection" value="''"/>
                    <property key="mainSection" value=""/>
                    <property key="isVisitable" value="'true'"/>
                    <property key="roleName" value="''"/>
                    <property key="description" value="'[LABEL:COB_text.parties.identification.title]'"/>
                    <property key="action" value="'partyIdentification'"/>
                    <property key="caption" value="'[LABEL:COB_text.parties.identification.title]'"/>
                    <property key="readOnly" value="$isAdisoryPreValidation || $isStageFrontReview || $isStageAdvisoryReview || $isApproval  "/>
                    <property key="id" value="'partyIdentification'"/>
                    <property key="isMandatory" value="'false'"/>
                </action>
                <condition active="true" alternative="false" decision="" description="Not Hidden" expression="$kycLevel != CMN_KYCLevel.hide() and $kycLevel != CMN_KYCLevel.identificationOnly()" negate="false" showChildren="true">
                    <condition active="true" alternative="false" decision="" description="Never true" expression="false" negate="false" showChildren="true">
                        <action active="true" function="section" id="1473154867774" label="General Information" showChildren="true">
                            <description><![CDATA[]]></description>
                            <property key="mainSection" value="''"/>
                            <property key="warningsRuleID" value=""/>
                            <property key="toolbarDisabled" value="false"/>
                            <property key="isVisitable" value="'true'"/>
                            <property key="description" value="'[LABEL:CMN_kyc.partyGeneralInformation]'"/>
                            <property key="action" value="'partyGeneralInformation'"/>
                            <property key="caption" value="'[LABEL:CMN_kyc.partyGeneralInformation]'"/>
                            <property key="readOnly" value="$isAdisoryPreValidation || $isStageFrontReview || $isStageAdvisoryReview || $isApproval  "/>
                            <property key="id" value="'partyGeneralInformation'"/>
                            <property key="isMandatory" value="'false'"/>
                        </action>
                    </condition>
                    <condition active="true" alternative="false" decision="" description="Has KYC" expression="$kycLevel != CMN_KYCLevel.none()" negate="false" showChildren="true">
                        <condition active="true" alternative="false" decision="" description="Full KYC" expression="$kycLevel == CMN_KYCLevel.full()" label="Full KYC" negate="false" showChildren="true">
                            <condition active="true" alternative="false" decision="" description="Commercial Operating Business" expression="$party.type.isCommercialOperatingBusiness()" negate="false" showChildren="true">
                                <action active="true" function="section" id="1423738703740" label="Party Structure" showChildren="true">
                                    <description><![CDATA[]]></description>
                                    <property key="mainSection" value="'kyc'"/>
                                    <property key="isVisitable" value="'true'"/>
                                    <property key="description" value="'[LABEL:CMN_kyc.partyStructure]'"/>
                                    <property key="action" value="'partyStructure'"/>
                                    <property key="caption" value="'[LABEL:CMN_kyc.partyStructure]'"/>
                                    <property key="readOnly" value="$isAdisoryPreValidation || $isStageFrontReview || $isStageAdvisoryReview || $isApproval"/>
                                    <property key="id" value="'partyStructure'"/>
                                    <property key="isMandatory" value="'false'"/>
                                </action>
                            </condition>
                        </condition>
                    </condition>
                    <action active="true" function="section" id="1407399307568" label="Tax" showChildren="true">
                        <description><![CDATA[]]></description>
                        <property key="fatherSection" value="''"/>
                        <property key="warningsRuleID" value="If false Then&#xa;   GETBUSINESSOBJECT('Rule', 'CMN_TaxRegulatoryWarnings');&#xa;End&#xa;Return 'CMN_TaxRegulatoryWarnings';"/>
                        <property key="isVisitable" value="'true'"/>
                        <property key="roleName" value="''"/>
                        <property key="description" value="'[LABEL:CMN_kyc.tax.regulatory]'"/>
                        <property key="action" value="'tax'"/>
                        <property key="caption" value="'[LABEL:CMN_kyc.tax.regulatory]'"/>
                        <property key="readOnly" value="$isAdisoryPreValidation || $isStageFrontReview || $isStageAdvisoryReview || $isApproval  "/>
                        <property key="id" value="'tax'"/>
                        <property key="isMandatory" value="'false'"/>
                    </action>
                    <condition active="true" alternative="false" decision="" description="Has KYC" expression="$kycLevel != CMN_KYCLevel.none()" label="Has KYC" negate="false" showChildren="true">
                        <condition active="true" alternative="false" decision="" description="Full KYC" expression="$kycLevel == CMN_KYCLevel.full()" label="Full KYC" negate="false" showChildren="true">
                            <condition active="true" alternative="false" decision="" description="Commercial Operating Business or PIC" expression="$party.type.isCommercialOperatingBusiness() or $party.type.isPrivateInvestmentCompany()" negate="false" showChildren="true">
                                <action active="true" function="section" id="1423738703740" label="Bearer Shares" showChildren="true">
                                    <description><![CDATA[]]></description>
                                    <property key="mainSection" value="'kyc'"/>
                                    <property key="isVisitable" value="'true'"/>
                                    <property key="description" value="'[LABEL:CMN_kyc.bearerShares]'"/>
                                    <property key="action" value="'bearerShares'"/>
                                    <property key="caption" value="'[LABEL:CMN_kyc.bearerShares]'"/>
                                    <property key="readOnly" value="$isAdisoryPreValidation || $isStageFrontReview || $isStageAdvisoryReview || $isApproval"/>
                                    <property key="id" value="'bearerShares'"/>
                                    <property key="isMandatory" value="'false'"/>
                                </action>
                            </condition>
                        </condition>
                        <action active="true" function="section" id="1423738703740" label="Screening" showChildren="true">
                            <description><![CDATA[]]></description>
                            <property key="mainSection" value="'kyc'"/>
                            <property key="warningsRuleID" value=""/>
                            <property key="isVisitable" value="'true'"/>
                            <property key="description" value="'[LABEL:CMN_kyc.screening]'"/>
                            <property key="action" value="'screening'"/>
                            <property key="caption" value="'[LABEL:CMN_kyc.screening]'"/>
                            <property key="readOnly" value="$isStageFrontReview || $isStageAdvisoryReview || $isApproval"/>
                            <property key="id" value="'screening'"/>
                            <property key="isMandatory" value="'false'"/>
                        </action>
                        <action active="true" function="section" id="1423738601670" label="SCC PEP" showChildren="true">
                            <description><![CDATA[]]></description>
                            <property key="mainSection" value="'kyc'"/>
                            <property key="isVisitable" value="'true'"/>
                            <property key="description" value="'[LABEL:CMN_kyc.scc.pep]'"/>
                            <property key="action" value="'sccPep'"/>
                            <property key="caption" value="'[LABEL:CMN_kyc.scc.pep]'"/>
                            <property key="readOnly" value="$isAdisoryPreValidation || $isStageFrontReview || $isStageAdvisoryReview || ($isApproval and not $isStageFCCEscalation)"/>
                            <property key="id" value="'sccPep'"/>
                            <property key="isMandatory" value="'false'"/>
                        </action>
                        <condition active="true" alternative="false" decision="" description="Full KYC" expression="$kycLevel == CMN_KYCLevel.full()" label="Full KYC" negate="false" showChildren="true">
                            <condition active="true" alternative="false" decision="" description="Commercial Operating Business" expression="$party.type.isCommercialOperatingBusiness()" negate="false" showChildren="true">
                                <action active="true" function="section" id="1423738703740" label="Nature of business and SOW" showChildren="true">
                                    <description><![CDATA[]]></description>
                                    <property key="mainSection" value="'kyc'"/>
                                    <property key="warningsRuleID" value="If false Then&#xa;   GETBUSINESSOBJECT('Rule', 'CMN_BusinessNatureAndSOWWarnings');&#xa;End&#xa;Return 'CMN_BusinessNatureAndSOWWarnings';"/>
                                    <property key="isVisitable" value="'true'"/>
                                    <property key="description" value="'[LABEL:CMN_kyc.naturalBusinessSOW]'"/>
                                    <property key="action" value="'natureOfBusinessSOW'"/>
                                    <property key="caption" value="'[LABEL:CMN_kyc.natureOfBusinessSOW]'"/>
                                    <property key="readOnly" value="$isAdisoryPreValidation || $isStageFrontReview || $isStageAdvisoryReview || $isApproval"/>
                                    <property key="id" value="'natureOfBusinessSOW'"/>
                                    <property key="isMandatory" value="'false'"/>
                                </action>
                                <action active="true" function="section" id="1423738703740" label="Financial Information" showChildren="true">
                                    <description><![CDATA[]]></description>
                                    <property key="mainSection" value="'kyc'"/>
                                    <property key="isVisitable" value="'true'"/>
                                    <property key="description" value="'[LABEL:CMN_kyc.financial.information]'"/>
                                    <property key="action" value="'financialInformation'"/>
                                    <property key="caption" value="'[LABEL:CMN_kyc.financial.information]'"/>
                                    <property key="readOnly" value="$isAdisoryPreValidation || $isStageFrontReview || $isStageAdvisoryReview || $isApproval"/>
                                    <property key="id" value="'financialInformation'"/>
                                    <property key="isMandatory" value="'false'"/>
                                </action>
                                <action active="true" function="section" id="1407399307568" label="Linked Accounts" showChildren="true">
                                    <description><![CDATA[]]></description>
                                    <property key="fatherSection" value="''"/>
                                    <property key="isVisitable" value="'true'"/>
                                    <property key="sectionScreen" value="'COB_IncludeTaxDetail'"/>
                                    <property key="roleName" value="''"/>
                                    <property key="description" value="'[LABEL:CMN_kyc.linked.accounts.regulatory]'"/>
                                    <property key="action" value="'linkedAccounts'"/>
                                    <property key="caption" value="'[LABEL:CMN_kyc.linked.accounts.regulatory]'"/>
                                    <property key="readOnly" value="$isAdisoryPreValidation || $isStageFrontReview || $isStageAdvisoryReview || $isApproval"/>
                                    <property key="id" value="'linkedAccounts'"/>
                                    <property key="isMandatory" value="'false'"/>
                                </action>
                            </condition>
                            <condition active="true" alternative="false" decision="" description="PIC or Trust or Foundation" expression="OR($party.type.isPrivateInvestmentCompany(), $party.type.isTrustOrFoundation())" negate="false" showChildren="true">
                                <action active="true" function="section" id="1423738703740" label="Nature of business" showChildren="true">
                                    <description><![CDATA[]]></description>
                                    <property key="mainSection" value="'kyc'"/>
                                    <property key="isVisitable" value="'true'"/>
                                    <property key="description" value="'[LABEL:CMN_kyc.natureOfBusiness]'"/>
                                    <property key="action" value="'natureOfBusiness'"/>
                                    <property key="caption" value="'[LABEL:CMN_kyc.natureOfBusiness]'"/>
                                    <property key="readOnly" value="$isAdisoryPreValidation || $isStageFrontReview || $isStageAdvisoryReview || $isApproval"/>
                                    <property key="id" value="'natureOfBusiness'"/>
                                    <property key="isMandatory" value="'false'"/>
                                </action>
                                <action active="true" function="section" id="1423738703740" label="Financial Information" showChildren="true">
                                    <description><![CDATA[]]></description>
                                    <property key="mainSection" value="'kyc'"/>
                                    <property key="isVisitable" value="'true'"/>
                                    <property key="description" value="'[LABEL:CMN_kyc.financial.information]'"/>
                                    <property key="action" value="'financialInformation'"/>
                                    <property key="caption" value="'[LABEL:CMN_kyc.financial.information]'"/>
                                    <property key="readOnly" value="$isAdisoryPreValidation || $isStageFrontReview || $isStageAdvisoryReview || $isApproval"/>
                                    <property key="id" value="'financialInformation'"/>
                                    <property key="isMandatory" value="'false'"/>
                                </action>
                                <action active="true" function="section" id="1407399307568" label="Linked Accounts" showChildren="true">
                                    <description><![CDATA[]]></description>
                                    <property key="fatherSection" value="''"/>
                                    <property key="isVisitable" value="'true'"/>
                                    <property key="sectionScreen" value="'COB_IncludeTaxDetail'"/>
                                    <property key="roleName" value="''"/>
                                    <property key="description" value="'[LABEL:CMN_kyc.linked.accounts.regulatory]'"/>
                                    <property key="action" value="'linkedAccounts'"/>
                                    <property key="caption" value="'[LABEL:CMN_kyc.linked.accounts.regulatory]'"/>
                                    <property key="readOnly" value="$isAdisoryPreValidation || $isStageFrontReview || $isStageAdvisoryReview || $isApproval"/>
                                    <property key="id" value="'linkedAccounts'"/>
                                    <property key="isMandatory" value="'false'"/>
                                </action>
                            </condition>
                        </condition>
                        <action active="true" function="section" id="1407399307568" label="Risk Assessment" showChildren="true">
                            <description><![CDATA[]]></description>
                            <property key="fatherSection" value="''"/>
                            <property key="warningsRuleID" value="If false Then&#xa;   GETBUSINESSOBJECT('Rule', 'CMN_RiskAssessmentWarnings');&#xa;End&#xa;Return 'CMN_RiskAssessmentWarnings';"/>
                            <property key="isVisitable" value="'true'"/>
                            <property key="roleName" value="''"/>
                            <property key="description" value="'[LABEL:CMN_kyc.risk.assessment]'"/>
                            <property key="action" value="'riskAssessment'"/>
                            <property key="caption" value="'[LABEL:CMN_kyc.risk.assessment]'"/>
                            <property key="readOnly" value="$isAdisoryPreValidation || $isStageFrontReview || $isStageAdvisoryReview || $isApproval"/>
                            <property key="id" value="'riskAssessment'"/>
                            <property key="isMandatory" value="'false'"/>
                        </action>
                    </condition>
                </condition>
            </condition>
        </scope>
    </definition>
</decisiontree>

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     1,1075,13634,0
<?xml version="1.0" encoding="UTF-8"?>
<object xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="object.xsd">
    <id>CMN_IncludeKycSowOthers</id>
    <uuid>6dff22a6-23af-4d92-b7af-d6c7c7524175</uuid>
    <type>Screen</type>
    <name/>
    <description/>
    <creator>sabino</creator>
    <creationTime>1422888066288</creationTime>
    <modifier>segafredo</modifier>
    <modificationTime>1472719376337</modificationTime>
    <active>true</active>
    <versionUuid>4e4520cd-3a40-49b5-add2-18b6b69a2cb8</versionUuid>
    <parentVersionUuid>d95a13e4-8f98-4996-8f1a-c738d49a89ed</parentVersionUuid>
    <timestamp>1475260129806</timestamp>
    <systemId>h-global-predev.appway.com</systemId>
    <copyOfUuid>89eab643-4dae-4ecb-afd8-91cbaa2d04f7</copyOfUuid>
    <committed>true</committed>
    <deleted>false</deleted>
    <userId>magloire</userId>
    <metaData>
        <property name="Refactoring-ChangeID" value="COB_IncludeKycSOWOthers>COB_IncludeKycSowOthers|COB_IncludeKycSowOthers>CMN_IncludeKycSowOthers"/>
    </metaData>
</object>

<?xml version="1.0" encoding="UTF-8"?>
<screen version="1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="screen.xsd">
    <parameterDefinitions>
        <parameterDefinition collectionType="none" defaultExpression="" description="(inherited from COB_Master__CH) (inherited from COB_ProfilingParties) (inherited from COB_KYC) (inherited from COB_KycSourceOfWealth)" mode="inherited" type="CMN_Root" variable="root"/>
        <parameterDefinition collectionType="none" defaultExpression="" description="(inherited from COB_Master__CH) (inherited from COB_ProfilingParties) (inherited from COB_KYC) (inherited from COB_KycSourceOfWealth)" mode="inherited" type="String" variable="action"/>
        <parameterDefinition collectionType="none" defaultExpression="" description="" mode="assigned" type="LIB_AdaptiveFlowLayoutConfiguration" variable="adaptiveFlowLayoutConfiguration"/>
        <parameterDefinition collectionType="none" defaultExpression="false" description="" mode="assigned" type="Boolean" variable="isReadOnly"/>
        <parameterDefinition collectionType="none" defaultExpression="NEW(LIB_GenericWrapper)" description="" mode="local" type="LIB_GenericWrapper" variable="currentOther"/>
        <parameterDefinition collectionType="none" defaultExpression="NEW(LIB_GenericWrapper)" description="" mode="local" type="LIB_GenericWrapper" variable="currentSowOtherHyperLink"/>
        <parameterDefinition collectionType="none" defaultExpression="" description="" mode="assigned" type="CMN_KycSowOthers" variable="otherSOW"/>
        <parameterDefinition collectionType="none" defaultExpression="" description="(inherited from CMN_IncludeIndividualFullKycSourceOfWealth) (inherited from CMN_IncludeIndividualBasicKycSourceOfWealth)" mode="assigned" type="CMN_ValidationManager" variable="validationManager"/>
    </parameterDefinitions>
    <view class="com.nm.sdk.data.pages.views.components.View" id="0">
        <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayout" id="1">
            <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutGroup" id="79">
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" editorDescription="Other date received" id="85">
                    <component class="com.nm.sdk.data.pages.views.components.Infobox" id="115" label="[LABEL:COB_kyc.sow.others.date.receved]" orientation="vertical">
                        <customControl adapterName="ComponentExtension" binding="$otherSOW.dateReceived" class="com.nm.sdk.data.pages.views.components.CustomControl" componentClass="com.nm.extensions.widgets.datepicker.DatePicker" id="108">
                            <converter class="com.nm.sdk.data.pages.views.converters.ExpressionConverter" input="LIB_DateHelper.parse($value)" output="LIB_DateHelper.formatDate($value)" variable="value" variableCollectionType="none" variableType="Date"/>
                            <property name="disableTyping" value="false"/>
                            <property name="format" value="=&#xa;LIB_ConfigHelper.getDatePickerFormat()"/>
                            <property name="maxDate"/>
                            <property name="minDate"/>
                            <property name="showButtonPanel" value="false"/>
                            <property name="showMonthDropdown" value="true"/>
                            <property name="showYearDropdown" value="true"/>
                            <property name="startDayIndex" value="-1"/>
                            <property name="textIfDisabled" value="false"/>
                            <property name="validateMinMaxDate" value="false"/>
                            <property name="yearRange" value="c-10:c+10"/>
                        </customControl>
                    </component>
                </customContainer>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" editorDescription="Estimated Value" id="86">
                    <component class="com.nm.sdk.data.pages.views.components.Template" id="162" screenId="CMN_TemplateValidationBox">
                        <component class="com.nm.sdk.data.pages.views.components.TemplateArea" id="163" name="CONTENT">
                            <component class="com.nm.sdk.data.pages.views.components.Infobox" description="[LABEL:COB_kyc.sow.others.estimated.value.tt]" id="116" label="='[LABEL:COB_kyc.sow.others.estimated.value]' &amp; ' (' &amp; '[LABEL:COB_kyc.sow.usd]' &amp; ')'" orientation="vertical">
                                <component binding="$otherSOW.estimatedValue" class="com.nm.sdk.data.pages.views.components.TextField" id="89" inputType="text"/>
                            </component>
                        </component>
                        <parameterAssignments>
                            <parameterAssignment expression="TOSTRING($otherSOW.estimatedValue)" variable="gsFieldValue"/>
                            <parameterAssignment expression="'1629'" variable="gsFieldId"/>
                        </parameterAssignments>
                    </component>
                </customContainer>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="152">
                    <component class="com.nm.sdk.data.pages.views.components.Template" id="142" screenId="CMN_TemplateValidationBox">
                        <component class="com.nm.sdk.data.pages.views.components.TemplateArea" id="143" name="CONTENT">
                            <component class="com.nm.sdk.data.pages.views.components.Infobox" description="[LABEL:COB_kyc.sow.others.how.original.wealth.created.tt]" id="117" label="[LABEL:COB_kyc.sow.others.how.original.wealth.created]" orientation="vertical">
                                <component binding="$otherSOW.originalWealthDescription" class="com.nm.sdk.data.pages.views.components.TextArea" cols="15" id="94" rows="5"/>
                            </component>
                        </component>
                        <parameterAssignments>
                            <parameterAssignment expression="false" variable="isValidationGroup"/>
                            <parameterAssignment expression="$validationManager" variable="validationManager"/>
                            <parameterAssignment expression="not EMPTY($otherSOW.originalWealthDescription)" variable="isValid"/>
                            <parameterAssignment expression="'[LABEL:COB_source.of.wealth.validation.original.wealth.description]'" variable="messageWhenNotValid"/>
                            <parameterAssignment expression="'originalWealthDescription'" variable="itemId"/>
                            <parameterAssignment expression="$otherSOW.originalWealthDescription" variable="gsFieldValue"/>
                            <parameterAssignment expression="'1630'" variable="gsFieldId"/>
                        </parameterAssignments>
                    </component>
                </customContainer>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutElement" id="153">
                    <component class="com.nm.sdk.data.pages.views.components.Template" id="164" screenId="CMN_TemplateValidationBox">
                        <component class="com.nm.sdk.data.pages.views.components.TemplateArea" id="165" name="CONTENT">
                            <component class="com.nm.sdk.data.pages.views.components.Infobox" id="118" label="[LABEL:COB_kyc.sow.others.original.provenance]" orientation="vertical">
                                <component binding="$otherSOW.originAndProvenanceSow" class="com.nm.sdk.data.pages.views.components.TextArea" cols="15" id="98" rows="5"/>
                            </component>
                        </component>
                        <parameterAssignments>
                            <parameterAssignment expression="$otherSOW.originAndProvenanceSow" variable="gsFieldValue"/>
                            <parameterAssignment expression="'1631'" variable="gsFieldId"/>
                        </parameterAssignments>
                    </component>
                </customContainer>
                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutFullWidthElement" id="120">
                    <component class="com.nm.sdk.data.pages.views.components.Template" id="121" screenId="UI_TemplateMultiFieldSet">
                        <component class="com.nm.sdk.data.pages.views.components.TemplateArea" id="122" name="CONTENT">
                            <component class="com.nm.sdk.data.pages.views.components.Include" id="123" screenId="CMN_IncludeOtherInheritorDonatorsExposure">
                                <parameterAssignments>
                                    <parameterAssignment expression="$isReadOnly" variable="isReadOnly"/>
                                    <parameterAssignment expression="CAST(CMN_KycBusinessExposure, $currentOther.value)" variable="inheritorDonator"/>
                                    <parameterAssignment expression="$validationManager" variable="validationManager"/>
                                    <parameterAssignment expression="$adaptiveFlowLayoutConfiguration" variable="adaptiveFlowLayoutConfiguration"/>
                                </parameterAssignments>
                            </component>
                        </component>
                        <component class="com.nm.sdk.data.pages.views.components.TemplateArea" id="124" name="COMPACTCONTENT">
                            <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.floatlayout.FloatLayout" id="159">
                                <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.floatlayout.FloatLayoutElement" id="160">
                                    <component allowHtmlCode="false" class="com.nm.sdk.data.pages.views.components.Label" id="161" text="=CAST(CMN_KycBusinessExposure, $currentOther.value).toString()"/>
                                    <property name="align"/>
                                </customContainer>
                            </customContainer>
                        </component>
                        <parameterAssignments>
                            <parameterAssignment expression="$adaptiveFlowLayoutConfiguration" variable="adaptiveFlowLayoutConfiguration"/>
                            <parameterAssignment expression="$isReadOnly" variable="isReadOnly"/>
                            <parameterAssignment expression="$currentOther" variable="currentElement"/>
                            <parameterAssignment expression="$otherSOW.countriesBusinessExposure" variable="collection"/>
                            <parameterAssignment expression="true" variable="compactMode"/>
                            <parameterAssignment expression="'CMN_KycBusinessExposure'" variable="objectType"/>
                            <parameterAssignment expression="1" variable="minCardinality"/>
                            <parameterAssignment expression="'[LABEL:COB_kyc.sow.country.sow.generated.inheritor]'" variable="fieldSetTitle"/>
                        </parameterAssignments>
                    </component>
                </customContainer>
                <property name="groupHasLayout" value="false"/>
                <property name="groupTitle" value="[LABEL:COB_kyc.sow.others.area]"/>
                <property name="inheritAllParentProperties" value="true"/>
                <property name="labelWidthPercentage"/>
                <property name="labelWidthPixels"/>
                <property name="labelWidthType"/>
                <property name="maxElementPixelWidth"/>
                <property name="maxElementsPerRow"/>
                <property name="targetElementPixelWidth"/>
                <property name="topLabelCutoff"/>
            </customContainer>
            <property name="labelWidthPercentage"/>
            <property name="labelWidthPixels"/>
            <property name="labelWidthType"/>
            <property name="maxElementPixelWidth" value="=$adaptiveFlowLayoutConfiguration.maxElementPixelWidth"/>
            <property name="maxElementsPerRow" value="=$adaptiveFlowLayoutConfiguration.maxElementsPerRow;"/>
            <property name="targetElementPixelWidth" value="=$adaptiveFlowLayoutConfiguration.targetElementPixelWidth"/>
            <property name="topLabelCutoff" value="=$adaptiveFlowLayoutConfiguration.topLabelCutOff"/>
        </customContainer>
    </view>
</screen>

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          1,1143,3550,0
<?xml version="1.0" encoding="UTF-8"?>
<object xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="object.xsd">
    <id>CMN_IncludeEnhancedVigilanceReason__selector</id>
    <uuid>f4f6a943-fd54-4448-8d3c-8ea2d490cafd</uuid>
    <type>Screen</type>
    <name/>
    <description/>
    <creator>segafredo</creator>
    <creationTime>1473243365709</creationTime>
    <modifier>segafredo</modifier>
    <modificationTime>1473243365709</modificationTime>
    <active>true</active>
    <versionUuid>b086dd96-9346-4358-bce1-3d55cee3298c</versionUuid>
    <parentVersionUuid/>
    <timestamp>1475260129806</timestamp>
    <systemId>h-global-predev.appway.com</systemId>
    <copyOfUuid>cfcaab5c-4061-420e-8492-58aad21447f8</copyOfUuid>
    <committed>true</committed>
    <deleted>false</deleted>
    <userId>magloire</userId>
    <metaData>
        <property name="supportedVariations" value="CH,LX,US,HK,SG,CI"/>
        <property name="variationDependencies" value="CMN_IncludeEnhancedVigilanceReason__vHK,CMN_IncludeEnhancedVigilanceReason__vSG,CMN_IncludeEnhancedVigilanceReason__defv"/>
    </metaData>
</object>

<?xml version="1.0" encoding="UTF-8"?>
<screen version="1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="screen.xsd">
    <parameterDefinitions>
        <parameterDefinition collectionType="none" defaultExpression="GetActiveVariationID()" description="" mode="local" type="String" variable="activeVariation"/>
        <parameterDefinition collectionType="indexed" defaultExpression="['CH','LX','US','HK','SG','CI']:String" description="" mode="local" type="String" variable="supportedVariations"/>
        <parameterDefinition collectionType="none" defaultExpression="" description="" mode="assigned" type="CMN_EnhancedVigilance" variable="enhancedVigilance"/>
        <parameterDefinition collectionType="none" defaultExpression="" description="" mode="assigned" type="CMN_ValidationManager" variable="validationManager"/>
    </parameterDefinitions>
    <view class="com.nm.sdk.data.pages.views.components.View" id="0">
        <component class="com.nm.sdk.data.pages.views.components.If" condition="!($supportedVariations.contains($activeVariation))" id="1">
            <component class="com.nm.sdk.data.pages.views.components.ValidationGroup" id="2" validationExpression="false">
                <component class="com.nm.sdk.data.pages.views.components.Label" id="3" text="='Unsupported variation: ' &amp; $activeVariation"/>
            </component>
        </component>
        <component class="com.nm.sdk.data.pages.views.components.Else" id="4">
            <component class="com.nm.sdk.data.pages.views.components.Switch" expression="$activeVariation" id="5">
                <component class="com.nm.sdk.data.pages.views.components.Case" id="6" result="'HK'">
                    <component class="com.nm.sdk.data.pages.views.components.Include" id="7" screenId="CMN_IncludeEnhancedVigilanceReason__vHK">
                        <parameterAssignments>
                            <parameterAssignment expression="$enhancedVigilance" variable="enhancedVigilance"/>
                            <parameterAssignment expression="$validationManager" variable="validationManager"/>
                        </parameterAssignments>
                    </component>
                </component>
                <component class="com.nm.sdk.data.pages.views.components.Case" id="8" result="'SG'">
                    <component class="com.nm.sdk.data.pages.views.components.Include" id="9" screenId="CMN_IncludeEnhancedVigilanceReason__vSG">
                        <parameterAssignments>
                            <parameterAssignment expression="$enhancedVigilance" variable="enhancedVigilance"/>
                            <parameterAssignment expression="$validationManager" variable="validationManager"/>
                        </parameterAssignments>
                    </component>
                </component>
                <component class="com.nm.sdk.data.pages.views.components.Case" id="10">
                    <component class="com.nm.sdk.data.pages.views.components.Include" id="11" screenId="CMN_IncludeEnhancedVigilanceReason__defv">
                        <parameterAssignments>
                            <parameterAssignment expression="$enhancedVigilance" variable="enhancedVigilance"/>
                            <parameterAssignment expression="$validationManager" variable="validationManager"/>
                        </parameterAssignments>
                    </component>
                </component>
            </component>
        </component>
    </view>
</screen>

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           1,927,2311,0
<?xml version="1.0" encoding="UTF-8"?>
<object xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="object.xsd">
    <id>CMN_IncludeEnhancedVigilanceReason__vSG</id>
    <uuid>1d7075d4-f6d3-4a29-96e3-5a874196377f</uuid>
    <type>Screen</type>
    <name/>
    <description/>
    <creator>segafredo</creator>
    <creationTime>1473243312891</creationTime>
    <modifier>segafredo</modifier>
    <modificationTime>1473869570165</modificationTime>
    <active>true</active>
    <versionUuid>00697910-b8c7-49fd-8562-9ffe8e61cf35</versionUuid>
    <parentVersionUuid>352f752c-3271-4d9c-a843-55b024abfd4c</parentVersionUuid>
    <timestamp>1475260129806</timestamp>
    <systemId>h-global-predev.appway.com</systemId>
    <copyOfUuid>4f70014b-7c40-4b96-aa51-106f7bce94fe</copyOfUuid>
    <committed>true</committed>
    <deleted>false</deleted>
    <userId>magloire</userId>
    <metaData/>
</object>

<?xml version="1.0" encoding="UTF-8"?>
<screen version="1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="screen.xsd">
    <parameterDefinitions>
        <parameterDefinition collectionType="none" defaultExpression="" description="" mode="assigned" type="CMN_EnhancedVigilance" variable="enhancedVigilance"/>
        <parameterDefinition collectionType="none" defaultExpression="" description="" mode="assigned" type="CMN_ValidationManager" variable="validationManager"/>
    </parameterDefinitions>
    <view class="com.nm.sdk.data.pages.views.components.View" id="0">
        <customContainer adapterName="ComponentExtension" class="com.nm.sdk.data.pages.views.components.CustomContainer" componentClass="com.nm.extensions.widgets.adaptiveflowlayout.AdaptiveFlowLayoutFullWidthElement" id="6">
            <component class="com.nm.sdk.data.pages.views.components.Template" id="2" screenId="CMN_TemplateValidationBox">
                <component class="com.nm.sdk.data.pages.views.components.TemplateArea" id="3" name="CONTENT">
                    <component class="com.nm.sdk.data.pages.views.components.Infobox" id="4" label="[LABEL:CMN_IncludePartyEnhancedVigilance.vigilance.reason]" orientation="vertical">
                        <component binding="$enhancedVigilance.reason" class="com.nm.sdk.data.pages.views.components.TextArea" id="5" rows="3">
                            <style>
                                <property name="max-width" value="none"/>
                            </style>
                        </component>
                    </component>
                </component>
                <parameterAssignments>
                    <parameterAssignment expression="'vigilanceReason'" variable="itemId"/>
                    <parameterAssignment expression="$validationManager" variable="validationManager"/>
                    <parameterAssignment expression="'[LABEL:CMN_IncludePartyEnhancedVigilance.vigilance.reason.validation.error]'" variable="messageWhenNotValid"/>
                    <parameterAssignment expression="! $enhancedVigilance.isVigilanceActive or NotEmpty($enhancedVigilance.reason)" variable="isValid"/>
                </parameterAssignments>
            </component>
        </customContainer>
    </view>
</screen>

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           1,1020,305458,0
<?xml version="1.0" encoding="UTF-8"?>
<object xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="object.xsd">
    <id>INT_SILMappingCMNtoSIL</id>
    <uuid>b5d0b887-bb60-4659-845a-247e4cf6cd52</uuid>
    <type>DataStructure</type>
    <name/>
    <description/>
    <creator>mathieu</creator>
    <creationTime>1424963596777</creationTime>
    <modifier>pezzi</modifier>
    <modificationTime>1474533529131</modificationTime>
    <active>true</active>
    <versionUuid>07daf689-0091-4539-8dae-63b0578b6e1e</versionUuid>
    <parentVersionUuid>43395b80-8fae-4b43-a128-7126bd992f63</parentVersionUuid>
    <timestamp>1475260129806</timestamp>
    <systemId>h-global-predev.appway.com</systemId>
    <copyOfUuid>c0c9e73f-c6ef-461f-a28e-4bf021db1e3d</copyOfUuid>
    <committed>true</committed>
    <deleted>false</deleted>
    <userId>magloire</userId>
    <metaData>
        <property name="Refactoring-ChangeID" value="INT_SILMapping>INT_SILMappingCMNtoSIL"/>
    </metaData>
</object>

<?xml version="1.0" encoding="UTF-8"?>
<class dname="" entityStoreName="strong_entity" name="INT_SILMappingCMNtoSIL" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="dataitemclass.xsd">
    <superclasses>
        <superclass class="INT_Mapping"/>
    </superclasses>
    <properties/>
    <methods>
        <method name="_compareEntities" userId="pezzi" uuid="ffffffff-8892-8987-0000-000000000000">
            <definition><![CDATA[/**
  Description of function '_compareEntities'.
  @param $modifiedEntity Modified object
  @param $unmodifiedEntity Unmodified Object
  @return       The new object contain only add or removed value in the secondDataEntity
*/
StaticFunction _compareEntities(Any $modifiedEntity, Any $initialEntity) : Any Begin
   If NOTEQUAL($modifiedEntity.getDataEntityType(), $initialEntity.getDataEntityType()) Then
      FAIL('NOT SAME TYPE OF ENTITY');
   End
   If $modifiedEntity == $initialEntity Then
      If INT_Mapping._isPrimitiveType($modifiedEntity) Then
         Return NEW($initialEntity.getDataEntityType());
      Else
         Return CreateSkeletonDataClass($initialEntity.getDataEntityType());
      End
   End
   If ISA($modifiedEntity, com.nm.sdk.data.dataitems.DataObject) and ISA($initialEntity, com.nm.sdk.data.dataitems.DataObject) Then
      com.nm.sdk.data.dataitems.DataObject $modifiedDataObject := CAST(com.nm.sdk.data.dataitems.DataObject, $modifiedEntity);
      com.nm.sdk.data.dataitems.DataObject $initialDataObject := CAST(com.nm.sdk.data.dataitems.DataObject, $initialEntity);
      //For each property of the object
      ForEach Any $propertyName In $initialDataObject.getPropertiesMap().keySet() Do
         Any $modifiedProperty := $modifiedDataObject.getProperty($propertyName);
         Any $initialProperty := $initialDataObject.getProperty($propertyName);
         If $modifiedProperty == $initialProperty Then
            //We do nothing if it is the same entity, we remove it from the modifiedEntity
            $modifiedDataObject.removeProperty($propertyName);
         Else
            PRINTLN('different property: ', $propertyName);
            //properties are different, null or not null
            If $initialProperty != null Then
               //initialProperty is not null
               If $modifiedProperty != null Then
                  //PRINTLN('both are not null');
                  //modified is not null so they are different, we keep B if it's a primitive, 
                  If not INT_Mapping._isPrimitiveType($initialProperty) Then
                     //is a collection
                     If TypeOf($initialProperty, false).isCollectionType() Then
                        //PRINTLN('is a collection');
                        //call the function on each of the object of the Collection
                        Integer $subObjectIter := 1;
                        For $subObjectIter := 1 Condition $subObjectIter <= CAST(Indexed Any, $initialProperty).size() Step $subObjectIter := $subObjectIter + 1 Do
                           Any $initialSubObject := CAST(Indexed Any, $initialProperty)[$subObjectIter];
                           If ISA($initialSubObject, com.nm.sdk.data.dataitems.DataObject) Then
                              String $silId := TOSTRING(CAST(com.nm.sdk.data.dataitems.DataObject, $initialSubObject).getProperty('id'));
                              If NotEmpty($silId) Then
                                 //has a SIL ID
                                 Boolean $foundObjectWithSameSILID := false;
                                 ForEach Any $modifiedSubObject In CAST(Indexed Any, $modifiedProperty) Do
                                    If ISA($modifiedSubObject, com.nm.sdk.data.dataitems.DataObject) and EQUAL(TOSTRING(CAST(com.nm.sdk.data.dataitems.DataObject, $modifiedSubObject).getProperty('id')), $silId) Then
                                       $modifiedSubObject := INT_SILMappingCMNtoSIL._compareEntities($modifiedSubObject, $initialSubObject);
                                       $foundObjectWithSameSILID := true;
                                    End
                                 End
                                 If not $foundObjectWithSameSILID Then
                                    //we must delete the ressource from first list
                                 End
                              End
                           Else
                              //We do nothing, we send the new list
                           End
                        End
                     Else
                        //is not a collection
                        PRINTLN('comparing complex data: ', $propertyName);
                        com.nm.sdk.data.dataitems.DataObject $modifiedMappedProperty := CAST(com.nm.sdk.data.dataitems.DataObject, $modifiedProperty);
                        com.nm.sdk.data.dataitems.DataObject $initialMappedProperty := CAST(com.nm.sdk.data.dataitems.DataObject, $initialProperty);
                        INT_SILMappingCMNtoSIL._compareEntities($modifiedMappedProperty, $initialMappedProperty);
                     End
                  Else
                     //we keep the modified property as it has been modified and is primitive
                  End
               Else
                  //the data do not exist anymore, we must send an empty object
                  If not INT_Mapping._isPrimitiveType($initialProperty) Then
                     $modifiedDataObject.setProperty($propertyName, CreateSkeletonDataClass($initialProperty.getDataEntityType()));
                  Else
                     $modifiedDataObject.setProperty($propertyName, NEW($initialProperty.getDataEntityType()));
                  End
               End
            Else
               //initial property is null
               If $modifiedProperty != null Then
                  //we keep the modified property as it has been modified
               Else
                  FAIL('impossible ' & TOSTRING($propertyName));
                  //impossible because they are equal (null)
               End
            End
         End
      End
   End
   Return $modifiedEntity;
End]]></definition>
        </method>
        <method name="convertCMNPartyToSILInvolvedParty" userId="pezzi" uuid="ffffffff-a03a-def9-0000-000000000000">
            <definition><![CDATA[/** 
	Converts a CMN_Paty to an SIL_InvolvedParty. Always use this function to map Individual / Legal. 
    @params $cmnParty is the CMN_Party object
**/
StaticFunction convertCMNPartyToSILInvolvedParty(CMN_Party $cmnParty) : SIL_INVOLVEDPARTYinvolvedParty Begin
   SIL_INVOLVEDPARTYinvolvedParty $silInvolvedParty;
   /******************** SELECT USE CASE **********************/
   Try
      If $cmnParty.type.isPhysicalPerson() Then
         $silInvolvedParty := INT_SILMappingCMNtoSIL.createSILIndividual(CAST(CMN_PhysicalPerson, $cmnParty));
      ElseIf $cmnParty.type.isLegalEntity() Then
         $silInvolvedParty := INT_SILMappingCMNtoSIL.createSILOrganization(CAST(CMN_LegalEntity, $cmnParty));
      Else
         LIB_Logger.integrationError('UNKNOWN Party TYPE CONVERT: ' & TOSTRING($cmnParty));
      End
   Catch
      LIB_Logger.integrationError('[INT_SILMapping]: ' & $exception.getMessage());
   End
   /***********************************************************/
   IF($cmnParty.label != null, $silInvolvedParty.clientIdentification := $cmnParty.label);
   IF($cmnParty.fiscalDomicile != null, $silInvolvedParty.domicile := $cmnParty.fiscalDomicile);
   IF($cmnParty.tin != null, $silInvolvedParty.taxId := $cmnParty.tin);
   IF($cmnParty.getSILID() != null, $silInvolvedParty.id := $cmnParty.getSILID());
   Return $silInvolvedParty;
End]]></definition>
        </method>
        <method name="createSILAccount" userId="pezzi" uuid="00000000-6536-5e93-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILAccount'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILAccount(CMN_BusinessRelationship $cmnBusinessRelationship, SIL_ACCOUNTaccount $silAccount := null) : SIL_ACCOUNTaccount Begin
   If $silAccount == null Then
      $silAccount := CAST(SIL_ACCOUNTaccount, CreateSkeletonDataClass(SIL_ACCOUNTaccount));
   End
   /*************************************** GENERAL FIELDS ***********************************************/
   IF($cmnBusinessRelationship.getSILID() != null, $silAccount.accountId := $cmnBusinessRelationship.getSILID());
   IF($cmnBusinessRelationship.number != null, $silAccount.number := $cmnBusinessRelationship.number);
   IF(NotEmpty($cmnBusinessRelationship.clientSubtype), $silAccount.accountSubType := LIST($cmnBusinessRelationship.clientSubtype, 'CMN_ClientSubtype', 'sil_Id'));
   If $cmnBusinessRelationship.relationshipCode != null or $cmnBusinessRelationship.kytProfile.purposeOfAccount.actualRelationshipSize != null Then
      SIL_GROUPrelationship $silGroupRelation := CAST(SIL_GROUPrelationship, CreateSkeletonDataClass(SIL_GROUPrelationship));
      IF($cmnBusinessRelationship.kytProfile.purposeOfAccount.actualRelationshipSize != null, $silGroupRelation.expectedAUM := $cmnBusinessRelationship.kytProfile.purposeOfAccount.actualRelationshipSize);
      IF($cmnBusinessRelationship.relationshipCode != null, $silGroupRelation.id := $cmnBusinessRelationship.relationshipCode);
      $silAccount.relationships.addElement($silGroupRelation);
   End
   $silAccount.openningTeam := CAST(SIL_INVOLVEDPARTYdesk, CreateSkeletonDataClass(SIL_INVOLVEDPARTYdesk));
   $silAccount.openningTeam.costCenterId := $cmnBusinessRelationship.openingTeamGroup;
   If $cmnBusinessRelationship.bookingCenter != null Then
      SIL_INVOLVEDPARTYdepartment $silDepartment := CAST(SIL_INVOLVEDPARTYdepartment, CreateSkeletonDataClass(SIL_INVOLVEDPARTYdepartment));
      $silAccount.openningTeam.isRelatedToUnit := $silDepartment;
      $silDepartment.bookingCenter := LIST($cmnBusinessRelationship.bookingCenter, 'CMN_BookingCenter__selector', 'sil_Id', 'id');
   End
   If NotEmpty($cmnBusinessRelationship.relationshipCountry) Then
      $silAccount.accountMarketPurityCountry := CAST(SIL_STATICcountry, CreateSkeletonDataClass(SIL_STATICcountry));
      $silAccount.accountMarketPurityCountry.code := $cmnBusinessRelationship.relationshipCountry;
   End
   IF($cmnBusinessRelationship.kytProfile.generalInformation.committedDate != null, $silAccount.openingDate := $cmnBusinessRelationship.kytProfile.generalInformation.committedDate);
   IF($cmnBusinessRelationship.kytProfile.generalInformation.accountHeadingType != null, $silAccount.accountHeadingType := LIST($cmnBusinessRelationship.kytProfile.generalInformation.accountHeadingType, 'COB_AccountHeadingTypes', 'sil_Id'));
   IF($cmnBusinessRelationship.kytProfile.generalInformation.isCoreMarket != null, $silAccount.accountInCoreMarketIndicator := $cmnBusinessRelationship.kytProfile.generalInformation.isCoreMarket);
   IF($cmnBusinessRelationship.kytProfile.generalInformation.descriptionCoreMarket != null, $silAccount.nonCoreMarketApprovalDescription := $cmnBusinessRelationship.kytProfile.generalInformation.descriptionCoreMarket);
   IF($cmnBusinessRelationship.kytProfile.purposeOfAccount.hasPCM != null, $silAccount.pcmProductIndicator := $cmnBusinessRelationship.kytProfile.purposeOfAccount.hasPCM);
   IF($cmnBusinessRelationship.kytProfile.purposeOfAccount.PCMId != null, $silAccount.pcmProductReferenceId := $cmnBusinessRelationship.kytProfile.purposeOfAccount.PCMId);
   IF($cmnBusinessRelationship.kytProfile.purposeOfAccount.reasonAccountOpened != null, $silAccount.openingReason := $cmnBusinessRelationship.kytProfile.purposeOfAccount.reasonAccountOpened);
   If $cmnBusinessRelationship.currency != null Then
      $silAccount.defaultCurrency := INT_SILMappingCMNtoSIL.createSILCurrency($cmnBusinessRelationship.currency);
   End
   IF(NotEmpty($cmnBusinessRelationship.getName()), $silAccount.longName := $cmnBusinessRelationship.getName());
   /******** KYT - General Information ************/
   $silAccount.society := LIST($cmnBusinessRelationship.bookingCenter, 'CMN_BookingCenter__selector', 'sil_Id', 'id');
   /******** Relationship Manager ************/
   $silAccount.accountRelations := NewIndexed(SIL_RELATIONrelation);
   If NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.accountManager) Then
      SIL_INVOLVEDPARTYRELATIONemployeeContractRelation $silINVOLVEDPARTYRELATIONemployeeContractRelation := CAST(SIL_INVOLVEDPARTYRELATIONemployeeContractRelation, CreateSkeletonDataClass(SIL_INVOLVEDPARTYRELATIONemployeeContractRelation));
      SIL_INVOLVEDPARTYaccountOfficer $silINVOLVEDPARTYrelationshipManager := CAST(SIL_INVOLVEDPARTYaccountOfficer, CreateSkeletonDataClass(SIL_INVOLVEDPARTYaccountOfficer));
      $silAccount.accountEmployees.addElement($silINVOLVEDPARTYRELATIONemployeeContractRelation);
      $silINVOLVEDPARTYrelationshipManager.type := LIST($cmnBusinessRelationship.kytProfile.generalInformation.accountManager, 'CMN_KYTAccountManager__selector', 'sil_id');
      If EQUAL($cmnBusinessRelationship.kytProfile.generalInformation.accountManager, 'grou') Then
         If NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.hsbcEntityCountry) Then
            SIL_INVOLVEDPARTYorganization $silDepartment := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
            SIL_INVOLVEDPARTYincorporation $silIncorporation := CAST(SIL_INVOLVEDPARTYincorporation, CreateSkeletonDataClass(SIL_INVOLVEDPARTYincorporation));
            $silIncorporation.incorporateCountry := INT_SILMappingCMNtoSIL_v2.createSILCountry($cmnBusinessRelationship.kytProfile.generalInformation.hsbcEntityCountry);
            $silDepartment.documentationItems.addElement($silIncorporation);
            $silDepartment.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName);
            SIL_INVOLVEDPARTYorganizationName $businessName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
            $businessName.businessName := $cmnBusinessRelationship.kytProfile.generalInformation.getHSBCEntityName();
            $silDepartment.names.addElement($businessName);
            //$silDepartment.id
            $silINVOLVEDPARTYrelationshipManager.inContext := $silDepartment;
         End
      Else
         If NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.companyName) or NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.firstName) or NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.lastName) Then
            If NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.companyName) and (EMPTY($cmnBusinessRelationship.kytProfile.generalInformation.firstName) and NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.lastName)) Then
               $silINVOLVEDPARTYrelationshipManager.party := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
               $silINVOLVEDPARTYrelationshipManager.party.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName);
               SIL_INVOLVEDPARTYorganizationName $businessName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
               $businessName.businessName := $cmnBusinessRelationship.kytProfile.generalInformation.companyName;
               $silINVOLVEDPARTYrelationshipManager.party.names.addElement($businessName);
            ElseIf (NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.firstName) or NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.lastName)) Then
               $silINVOLVEDPARTYrelationshipManager.party := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
               $silINVOLVEDPARTYrelationshipManager.party.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName);
               SIL_INVOLVEDPARTYindividualName $rmName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
               IF($cmnBusinessRelationship.kytProfile.generalInformation.firstName != null, $rmName.firstName := $cmnBusinessRelationship.kytProfile.generalInformation.firstName);
               IF($cmnBusinessRelationship.kytProfile.generalInformation.lastName != null, $rmName.lastName := $cmnBusinessRelationship.kytProfile.generalInformation.lastName);
               $silINVOLVEDPARTYrelationshipManager.party.names.addElement($rmName);
            End
         Else
            LIB_Logger.integrationWarn('Unable to map account is managed by to identified type: ' & $cmnBusinessRelationship.kytProfile.generalInformation.companyName & ', ' & $cmnBusinessRelationship.kytProfile.generalInformation.firstName & ', ' & $cmnBusinessRelationship.kytProfile.generalInformation.lastName);
         End
         If NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.country) Then
            SIL_INVOLVEDPARTYorganization $silDepartment := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
            SIL_INVOLVEDPARTYincorporation $silIncorporation := CAST(SIL_INVOLVEDPARTYincorporation, CreateSkeletonDataClass(SIL_INVOLVEDPARTYincorporation));
            $silIncorporation.incorporateCountry := INT_SILMappingCMNtoSIL.createSILCountry($cmnBusinessRelationship.kytProfile.generalInformation.country);
            $silDepartment.documentationItems.addElement($silIncorporation);
            $silINVOLVEDPARTYrelationshipManager.inContext := $silDepartment;
         End
         If EQUAL($cmnBusinessRelationship.kytProfile.generalInformation.accountManager, 'pbsg') or EQUAL($cmnBusinessRelationship.kytProfile.generalInformation.accountManager, 'pbhk') Then
            SIL_INVOLVEDPARTYaccountOfficer $silINVOLVEDPARTYSecondaryrelationshipManager := CAST(SIL_INVOLVEDPARTYaccountOfficer, CreateSkeletonDataClass(SIL_INVOLVEDPARTYaccountOfficer));
            $silINVOLVEDPARTYrelationshipManager.secondary := $silINVOLVEDPARTYSecondaryrelationshipManager;
            If NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.id2nd) Then
               $silINVOLVEDPARTYSecondaryrelationshipManager.party := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
               $silINVOLVEDPARTYSecondaryrelationshipManager.party.id := $cmnBusinessRelationship.kytProfile.generalInformation.id2nd;
               If NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.firstName2nd) or NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.lastName2nd) Then
                  SIL_INVOLVEDPARTYindividualName $rmName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
                  IF($cmnBusinessRelationship.kytProfile.generalInformation.firstName2nd != null, $rmName.firstName := $cmnBusinessRelationship.kytProfile.generalInformation.firstName2nd);
                  IF($cmnBusinessRelationship.kytProfile.generalInformation.lastName2nd != null, $rmName.lastName := $cmnBusinessRelationship.kytProfile.generalInformation.lastName2nd);
                  $silINVOLVEDPARTYSecondaryrelationshipManager.party.names.addElement($rmName);
               End
               If NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.country2nd) Then
                  SIL_INVOLVEDPARTYorganization $silDepartment := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
                  SIL_INVOLVEDPARTYincorporation $silIncorporation := CAST(SIL_INVOLVEDPARTYincorporation, CreateSkeletonDataClass(SIL_INVOLVEDPARTYincorporation));
                  $silIncorporation.incorporateCountry := INT_SILMappingCMNtoSIL.createSILCountry($cmnBusinessRelationship.kytProfile.generalInformation.country2nd);
                  $silDepartment.documentationItems.addElement($silIncorporation);
                  $silINVOLVEDPARTYSecondaryrelationshipManager.inContext := $silDepartment;
               End
            End
         End
      End
      $silINVOLVEDPARTYRELATIONemployeeContractRelation.employeeRole := $silINVOLVEDPARTYrelationshipManager;
   End
   If NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.businessAreaDeskHead) Then
      SIL_INVOLVEDPARTYRELATIONemployeeContractRelation $silINVOLVEDPARTYRELATIONemployeeContractRelation := CAST(SIL_INVOLVEDPARTYRELATIONemployeeContractRelation, CreateSkeletonDataClass(SIL_INVOLVEDPARTYRELATIONemployeeContractRelation));
      SIL_INVOLVEDPARTYemployeeRole $silINVOLVEDPARTYrelationshipManager := CAST(SIL_INVOLVEDPARTYemployeeRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYemployeeRole));
      $silINVOLVEDPARTYRELATIONemployeeContractRelation.employeeRole := $silINVOLVEDPARTYrelationshipManager;
      $silAccount.accountEmployees.addElement($silINVOLVEDPARTYRELATIONemployeeContractRelation);
      $silINVOLVEDPARTYrelationshipManager.party := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
      SIL_INVOLVEDPARTYindividualName $deskHeadName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
      $silINVOLVEDPARTYrelationshipManager.party.names.addElement($deskHeadName);
      LIB_User $deskHead := NEW(LIB_User, $cmnBusinessRelationship.kytProfile.generalInformation.businessAreaDeskHead);
      $silINVOLVEDPARTYrelationshipManager.id := $deskHead.getUserId();
      $deskHeadName.firstName := $deskHead.getFirstName();
      $deskHeadName.lastName := $deskHead.getLastName();
      $deskHeadName.fullName := $deskHead.getFullName();
   End
   INT_SILMappingCMNtoSILVariationFactory__selector().createSILAccount($cmnBusinessRelationship, $silAccount);
   /******** Portfolio Manager ************/
   $silAccount.portfolios := INT_SILMappingCMNtoSIL.createSILPortfolios($cmnBusinessRelationship);
   Return $silAccount;
End]]></definition>
        </method>
        <method name="createSILAccountFunding" userId="pezzi" uuid="00000000-0ba9-00ea-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILAccountFunding'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILAccountFunding(CMN_BusinessRelationship $cmnBusinessRelationship, SIL_ACCOUNTaccountFunding $silAccountFunding := null) : SIL_ACCOUNTaccountFunding Begin
   If $silAccountFunding == null Then
      $silAccountFunding := CAST(SIL_ACCOUNTaccountFunding, CreateSkeletonDataClass(SIL_ACCOUNTaccountFunding));
   End
   IF($cmnBusinessRelationship.kytProfile.purposeOfAccount.expectedAccountSize != null, $silAccountFunding.expectedAmount := TODOUBLE($cmnBusinessRelationship.kytProfile.purposeOfAccount.expectedAccountSize));
   IF($cmnBusinessRelationship.kytProfile.purposeOfAccount.deadlineToFundAccount != null, $silAccountFunding.expectedAmountDeadline := DATEPARSE(TOSTRING($cmnBusinessRelationship.kytProfile.purposeOfAccount.deadlineToFundAccount), 'y', LIB_ConfigHelper.getDefaultLocale('en'), 'UTC'));
   IF($cmnBusinessRelationship.kytProfile.purposeOfAccount.comments != null, $silAccountFunding.comments := $cmnBusinessRelationship.kytProfile.purposeOfAccount.comments);
   IF(NotEmpty($cmnBusinessRelationship.kytProfile.initialFunding.getSILID()), $silAccountFunding.id := $cmnBusinessRelationship.kytProfile.initialFunding.getSILID());
   IF($cmnBusinessRelationship.kytProfile.initialFunding.fundsExplanation != null, $silAccountFunding.initialFundingExplanation := $cmnBusinessRelationship.kytProfile.initialFunding.fundsExplanation);
   //IF($cmnBusinessRelationship.kytProfile.initialOverallRiskAssessment.hasInitialFunding != null, $silAccountFunding.largePhysicalAssetDepositIndicator := $cmnBusinessRelationship.kytProfile.initialOverallRiskAssessment.hasInitialFunding);
   Return $silAccountFunding;
End]]></definition>
        </method>
        <method name="createSILAccountFundingTransfer" userId="pezzi" uuid="00000000-2969-92f5-0000-000000000000">
            <definition><![CDATA[StaticFunction createSILAccountFundingTransfer(CMN_BusinessRelationship $cmnBusinessRelationship, Indexed SIL_ORDERtransfer $silAccountFundingTransfers := null) : Indexed SIL_ORDERtransfer Begin
   If not LIB_Validator.validateNotEmptyIndexed($silAccountFundingTransfers) Then
      $silAccountFundingTransfers := NewIndexed(SIL_ORDERtransfer);
   End
   SIL_ORDERtransfer $silORDERtransfer;
   /********************* SOURCE OF FUNDS ***************************/
   If $cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsCashAmount != null Then
      $silORDERtransfer := INT_SILMappingCMNtoSIL.createSILTransfer($cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsCashAmount, '6');
      If $silORDERtransfer != null Then
         IF(NotEmpty($cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsCashAmountId), $silORDERtransfer.id := $cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsCashAmountId);
         $silAccountFundingTransfers.addElement($silORDERtransfer);
      End
   End
   If $cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsPreciousMetalAmount != null Then
      $silORDERtransfer := INT_SILMappingCMNtoSIL.createSILTransfer($cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsPreciousMetalAmount, '8');
      If $silORDERtransfer != null Then
         IF(NotEmpty($cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsPreciousMetalAmountId), $silORDERtransfer.id := $cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsPreciousMetalAmountId);
         $silAccountFundingTransfers.addElement($silORDERtransfer);
      End
   End
   If $cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsSecuritiesAmount != null Then
      $silORDERtransfer := INT_SILMappingCMNtoSIL.createSILTransfer($cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsSecuritiesAmount, '9');
      If $silORDERtransfer != null Then
         IF(NotEmpty($cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsSecuritiesAmountId), $silORDERtransfer.id := $cmnBusinessRelationship.kytProfile.initialFunding.phyAssetsSecuritiesAmountId);
         $silAccountFundingTransfers.addElement($silORDERtransfer);
      End
   End
   /********************* CHEQUE Transfers ***************************/
   CMN_KYTSourceOfFund $cmnKYTSourceOfFund;
   If LIB_Validator.validateNotEmptyIndexed($cmnBusinessRelationship.kytProfile.initialFunding.cheque) Then
      ForEach $cmnKYTSourceOfFund In $cmnBusinessRelationship.kytProfile.initialFunding.cheque Do
         //If $cmnKYTSourceOfFund.expectedAmount != 0.0 Then
         $silORDERtransfer := INT_SILMappingCMNtoSIL.createSILTransfer($cmnKYTSourceOfFund.expectedAmount, '5', $cmnKYTSourceOfFund, $cmnBusinessRelationship);
         If $silORDERtransfer != null Then
            $silAccountFundingTransfers.addElement($silORDERtransfer);
         End
         //End
      End
   End
   /********************* WIRE Transfers ***************************/
   If LIB_Validator.validateNotEmptyIndexed($cmnBusinessRelationship.kytProfile.initialFunding.wireTransfers) Then
      ForEach $cmnKYTSourceOfFund In $cmnBusinessRelationship.kytProfile.initialFunding.wireTransfers Do
         $silORDERtransfer := INT_SILMappingCMNtoSIL.createSILTransfer($cmnKYTSourceOfFund.expectedAmount, '3', $cmnKYTSourceOfFund, $cmnBusinessRelationship);
         If $silORDERtransfer != null Then
            $silAccountFundingTransfers.addElement($silORDERtransfer);
         End
      End
   End
   /********************* SECURITY Transfers ***************************/
   If LIB_Validator.validateNotEmptyIndexed($cmnBusinessRelationship.kytProfile.initialFunding.securities) Then
      ForEach $cmnKYTSourceOfFund In $cmnBusinessRelationship.kytProfile.initialFunding.securities Do
         $silORDERtransfer := INT_SILMappingCMNtoSIL.createSILTransfer($cmnKYTSourceOfFund.expectedAmount, '4', $cmnKYTSourceOfFund, $cmnBusinessRelationship);
         If $silORDERtransfer != null Then
            $silAccountFundingTransfers.addElement($silORDERtransfer);
         End
      End
   End
   Return $silAccountFundingTransfers;
End]]></definition>
        </method>
        <method name="createSILAccountHolderRole" userId="pezzi" uuid="ffffffff-80b4-6b35-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILAccountHolderRole'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILAccountHolderRole(CMN_Party $cmnParty, CMN_BusinessRelationship $cmnBusinessRelationship, SIL_INVOLVEDPARTYinvolvedParty $silParty) : SIL_INVOLVEDPARTYinvolvedParty Begin
   If $silParty == null Then
      Return $silParty;
   End
   CMN_AssignedBRRole $accountHolderRole := CAST(CMN_AssignedBRRole, $cmnParty.getAssignedRole('ah'));
   If $accountHolderRole == null Then
      Return $silParty;
   End
   SIL_INVOLVEDPARTYaccountHolder $silRole := CAST(SIL_INVOLVEDPARTYaccountHolder, CreateSkeletonDataClass(SIL_INVOLVEDPARTYaccountHolder));
   IF($accountHolderRole.getBRRoleAttributes().isMain != null, $silRole.isPrimary := $accountHolderRole.getBRRoleAttributes().isMain);
   $silParty.roles.addElement($silRole);
   Return $silParty;
End]]></definition>
        </method>
        <method name="createSILAccountInvestment" userId="pezzi" uuid="00000000-3c77-91c6-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILAccountInvestment'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILAccountInvestment(CMN_BusinessRelationship $businessRelationship) : Indexed SIL_ACCOUNTaccountInvestment Begin
   Indexed SIL_ACCOUNTaccountInvestment $silAccountInvestments := NewIndexed(SIL_ACCOUNTaccountInvestment);
   If $businessRelationship != null && $businessRelationship.optionalServices != null Then
      CMN_AvailableOptionCategory $availableOptionCategory;
      String $optionID := '';
      $optionID := 'fiduciaryTimeDepositMandate';
      SIL_ACCOUNTaccountInvestment $silAccountInvestment := CAST(SIL_ACCOUNTaccountInvestment, CreateSkeletonDataClass(SIL_ACCOUNTaccountInvestment));
      SIL_ORDERfiduciary $silFiduciary := CAST(SIL_ORDERfiduciary, CreateSkeletonDataClass(SIL_ORDERfiduciary));
      $silAccountInvestment.fiduciary.addElement($silFiduciary);
      $silAccountInvestments.addElement($silAccountInvestment);
      If $businessRelationship.optionalServices.isOptionSelected($optionID) Then
         CMN_OptionalServiceFiducTimeDepMandate $optionalService := CAST(CMN_OptionalServiceFiducTimeDepMandate, $businessRelationship.optionalServices.getOptionalService($optionID));
         If NotEmpty($optionalService.fiduciaryAccount) Then
            ForEach String $fiduciaryAccount In SPLIT($optionalService.fiduciaryAccount, '|') Do
               $silFiduciary.executionSignatureTypes.addElement(LIST($fiduciaryAccount, 'CMN_OptionsFiduciaryDeposit', 'sil_Id'));
            End
         End
      End
      $optionID := 'fiduciaryDepositHighRisk';
      If $businessRelationship.optionalServices.isOptionSelected($optionID) Then
         CMN_OptionalServiceFiducTimeDepMandateHighRisk $optionalService := CAST(CMN_OptionalServiceFiducTimeDepMandateHighRisk, $businessRelationship.optionalServices.getOptionalService($optionID));
         $silFiduciary.counterpartyRole := CAST(SIL_INVOLVEDPARTYthirdPartyRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYthirdPartyRole));
         $silFiduciary.counterpartyRole.party := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
         SIL_INVOLVEDPARTYorganizationName $silOrganizationName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
         $silFiduciary.counterpartyRole.party.names.addElement($silOrganizationName);
         $silOrganizationName.businessName := $optionalService.counterPartyBank;
         $silFiduciary.fiduciaryAmount := $optionalService.amount;
         If NotEmpty($optionalService.address) Then
            SIL_INVOLVEDPARTYpostalAddress $silPostalAddress := CAST(SIL_INVOLVEDPARTYpostalAddress, CreateSkeletonDataClass(SIL_INVOLVEDPARTYpostalAddress));
            $silPostalAddress.fullAddress := $optionalService.address;
            $silFiduciary.counterpartyRole.party.addresses.addElement($silPostalAddress);
         End
         IF(NotEmpty($optionalService.currency), $silFiduciary.defaultCurrency := INT_SILMappingCMNtoSIL.createSILCurrency($optionalService.currency));
         IF(NotEmpty($optionalService.duration), $silFiduciary.fiduciaryAmount := IF($optionalService.duration == 'determined', 'DET', 'UND'));
         If $optionalService.duration == 'determined' Then
            $silFiduciary.specifyDuration := $optionalService.durationDetermined;
            IF(NotEmpty($optionalService.renewableOption), $silFiduciary.renewableType := LIST($optionalService.renewableOption, 'CMN_OptionalFiduciaryDepositHighRisk', 'sil_Id'));
         End
      End
      $silAccountInvestment.investedInDerivativeProductIndicator := $businessRelationship.optionalServices.isOptionSelected('specialForwardTransaction');
   End
   Return $silAccountInvestments;
End]]></definition>
        </method>
        <method name="createSILAccountProfile" userId="pezzi" uuid="00000000-1797-c796-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILAccountProfile'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILAccountProfile(CMN_BusinessRelationship $cmnBusinessRelationship, SIL_ACCOUNTaccount $silACCOUNTaccount := null) : SIL_ACCOUNTaccount Begin
   If $silACCOUNTaccount == null Then
      $silACCOUNTaccount := CAST(SIL_ACCOUNTaccount, CreateSkeletonDataClass(SIL_ACCOUNTaccount));
   End
   If $cmnBusinessRelationship == null Then
      Return $silACCOUNTaccount;
   End
   If $silACCOUNTaccount.initialVisit == null Then
      $silACCOUNTaccount.initialVisit := CAST(SIL_ACCOUNTaccountInitialVisit, CreateSkeletonDataClass(SIL_ACCOUNTaccountInitialVisit));
   End
   If $silACCOUNTaccount.accountProfile == null Then
      $silACCOUNTaccount.accountProfile := CAST(SIL_ACCOUNTaccountProfile, CreateSkeletonDataClass(SIL_ACCOUNTaccountProfile));
   End
   If $cmnBusinessRelationship.kytProfile.visitation.hasCustomerVisitedPremises != null Then
      $silACCOUNTaccount.accountProfile.hasClientBeenVisited := $cmnBusinessRelationship.kytProfile.visitation.hasCustomerVisitedPremises;
   End
   If $cmnBusinessRelationship.kytProfile.referrals.isReferred != null Then
      $silACCOUNTaccount.accountProfile.isReferred := INT_SILMatchingTools.matchCMNBooleanToSILYesNo($cmnBusinessRelationship.kytProfile.referrals.isReferred);
   End
   
   $silACCOUNTaccount.accountProfile.addtionalSafeNeeded := $cmnBusinessRelationship.kytProfile.purposeOfAccount.hasRelationshipSafeAttorneyOrHolder($cmnBusinessRelationship);
   If $cmnBusinessRelationship.kytProfile.visitation.hasCustomerVisitedPremises != null Then
      If $cmnBusinessRelationship.kytProfile.visitation.hasCustomerVisitedPremises Then
         If LIB_Validator.validateNotEmptyIndexed($cmnBusinessRelationship.kytProfile.visitation.placesFirstVisit) Then
            $silACCOUNTaccount.initialVisit.initialVisitLocations := NewIndexed(SIL_STATICLocation);
            ForEach String $location In $cmnBusinessRelationship.kytProfile.visitation.placesFirstVisit Do
               SIL_STATICLocation $silSTATIClocation := CAST(SIL_STATICLocation, CreateSkeletonDataClass(SIL_STATICLocation));
               If $location.equals('others') && NotEmpty($cmnBusinessRelationship.kytProfile.visitation.othersPlacesVisit) Then
                  $silSTATIClocation.name := $cmnBusinessRelationship.kytProfile.visitation.othersPlacesVisit;
               End
               $silSTATIClocation.type := LIST($location, 'CMN_PlaceOfFirstVisit__selector', 'sil_id', 'id');
               $silACCOUNTaccount.initialVisit.initialVisitLocations.addElement($silSTATIClocation);
            End
         End
         IF($cmnBusinessRelationship.kytProfile.visitation.descriptionFirstVisitNewClient != null, $silACCOUNTaccount.initialVisit.report := $cmnBusinessRelationship.kytProfile.visitation.descriptionFirstVisitNewClient);
         If LIB_Validator.validateNotEmptyIndexed($cmnBusinessRelationship.kytProfile.partners) Then
            $silACCOUNTaccount.initialVisit.contactActivities := NewIndexed(SIL_CONTACTACTIVITYvisitComplete);
            SIL_CONTACTACTIVITYvisitComplete $silCONTACTACTIVITYcontactActivity;
            ForEach CMN_Partner $cmnPartner In $cmnBusinessRelationship.kytProfile.partners Do
               If $cmnPartner.isVisited Then
                  $silCONTACTACTIVITYcontactActivity := CAST(SIL_CONTACTACTIVITYvisitComplete, CreateSkeletonDataClass(SIL_CONTACTACTIVITYvisitComplete));
                  SIL_INVOLVEDPARTYcustomerRole $silINVOLVEDPARTYinvolvedPartyRole := CAST(SIL_INVOLVEDPARTYcustomerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcustomerRole));
                  $silINVOLVEDPARTYinvolvedPartyRole.party := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
                  IF(NotEmpty($cmnPartner.id), $silINVOLVEDPARTYinvolvedPartyRole.party.id := $cmnPartner.id);
                  If NotEmpty($cmnPartner.getFullName()) Then
                     $silINVOLVEDPARTYinvolvedPartyRole.party.names := NewIndexed(SIL_INVOLVEDPARTYindividualName);
                     SIL_INVOLVEDPARTYindividualName $silINVOLVEDPARTYindividualName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
                     $silINVOLVEDPARTYindividualName.firstName := $cmnPartner.firstName;
                     $silINVOLVEDPARTYindividualName.lastName := $cmnPartner.lastName;
                     $silINVOLVEDPARTYindividualName.fullName := $cmnPartner.getFullName();
                     $silINVOLVEDPARTYinvolvedPartyRole.party.names[1] := $silINVOLVEDPARTYindividualName;
                  End
                  If NotEmpty($cmnPartner.role) Then
                     ForEach String $role In SPLIT($cmnPartner.role, ',') Do
                        If EMPTY($silINVOLVEDPARTYinvolvedPartyRole.type) Then
                           $silINVOLVEDPARTYinvolvedPartyRole.type := TRANSLATE($role, 'en');
                        Else
                           $silINVOLVEDPARTYinvolvedPartyRole.type := CONCAT($silINVOLVEDPARTYinvolvedPartyRole.type, ',', TRANSLATE($role, 'en'));
                        End
                     End
                  End
                  IF($cmnPartner.visitedDate != null, $silCONTACTACTIVITYcontactActivity.dateOfVisit := $cmnPartner.visitedDate);
                  $silCONTACTACTIVITYcontactActivity.responsibleRole := CAST(SIL_INVOLVEDPARTYemployeeRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYemployeeRole));
                  $silCONTACTACTIVITYcontactActivity.responsibleRole.party := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
                  $silCONTACTACTIVITYcontactActivity.responsibleRole.party.names := NewIndexed(SIL_INVOLVEDPARTYindividualName);
                  SIL_INVOLVEDPARTYindividualName $individualName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
                  IF($cmnPartner.visitedbyFirstName != null, $individualName.firstName := $cmnPartner.visitedbyFirstName);
                  IF($cmnPartner.visitedbyLastName != null, $individualName.lastName := $cmnPartner.visitedbyLastName);
                  $silCONTACTACTIVITYcontactActivity.responsibleRole.party.names.addElement($individualName);
                  $silCONTACTACTIVITYcontactActivity.visitedRoles := NewIndexed(SIL_INVOLVEDPARTYaccountPartyRole);
                  $silCONTACTACTIVITYcontactActivity.visitedRoles.addElement($silINVOLVEDPARTYinvolvedPartyRole);
                  $silACCOUNTaccount.initialVisit.contactActivities.addElement($silCONTACTACTIVITYcontactActivity);
               End
            End
         End
      Else
         IF($cmnBusinessRelationship.kytProfile.visitation.reasonCustomerNotVisited != null, $silACCOUNTaccount.initialVisit.nextVisitPlanDescription := $cmnBusinessRelationship.kytProfile.visitation.reasonCustomerNotVisited);
         IF($cmnBusinessRelationship.kytProfile.visitation.plannedFirstVisitDate != null, $silACCOUNTaccount.initialVisit.nextVisitDate := $cmnBusinessRelationship.kytProfile.visitation.plannedFirstVisitDate);
      End
   End
   /**** Variated property ****/
   INT_SILMappingCMNtoSILVariationFactory__selector().createSILAccountProfile($cmnBusinessRelationship, $silACCOUNTaccount);
   Return $silACCOUNTaccount;
End]]></definition>
        </method>
        <method name="createSILAccountPurpose" userId="pezzi" uuid="00000000-1ce5-3b0b-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILPurposeAccount'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILAccountPurpose(CMN_BusinessRelationship $cmnBusinessRelationship, SIL_ACCOUNTaccount $silAccount) : SIL_ACCOUNTaccount Begin
   If $silAccount == null Then
      $silAccount := CAST(SIL_ACCOUNTaccount, CreateSkeletonDataClass(SIL_ACCOUNTaccount));
   End
   If $cmnBusinessRelationship == null Then
      Return $silAccount;
   End
   /************** Puprpose of account *****************/
   $silAccount.accountPurposes := NewIndexed(SIL_ACCOUNTaccountPurpose);
   If LIB_Validator.validateNotEmptyIndexed($cmnBusinessRelationship.kytProfile.purposeOfAccount.purposeSelection) Then
      ForEach String $cmnAccountPurpose In $cmnBusinessRelationship.kytProfile.purposeOfAccount.purposeSelection Do
         SIL_ACCOUNTaccountPurpose $silAccountPurpose := CAST(SIL_ACCOUNTaccountPurpose, CreateSkeletonDataClass(SIL_ACCOUNTaccountPurpose));
         $silAccountPurpose.purposeType := INT_SILMatchingTools.matchCMNIdToSILAccountPurposeId($cmnAccountPurpose);
         IF($cmnAccountPurpose == 'others', $silAccountPurpose.description := $cmnBusinessRelationship.kytProfile.purposeOfAccount.otherPurpose);
         $silAccount.accountPurposes.addElement($silAccountPurpose);
      End
   End
   INT_SILMappingCMNtoSILVariationFactory__selector().createSILAccountPurpose($cmnBusinessRelationship, $silAccount);
   Return $silAccount;
End]]></definition>
        </method>
        <method name="createSILAccountReferral" userId="pezzi" uuid="ffffffff-ec0c-fb50-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILAccountReferral'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILAccountReferral(CMN_BusinessRelationship $cmnBusinessRelationship, SIL_ACCOUNTaccountReferral $silAccountReferral := null) : SIL_ACCOUNTaccountReferral Begin
   If $silAccountReferral == null Then
      $silAccountReferral := CAST(SIL_ACCOUNTaccountReferral, CreateSkeletonDataClass(SIL_ACCOUNTaccountReferral));
   End
   /********************** Refered Partner ***************************/
   If $cmnBusinessRelationship.kytProfile.referrals != null Then
      CMN_KYTReferrals $referrals := $cmnBusinessRelationship.kytProfile.referrals;
      IF(NotEmpty($cmnBusinessRelationship.kytProfile.referrals.getSILID()), $silAccountReferral.id := $cmnBusinessRelationship.kytProfile.referrals.getSILID());
      $silAccountReferral.referredPartnerRoles := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyRole);
      SIL_INVOLVEDPARTYcustomerRole $silINVOLVEDPARTYinvolvedPartyRole := CAST(SIL_INVOLVEDPARTYcustomerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcustomerRole));
      $silAccountReferral.referredPartnerRoles.addElement($silINVOLVEDPARTYinvolvedPartyRole);
      If $referrals.isReferred and LIB_Validator.validateNotEmptyIndexed($cmnBusinessRelationship.kytProfile.partners) Then
         ForEach CMN_Partner $cmnpartner In $cmnBusinessRelationship.kytProfile.partners Do
            If $cmnpartner.isReferred() Then
               SIL_INVOLVEDPARTYindividual $silINVOLVEDPARTYindividual := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
               IF(NotEmpty($cmnpartner.id), $silINVOLVEDPARTYindividual.id := $cmnpartner.id);
               $silINVOLVEDPARTYindividual.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName);
               SIL_INVOLVEDPARTYindividualName $silINVOLVEDPARTYindividualName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
               IF($cmnpartner.firstName != null, $silINVOLVEDPARTYindividualName.firstName := $cmnpartner.firstName);
               IF($cmnpartner.lastName != null, $silINVOLVEDPARTYindividualName.lastName := $cmnpartner.lastName);
               IF($cmnpartner.getFullName() != null, $silINVOLVEDPARTYindividualName.fullName := $cmnpartner.getFullName());
               $silINVOLVEDPARTYindividual.names.addElement($silINVOLVEDPARTYindividualName);
               $silINVOLVEDPARTYinvolvedPartyRole.party := $silINVOLVEDPARTYindividual;
               //IF(NotEmpty($cmnpartner.id), $silINVOLVEDPARTYinvolvedPartyRole.id := $cmnpartner.id);
               If NotEmpty($cmnpartner.role) Then
                  ForEach String $role In SPLIT($cmnpartner.role, ',') Do
                     If EMPTY($silINVOLVEDPARTYinvolvedPartyRole.type) Then
                        $silINVOLVEDPARTYinvolvedPartyRole.type := TRANSLATE($role, 'en');
                     Else
                        $silINVOLVEDPARTYinvolvedPartyRole.type := CONCAT($silINVOLVEDPARTYinvolvedPartyRole.type, ',', TRANSLATE($role, 'en'));
                     End
                  End
               End
               Break;
            End
         End
      End
      SIL_INVOLVEDPARTYreferrerRole $silNVOLVEDPARTYreferrerRole := CAST(SIL_INVOLVEDPARTYreferrerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYreferrerRole));
      $silAccountReferral.referrerRole := $silNVOLVEDPARTYreferrerRole;
      If NotEmpty($referrals.isAnExistingPbrsClient6months) Then
         $silNVOLVEDPARTYreferrerRole.referredByType := '08';
         SIL_INVOLVEDPARTYindividual $silIndividual := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
         $silNVOLVEDPARTYreferrerRole.party := $silIndividual;
         $silNVOLVEDPARTYreferrerRole.party.existingCustomerIndicator := true;
      End
      If NotEmpty($referrals.referredType) Then
         $silNVOLVEDPARTYreferrerRole.referredByType := LIST($referrals.referredType, 'CMN_ReferralReferredParty', 'sil_id');
         /************************ Referring Party ***************************/
         If $referrals.isHSBCGroup() or $referrals.isHSBCGroupPrivateBanking() Then
            If NotEmpty($referrals.referredBy.hsbcGroupCountry) Then
               SIL_INVOLVEDPARTYorganization $silOrganization := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
               SIL_INVOLVEDPARTYincorporation $silIncorporation := CAST(SIL_INVOLVEDPARTYincorporation, CreateSkeletonDataClass(SIL_INVOLVEDPARTYincorporation));
               String $countryCode := LIST($referrals.referredBy.hsbcGroupCountry, 'CMN_ReferralEntity__selector', 'countryCode');
               $silIncorporation.incorporateCountry := INT_SILMappingCMNtoSIL.createSILCountry($countryCode);
               $silOrganization.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName);
               SIL_INVOLVEDPARTYorganizationName $businessName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
               $silOrganization.id := LIST($referrals.referredBy.hsbcGroupCountry, 'CMN_ReferralEntity__selector', 'sil_id');
               $businessName.businessName := LIST($referrals.referredBy.hsbcGroupCountry, 'CMN_ReferralEntity__selector', 'sil_id');
               $businessName.fullName := LIST($referrals.referredBy.hsbcGroupCountry, 'CMN_ReferralEntity__selector', 'sil_id');
               $silOrganization.names.addElement($businessName);
               $silOrganization.documentationItems := NewIndexed(SIL_INVOLVEDPARTYdocumentationItem);
               $silOrganization.documentationItems.addElement($silIncorporation);
               $silNVOLVEDPARTYreferrerRole.party := $silOrganization;
               $silNVOLVEDPARTYreferrerRole.party.existingCustomerIndicator := false;
            End
         Else
            SIL_INVOLVEDPARTYindividual $silIndividual := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
            SIL_INVOLVEDPARTYindividualName $silIndividualName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
            IF($referrals.referredBy.firstName != null, $silIndividualName.firstName := $referrals.referredBy.firstName);
            IF($referrals.referredBy.surname != null, $silIndividualName.lastName := $referrals.referredBy.surname);
            IF($referrals.referredBy.getFullName() != null, $silIndividualName.fullName := $referrals.referredBy.getFullName());
            $silIndividual.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName);
            $silIndividual.names.addElement($silIndividualName);
            IF($referrals.referredBy.id != null, $silIndividual.id := $referrals.referredBy.id);
            IF($referrals.referredBy.relationship != null, $silNVOLVEDPARTYreferrerRole.relationshipWithReferredPartner := $referrals.referredBy.relationship);
            $silNVOLVEDPARTYreferrerRole.party := $silIndividual;
            $silNVOLVEDPARTYreferrerRole.party.existingCustomerIndicator := false;
         End
         If NotEmpty($referrals.referredBy.type) Then
            $silNVOLVEDPARTYreferrerRole.referredBySubType := LIST($referrals.referredBy.type, 'CMN_ReferredTypeByReferralsReferredType', 'sil_Id');
         End
         IF($referrals.referredBy.referredDate != null, $silNVOLVEDPARTYreferrerRole.knowsReferredPartnerSince := $referrals.referredBy.referredDate);
      End
   End
   Return $silAccountReferral;
End]]></definition>
        </method>
        <method name="createSILAccountRelation" userId="pezzi" uuid="ffffffff-f612-79af-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILAccountRelation'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILAccountRelation(CMN_BusinessRelationship $cmnBusinessRelationship, Indexed SIL_INVOLVEDPARTYcustomerRole $silINVOLVEDPARTYaccountPartyRoleList := null) : Indexed SIL_INVOLVEDPARTYcustomerRole Begin
   If not LIB_Validator.validateNotEmptyIndexed($silINVOLVEDPARTYaccountPartyRoleList) Then
      $silINVOLVEDPARTYaccountPartyRoleList := NewIndexed(SIL_INVOLVEDPARTYcustomerRole);
   End
   Record $iRecord;
   SIL_INVOLVEDPARTYcustomerRole $silAcountPartyRoler;
   //$silAccount.accountReferrals.isAnExistingCustomer := INT_SILMatchingTools.matchCMNBooleanToSILYesNo($cmnParty.hasRelationshipHSBCGroup);
   /* Indexed Record $parties := NewIndexed(Record);
   ForEach $iRecord In RECORDS('SIL_BusinessRelationshipRoles__selector') Do
      String $roleID := TOSTRING($iRecord.getValue($cmnBusinessRelationship.useCase));
      If NotEmpty($roleID) Then
         ForEach CMN_Party $aParty In UNION($cmnBusinessRelationship.getRoleManager().getPartiesInRole($roleID), ERROR($cmnBusinessRelationship.getMainCustomer().getRoleManager($cmnBusinessRelationship).getPartiesInRole($roleID), null)) Do
            Record $record := NEW(Record);
            $record.setValue('role', $iRecord.getValue('id'));
            $record.setValue('roleID', $roleID);
            //$record.setValue('silRole', $roleID);
            $record.setValue('party', $aParty);
            $parties.addElement($record);
         End
      End
   End
   If LIB_Validator.validateNotEmptyIndexed($parties) Then*/
   ForEach CMN_Party $party In $cmnBusinessRelationship.getInvolvedParties() Do
      // String $silRole := TOSTRING($partyRecord.getValue('role'));
      //String $roleID := TOSTRING($partyRecord.getValue('roleID'));
      //LIB_Logger.tmpLog('mapping role: ' & $silRole & ', ' & $roleID);
      //CMN_Party $party := CAST(CMN_Party, $partyRecord.getValue('party'));
      Indexed CMN_AssignedRole $assignedRoles := $cmnBusinessRelationship.getRoleManager().getRolesOfParty($party);
      CMN_AssignedBRRole $assignedRole;
      ForEach CMN_AssignedRole $anAssignedRole In $assignedRoles Do
         String $roleID := $anAssignedRole.getRoleID();
         String $silRole := LIST($roleID, 'CMN_BRRoles', 'sil_Id');
         If ISA($anAssignedRole, CMN_AssignedBRRole) Then
            $assignedRole := CAST(CMN_AssignedBRRole, $anAssignedRole);
         End
         //End
         If NotEmpty($silRole) && ISA($anAssignedRole, CMN_AssignedBRRole) Then
            CMN_ApplicableRole $applicableRole := $cmnBusinessRelationship.getRoleManager().getApplicableRole($roleID);
            If $party.type.isHSBCEntity() Then
               CMN_LegalEntityHSBC $hsbcEntity := CAST(CMN_LegalEntityHSBC, $party);
               ForEach String $entity In $hsbcEntity.hsbcEntities Do
                  $silAcountPartyRoler := CAST(SIL_INVOLVEDPARTYcustomerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcustomerRole));
                  $silAcountPartyRoler.party := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
                  $silAcountPartyRoler.party.id := LIST($entity, 'CMN_HSBCEntities__selector', 'crmId');
                  $silAcountPartyRoler.type := $silRole;
                  $silINVOLVEDPARTYaccountPartyRoleList.addElement($silAcountPartyRoler);
               End
            Else
               $silAcountPartyRoler := CAST(SIL_INVOLVEDPARTYcustomerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcustomerRole));
               If $party.type.isPhysicalPerson() Then
                  SIL_INVOLVEDPARTYindividual $silIndividual := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
                  $silAcountPartyRoler.party := $silIndividual;
                  If $applicableRole != null && $assignedRole != null && $applicableRole.hasDetailSignaturePower() Then
                     $silAcountPartyRoler.signature := CAST(SIL_INVOLVEDPARTYsignature, CreateSkeletonDataClass(SIL_INVOLVEDPARTYsignature));
                     IF($assignedRole.getBRRoleAttributes().signaturePowerType != null, $silAcountPartyRoler.signature.signatureType := LIST($assignedRole.getBRRoleAttributes().signaturePowerType, 'CMN_SignatureType', 'sil_Id'));
                     If $assignedRole.getBRRoleAttributes().signaturePowerType == 'jointyby' Then
                        IF($assignedRole.getBRRoleAttributes().signPowJointbyNumberOfParties != null, $silAcountPartyRoler.signature.cardinality := ERROR(TOINTEGER($assignedRole.getBRRoleAttributes().signPowJointbyNumberOfParties), 0));
                     ElseIf $assignedRole.getBRRoleAttributes().signaturePowerType == 'jointlywith' Then
                        IF($assignedRole.getBRRoleAttributes().signPowJointlyWithPaties != null, $silAcountPartyRoler.signature.parties := $assignedRole.getBRRoleAttributes().signPowJointlyWithPaties);
                     End
                     If $roleID == 'authorisedRepresentative' Then
                        /*IF($assignedRole.getBRRoleAttributes().hasExistingList != null, $silIndividual.agreeSignatureListAgreementIndicator := $assignedRole.getBRRoleAttributes().hasExistingList);
                     If $assignedRole.getBRRoleAttributes().hasExistingList Then
                        IF($assignedRole.getBRRoleAttributes().signPowListExtListDateIssue != null, $silIndividual.signatureListIssuedDate := $assignedRole.getBRRoleAttributes().signPowListExtListDateIssue);
                        IF($assignedRole.getBRRoleAttributes().signPowListExtListNumParties != null, $silIndividual.signature.cardinality := TOINTEGER($assignedRole.getBRRoleAttributes().signPowListExtListNumParties));
                     End
                     IF($assignedRole.getBRRoleAttributes().hasSignatureList != null, $silIndividual.agreeSignatureMasterfileAgreementIndicator := $assignedRole.getBRRoleAttributes().hasSignatureList);
                     If $assignedRole.getBRRoleAttributes().hasSignatureList Then
                        IF($assignedRole.getBRRoleAttributes().signPowListBankListMaster != null, $silIndividual.numberOfMasterFile := TODOUBLE($assignedRole.getBRRoleAttributes().signPowListBankListMaster));
                     End*/
                     End
                  End
               ElseIf $party.type.isTrustOrFoundation() Then
                  $silAcountPartyRoler.party := CAST(SIL_INVOLVEDPARTYtrust, CreateSkeletonDataClass(SIL_INVOLVEDPARTYtrust));
               ElseIf $party.type.isLegalEntity() Then
                  SIL_INVOLVEDPARTYorganization $silOrganiation := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
                  $silAcountPartyRoler.party := $silOrganiation;
                  If $applicableRole != null && $assignedRole != null && $applicableRole.hasDetailSignaturePower() Then
                     $silAcountPartyRoler.signature := CAST(SIL_INVOLVEDPARTYsignature, CreateSkeletonDataClass(SIL_INVOLVEDPARTYsignature));
                     If $roleID != 'powerOfAdminMFO' Then
                        IF($assignedRole.getBRRoleAttributes().signaturePowerType != null, $silAcountPartyRoler.signature.signatureType := LIST($assignedRole.getBRRoleAttributes().signaturePowerType, 'CMN_SignatureType', 'sil_Id'));
                        If $assignedRole.getBRRoleAttributes().signaturePowerType == 'jointyby' Then
                           IF($assignedRole.getBRRoleAttributes().signPowJointbyNumberOfParties != null, $silAcountPartyRoler.signature.cardinality := ERROR(TOINTEGER($assignedRole.getBRRoleAttributes().signPowJointbyNumberOfParties), 0));
                        ElseIf $assignedRole.getBRRoleAttributes().signaturePowerType == 'jointlywith' Then
                           IF($assignedRole.getBRRoleAttributes().signPowJointlyWithPaties != null, $silAcountPartyRoler.signature.parties := $assignedRole.getBRRoleAttributes().signPowJointlyWithPaties);
                        End
                        If $roleID == 'powerOfAttorney' Then
                           IF($assignedRole.getBRRoleAttributes().hasAttachedList and $assignedRole.getBRRoleAttributes().individualListNames != null, $silAcountPartyRoler.signature.description := $assignedRole.getBRRoleAttributes().individualListNames);
                        End
                     End
                     If OR($roleID == 'powerOfAdminMFO', $roleID == 'powerOfAdmin', $roleID == 'powerOfAttorney', $roleID == 'authorizedSignature', $roleID == 'authorisedRepresentative') Then
                        IF($assignedRole.getBRRoleAttributes().hasExistingList != null, $silOrganiation.agreeSignatureListAgreementIndicator := $assignedRole.getBRRoleAttributes().hasExistingList);
                        If $assignedRole.getBRRoleAttributes().hasExistingList Then
                           IF($assignedRole.getBRRoleAttributes().signPowListExtListDateIssue != null, $silOrganiation.signatureListIssuedDate := $assignedRole.getBRRoleAttributes().signPowListExtListDateIssue);
                           IF($assignedRole.getBRRoleAttributes().signPowListExtListNumParties != null, $silOrganiation.signatureListPartyCount := $assignedRole.getBRRoleAttributes().signPowListExtListNumParties);
                        End
                        IF($assignedRole.getBRRoleAttributes().hasSignatureList != null, $silOrganiation.agreeSignatureMasterfileAgreementIndicator := $assignedRole.getBRRoleAttributes().hasSignatureList);
                        If $assignedRole.getBRRoleAttributes().hasSignatureList Then
                           IF($assignedRole.getBRRoleAttributes().signPowListBankListMaster != null, $silOrganiation.numberOfMasterFile := ERROR(TODOUBLE($assignedRole.getBRRoleAttributes().signPowListBankListMaster), 0.));
                           If ($cmnBusinessRelationship.useCase == 'trust' or $roleID != 'authorizedSignature') and $roleID != 'powerOfAttorney' and $roleID == 'authorisedRepresentative' Then
                              IF($assignedRole.getBRRoleAttributes().signPowListBankListNumInd != null, $silAcountPartyRoler.signature.cardinality := ERROR(TOINTEGER($assignedRole.getBRRoleAttributes().signPowListBankListNumInd), 0));
                           End
                        End
                     End
                  End
               Else
                  LIB_Logger.integrationError('UNKNOWN ENTITY TYPE: ' & TOSTRING($party));
               End
               If $silAcountPartyRoler.party != null Then
                  $silAcountPartyRoler.party.id := $party.getSILID();
               End
               IF(EMPTY($party.getSILID()), LIB_Logger.integrationWarn('Party has no SIL ID: ' & $party.getFullName()));
               $silAcountPartyRoler.type := $silRole;
               IF(EMPTY($silAcountPartyRoler.type), LIB_Logger.integrationWarn('Corresponding BR Role was not found: ' & $roleID));
               $silINVOLVEDPARTYaccountPartyRoleList.addElement($silAcountPartyRoler);
            End
         End
      End
   End
   Return $silINVOLVEDPARTYaccountPartyRoleList;
End]]></definition>
        </method>
        <method name="createSILAccountServices" userId="pezzi" uuid="00000000-6953-9011-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILClientServices'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILAccountServices(CMN_BusinessRelationship $businessRelationship) : Indexed SIL_RELATIONservice Begin
   Indexed SIL_RELATIONservice $silServices := NewIndexed(SIL_RELATIONservice);
   If $businessRelationship != null && $businessRelationship.optionalServices != null Then
      CMN_AvailableOptionCategory $availableOptionCategory;
      String $optionID := '';
      $optionID := 'safeDepositBox';
      If $businessRelationship.optionalServices.isOptionSelected($optionID) Then
         SIL_RELATIONsafeService $silSafeService := CAST(SIL_RELATIONsafeService, CreateSkeletonDataClass(SIL_RELATIONsafeService));
         CMN_OptionalServiceSafeDepositBox $optionalService := CAST(CMN_OptionalServiceSafeDepositBox, $businessRelationship.optionalServices.getOptionalService($optionID));
         $silSafeService.safeBoxNumber := $optionalService.safeBoxNumber;
         IF(NotEmpty($optionalService.building), $silSafeService.location := LIST($optionalService.building, 'CMN_safeBoxBuildings', 'sil_Id'));
         If NotEmpty($optionalService.option1) Then
            SIL_INVOLVEDPARTYinvolvedPartyRole $silRole := CAST(SIL_INVOLVEDPARTYcustomerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcustomerRole));
            SIL_INVOLVEDPARTYorganization $silOrg := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
            SIL_INVOLVEDPARTYorganizationName $silOrgName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
            $silOrgName.fullName := $optionalService.option1;
            $silOrg.names.addElement($silOrgName);
            $silRole.party := $silOrg;
            $silSafeService.authorizedParties.addElement($silRole);
         End
         IF(NotEmpty($optionalService.option2), $silSafeService.details := $optionalService.option2);
         $silSafeService.rentalAmount := $optionalService.price;
         $silSafeService.keyNumberHeldByCustomer := $optionalService.keysClient;
         $silSafeService.keyNumberHeldByBank := $optionalService.keysBank;
         IF(NotEmpty($optionalService.attorneySignature), $silSafeService.safeBoxAttorneyType := LIST($optionalService.attorneySignature, 'CMN_AttoneySignatureCard', 'sil_Id'));
         $silServices.addElement($silSafeService);
      End
      $optionID := 'directInternetAccessHSBCSite';
      If $businessRelationship.optionalServices.isOptionSelected($optionID) Then
         CMN_OptionalServiceDirectInternetAccess $optionalService := CAST(CMN_OptionalServiceDirectInternetAccess, $businessRelationship.optionalServices.getOptionalService($optionID));
         SIL_RELATIONinternetBankingService $silInternetService := CAST(SIL_RELATIONinternetBankingService, CreateSkeletonDataClass(SIL_RELATIONinternetBankingService));
         $silInternetService.dMDSId := $optionalService.clientID;
         $silServices.addElement($silInternetService);
         SIL_RELATIONglobalResearchService $silGlobalService := CAST(SIL_RELATIONglobalResearchService, CreateSkeletonDataClass(SIL_RELATIONglobalResearchService));
         SIL_INVOLVEDPARTYcustomerRole $silRole := CAST(SIL_INVOLVEDPARTYcustomerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcustomerRole));
         SIL_INVOLVEDPARTYindividual $silInd := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
         If NotEmpty($optionalService.rmName) Then
            SIL_INVOLVEDPARTYindividualName $silIndName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
            $silInd.names.addElement($silIndName);
            $silIndName.fullName := $optionalService.rmName;
            $silRole.party := $silInd;
            $silGlobalService.rmRoles.addElement($silRole);
         End
         If NotEmpty($optionalService.clientCountry) Then
            $silInd.addresses.addElement(INT_SILMappingCMNtoSIL.createSILCountryAddress($optionalService.clientCountry, INT_SILEnumerations.getCountryTypeDomicile()));
         End
         If NotEmpty($optionalService.clientEmail) Then
            SIL_INVOLVEDPARTYemailAddress $silEmail := CAST(SIL_INVOLVEDPARTYemailAddress, CreateSkeletonDataClass(SIL_INVOLVEDPARTYemailAddress));
            $silEmail.email := $optionalService.clientEmail;
            $silEmail.type := INT_SILEnumerations.getEmailTypeDirectInternetAccess();
            $silInd.addresses.addElement($silEmail);
         End
         If NotEmpty($optionalService.researchProducts) Then
            ForEach String $researchProducts In SPLIT($optionalService.researchProducts, '|') Do
               $silGlobalService.researchProducts.addElement(LIST($researchProducts, 'CMN_OptionsResearchProducts', 'sil_Id'));
            End
         End
         $silGlobalService.elegibleType := LIST($optionalService.eligibility, 'CMN_OptionsDirectAccessEligibility', 'sil_Id');
         $silServices.addElement($silGlobalService);
      End
      $optionID := 'internetBanking';
      If $businessRelationship.optionalServices.isOptionSelected($optionID) Then
         CMN_OptionalServiceInternetBanking $optionalService := CAST(CMN_OptionalServiceInternetBanking, $businessRelationship.optionalServices.getOptionalService('internetBanking'));
         SIL_RELATIONinternetBankingService $silInternetService := CAST(SIL_RELATIONinternetBankingService, CreateSkeletonDataClass(SIL_RELATIONinternetBankingService));
         IF(NotEmpty($optionalService.hsbcPublicationsOption), $silInternetService.accessType := LIST($optionalService.hsbcPublicationsOption, 'CMN_InternetAccessHSBCPublications', 'sil_Id'));
         $silServices.addElement($silInternetService);
      End
   End
   Return $silServices;
End]]></definition>
        </method>
        <method name="createSILAccountTaxInformation" userId="pezzi" uuid="00000000-2929-21f4-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILAccountTaxInformation'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILAccountTaxInformation(CMN_BusinessRelationship $cmnBusinessRelationship) : SIL_INVOLVEDPARTYtaxInformation Begin
   If $cmnBusinessRelationship == null Then
      Return null;
   End
   SIL_INVOLVEDPARTYtaxInformation $silTaxInformation := CAST(SIL_INVOLVEDPARTYtaxInformation, CreateSkeletonDataClass(SIL_INVOLVEDPARTYtaxInformation));
   $silTaxInformation.taxDetails := NewIndexed(SIL_INVOLVEDPARTYtaxDetail);
   /*If $cmnBusinessRelationship.getMainCustomer() != null Then
      CMN_Party $cmnParty := $cmnBusinessRelationship.getMainCustomer();
      CMN_TaxTransparency $cmnTaxTransparency;
      If $cmnParty.type.isPhysicalPerson() Then
         CMN_RegulatoryProfilePhysical $cmnRegulatoryProfilePhysical := CAST(CMN_PhysicalPerson, $cmnParty).regulatoryProfile;
         $cmnTaxTransparency := $cmnRegulatoryProfilePhysical.taxTransparency;
      ElseIf $cmnParty.type.isLegalEntity() Then
         CMN_RegulatoryProfileLegal $cmnRegulatoryProfileLegal := CAST(CMN_LegalEntity, $cmnParty).regulatoryProfile;
         //******************************** Tax & Regulatory ****************************************************
         $cmnTaxTransparency := $cmnRegulatoryProfileLegal.taxTransparency;
      End
      If $cmnTaxTransparency.openingAccountReason != null Then
         SIL_INVOLVEDPARTYtaxDetail $taxDetail := CAST(SIL_INVOLVEDPARTYtaxDetail, CreateSkeletonDataClass(SIL_INVOLVEDPARTYtaxDetail));
         $taxDetail.bookingCentreDissemblanceOpenReason := $cmnTaxTransparency.openingAccountReason;
         $silTaxInformation.taxDetails.addElement($taxDetail);
      End
   End*/
   /********** Tax Statements and for Tax Reclaim *********/
   INT_SILMappingCMNtoSILVariationFactory__selector().createSILAccountTaxInformation($cmnBusinessRelationship, $silTaxInformation);
   Return $silTaxInformation;
End]]></definition>
        </method>
        <method name="createSILAccountTransferActivity" userId="pezzi" uuid="ffffffff-d3b3-10cd-0000-000000000000">
            <definition><![CDATA[StaticFunction createSILAccountTransferActivity(CMN_BusinessRelationship $cmnBusinessRelationship, Indexed SIL_KYCaccountTransferActivity $silAccountTransferActivities := null) : Indexed SIL_KYCaccountTransferActivity Begin
   If $silAccountTransferActivities == null Then
      $silAccountTransferActivities := NewIndexed(SIL_KYCaccountTransferActivity);
   End
   If $cmnBusinessRelationship == null || $cmnBusinessRelationship.kytProfile.expectedAccountActivity == null Then
      Return $silAccountTransferActivities;
   End
   CMN_KYTExpectedAccountActivity $expectedAccountActivity := $cmnBusinessRelationship.kytProfile.expectedAccountActivity;
   SIL_KYCaccountTransferActivity $silAccountTransferActivity;
   CMN_KYTTransferActivity $kytTransferActivity;
   /*If not $expectedAccountActivity.hasExpectedInflowsOrOutflows Then
      Return $silAccountTransferActivities;
   End*/
   //If $expectedAccountActivity.hasExpectedInflowsOrOutflows Then
   //If $expectedAccountActivity.transferIn != null Then
   //If $silAccountTransferActivities.size() == 1 Then
   /******************** Account Activity IN ********************/
   $kytTransferActivity := $expectedAccountActivity.transferIn;
   If $kytTransferActivity != null Then
      /*** TOTAL IN ***/
      $silAccountTransferActivity := CAST(SIL_KYCaccountTransferInActivity, CreateSkeletonDataClass(SIL_KYCaccountTransferInActivity));
      $silAccountTransferActivity.averageAmount := TODOUBLE(LIB_Numbers.deformatThousand($kytTransferActivity.getAvgAmountPerTransaction()));
      $silAccountTransferActivity.totalAmount := $kytTransferActivity.getTotalAmountPerYear();
      $silAccountTransferActivity.totalNumberOfTransactions := $kytTransferActivity.getTotalTransNumberPerYear();
      $silAccountTransferActivity.type := 'TOTAL_TRANSFER_IN';
      IF($silAccountTransferActivity.type != null && NotEmpty($kytTransferActivity.silIds[$silAccountTransferActivity.type]), $silAccountTransferActivity.id := $kytTransferActivity.silIds[$silAccountTransferActivity.type]);
      $silAccountTransferActivities.addElement($silAccountTransferActivity);
      /*** PHYSICAL ***/
      $silAccountTransferActivity := CAST(SIL_KYCaccountTransferInActivity, CreateSkeletonDataClass(SIL_KYCaccountTransferInActivity));
      IF($expectedAccountActivity.inflowsOrOutflowsReason != null, $silAccountTransferActivity.reason := $expectedAccountActivity.inflowsOrOutflowsReason);
      $silAccountTransferActivity.transferHighRiskCountryIndicator := $expectedAccountActivity.isHighRiskOrSensitive;
      $silAccountTransferActivity.isAnyTransferExpected := $expectedAccountActivity.hasExpectedInflowsOrOutflows;
      $silAccountTransferActivity.cashTotalAmountInUSD := $kytTransferActivity.cashTotalAmount;
      $silAccountTransferActivity.cashNumberOfTransactions := $kytTransferActivity.cashTransNumber;
      $silAccountTransferActivity.securitiesTotalAmountInUSD := $kytTransferActivity.securitiesTotalAmount;
      $silAccountTransferActivity.securitiesNumberOfTransactions := $kytTransferActivity.securitiesTransNumber;
      $silAccountTransferActivity.preciousMetalTotalAmountInUSD := $kytTransferActivity.preciousMetalTotalAmount;
      $silAccountTransferActivity.preciousMetalNumberOfTransactions := $kytTransferActivity.preciousMetalTransNumber;
      IF($kytTransferActivity.purposeDescription != null, $silAccountTransferActivity.transactionPurpose := $kytTransferActivity.purposeDescription);
      $silAccountTransferActivity.totalAmount := $kytTransferActivity.getNonPhyAssetTotalAmount();
      $silAccountTransferActivity.totalNumberOfTransactions := $kytTransferActivity.getNonPhyAssetTransNumber();
      $silAccountTransferActivity.type := 'PHYSICAL';
      IF($silAccountTransferActivity.type != null && NotEmpty($kytTransferActivity.silIds[$silAccountTransferActivity.type]), $silAccountTransferActivity.id := $kytTransferActivity.silIds[$silAccountTransferActivity.type]);
      $silAccountTransferActivities.addElement($silAccountTransferActivity);
      /*** NON PHYSICAL ***/
      $silAccountTransferActivity := CAST(SIL_KYCaccountTransferInActivity, CreateSkeletonDataClass(SIL_KYCaccountTransferInActivity));
      $silAccountTransferActivity.reason := $expectedAccountActivity.inflowsOrOutflowsReason;
      $silAccountTransferActivity.transferHighRiskCountryIndicator := $expectedAccountActivity.isHighRiskOrSensitive;
      $silAccountTransferActivity.isAnyTransferExpected := $expectedAccountActivity.hasExpectedInflowsOrOutflows;
      $silAccountTransferActivity.chequeTotalAmountInUSD := $kytTransferActivity.chequeTotalAmount;
      $silAccountTransferActivity.chequeNumberOfTransactions := $kytTransferActivity.chequeTransNumber;
      If NotEmpty($kytTransferActivity.chequeCountries) Then
         $silAccountTransferActivity.chequeCountries := NewIndexed(SIL_STATICcountry);
         $silAccountTransferActivity.chequeCountries.addElement(INT_SILMappingCMNtoSIL.createSILCountry($kytTransferActivity.chequeCountries));
      End
      $silAccountTransferActivity.securitiesTotalAmountInUSD := $kytTransferActivity.nonPhySecuritiesTotalAmount;
      $silAccountTransferActivity.securitiesNumberOfTransactions := $kytTransferActivity.nonPhySecuritiesTransNumber;
      If NotEmpty($kytTransferActivity.nonPhySecurietiesCountries) Then
         $silAccountTransferActivity.securitiesCountries := NewIndexed(SIL_STATICcountry);
         $silAccountTransferActivity.securitiesCountries.addElement(INT_SILMappingCMNtoSIL.createSILCountry($kytTransferActivity.nonPhySecurietiesCountries));
      End
      $silAccountTransferActivity.wireTransferTotalAmountInUSD := $kytTransferActivity.wireTransfersTotalAmount;
      $silAccountTransferActivity.wireTransferNumberOfTransactions := $kytTransferActivity.wireTransfersTransNumber;
      If NotEmpty($kytTransferActivity.wireTransferCountries) Then
         $silAccountTransferActivity.wireTransferCountries := NewIndexed(SIL_STATICcountry);
         $silAccountTransferActivity.wireTransferCountries.addElement(INT_SILMappingCMNtoSIL.createSILCountry($kytTransferActivity.wireTransferCountries));
      End
      IF($kytTransferActivity.nonPhyPurposeDescription != null, $silAccountTransferActivity.transactionPurpose := $kytTransferActivity.nonPhyPurposeDescription);
      $silAccountTransferActivity.type := 'NONPHYSICAL';
      IF($silAccountTransferActivity.type != null && NotEmpty($kytTransferActivity.silIds[$silAccountTransferActivity.type]), $silAccountTransferActivity.id := $kytTransferActivity.silIds[$silAccountTransferActivity.type]);
      $silAccountTransferActivities.addElement($silAccountTransferActivity);
   End
   /******************** Account Activity OUT ********************/
   $kytTransferActivity := $expectedAccountActivity.transferOut;
   If $kytTransferActivity != null Then
      /*** TOTAL IN ***/
      $silAccountTransferActivity := CAST(SIL_KYCaccountTransferOutActivity, CreateSkeletonDataClass(SIL_KYCaccountTransferOutActivity));
      $silAccountTransferActivity.averageAmount := TODOUBLE(LIB_Numbers.deformatThousand($kytTransferActivity.getAvgAmountPerTransaction()));
      $silAccountTransferActivity.totalAmount := $kytTransferActivity.getTotalAmountPerYear();
      $silAccountTransferActivity.totalNumberOfTransactions := $kytTransferActivity.getTotalTransNumberPerYear();
      $silAccountTransferActivity.type := 'TOTAL_TRANSFER_OUT';
      IF($silAccountTransferActivity.type != null && NotEmpty($kytTransferActivity.silIds[$silAccountTransferActivity.type]), $silAccountTransferActivity.id := $kytTransferActivity.silIds[$silAccountTransferActivity.type]);
      $silAccountTransferActivities.addElement($silAccountTransferActivity);
      /*** PHYSICAL ***/
      $silAccountTransferActivity := CAST(SIL_KYCaccountTransferOutActivity, CreateSkeletonDataClass(SIL_KYCaccountTransferOutActivity));
      $silAccountTransferActivity.reason := $expectedAccountActivity.inflowsOrOutflowsReason;
      $silAccountTransferActivity.transferHighRiskCountryIndicator := $expectedAccountActivity.isHighRiskOrSensitive;
      $silAccountTransferActivity.isAnyTransferExpected := $expectedAccountActivity.hasExpectedInflowsOrOutflows;
      $silAccountTransferActivity.cashTotalAmountInUSD := $kytTransferActivity.cashTotalAmount;
      $silAccountTransferActivity.cashNumberOfTransactions := $kytTransferActivity.cashTransNumber;
      $silAccountTransferActivity.securitiesTotalAmountInUSD := $kytTransferActivity.securitiesTotalAmount;
      $silAccountTransferActivity.securitiesNumberOfTransactions := $kytTransferActivity.securitiesTransNumber;
      $silAccountTransferActivity.preciousMetalTotalAmountInUSD := $kytTransferActivity.preciousMetalTotalAmount;
      $silAccountTransferActivity.preciousMetalNumberOfTransactions := $kytTransferActivity.preciousMetalTransNumber;
      IF($kytTransferActivity.purposeDescription != null, $silAccountTransferActivity.transactionPurpose := $kytTransferActivity.purposeDescription);
      $silAccountTransferActivity.totalAmount := $kytTransferActivity.getPhyAssetTotalAmount();
      $silAccountTransferActivity.totalNumberOfTransactions := $kytTransferActivity.getPhyAssetTransNumber();
      $silAccountTransferActivity.type := 'PHYSICAL';
      IF($silAccountTransferActivity.type != null && NotEmpty($kytTransferActivity.silIds[$silAccountTransferActivity.type]), $silAccountTransferActivity.id := $kytTransferActivity.silIds[$silAccountTransferActivity.type]);
      $silAccountTransferActivities.addElement($silAccountTransferActivity);
      /*** NON PHYSICAL ***/
      $silAccountTransferActivity := CAST(SIL_KYCaccountTransferOutActivity, CreateSkeletonDataClass(SIL_KYCaccountTransferOutActivity));
      $silAccountTransferActivity.reason := $expectedAccountActivity.inflowsOrOutflowsReason;
      $silAccountTransferActivity.transferHighRiskCountryIndicator := $expectedAccountActivity.isHighRiskOrSensitive;
      $silAccountTransferActivity.isAnyTransferExpected := $expectedAccountActivity.hasExpectedInflowsOrOutflows;
      $silAccountTransferActivity.chequeTotalAmountInUSD := $kytTransferActivity.chequeTotalAmount;
      $silAccountTransferActivity.chequeNumberOfTransactions := $kytTransferActivity.chequeTransNumber;
      If NotEmpty($kytTransferActivity.chequeCountries) Then
         $silAccountTransferActivity.chequeCountries := NewIndexed(SIL_STATICcountry);
         $silAccountTransferActivity.chequeCountries.addElement(INT_SILMappingCMNtoSIL.createSILCountry($kytTransferActivity.chequeCountries));
      End
      $silAccountTransferActivity.securitiesTotalAmountInUSD := $kytTransferActivity.nonPhySecuritiesTotalAmount;
      $silAccountTransferActivity.securitiesNumberOfTransactions := $kytTransferActivity.nonPhySecuritiesTransNumber;
      If NotEmpty($kytTransferActivity.nonPhySecurietiesCountries) Then
         $silAccountTransferActivity.securitiesCountries := NewIndexed(SIL_STATICcountry);
         $silAccountTransferActivity.securitiesCountries.addElement(INT_SILMappingCMNtoSIL.createSILCountry($kytTransferActivity.nonPhySecurietiesCountries));
      End
      $silAccountTransferActivity.wireTransferTotalAmountInUSD := $kytTransferActivity.wireTransfersTotalAmount;
      $silAccountTransferActivity.wireTransferNumberOfTransactions := $kytTransferActivity.wireTransfersTransNumber;
      If NotEmpty($kytTransferActivity.wireTransferCountries) Then
         $silAccountTransferActivity.wireTransferCountries := NewIndexed(SIL_STATICcountry);
         $silAccountTransferActivity.wireTransferCountries.addElement(INT_SILMappingCMNtoSIL.createSILCountry($kytTransferActivity.wireTransferCountries));
      End
      IF($kytTransferActivity.nonPhyPurposeDescription != null, $silAccountTransferActivity.transactionPurpose := $kytTransferActivity.nonPhyPurposeDescription);
      $silAccountTransferActivity.type := 'NONPHYSICAL';
      IF($silAccountTransferActivity.type != null && NotEmpty($kytTransferActivity.silIds[$silAccountTransferActivity.type]), $silAccountTransferActivity.id := $kytTransferActivity.silIds[$silAccountTransferActivity.type]);
      $silAccountTransferActivities.addElement($silAccountTransferActivity);
   End
   Return $silAccountTransferActivities;
End]]></definition>
        </method>
        <method name="createSILAffiliate" userId="cucumazzo" uuid="ffffffff-bcb0-d833-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILAffiliate'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILAffiliate(CMN_Party $cmnParty, Indexed SIL_INVOLVEDPARTYorganization $silAffiliates := null) : Indexed SIL_INVOLVEDPARTYorganization Begin
   If $silAffiliates == null Then
      $silAffiliates := NewIndexed(SIL_INVOLVEDPARTYorganization);
   End
   If $cmnParty == null || not ISA($cmnParty, CMN_LegalEntity) Then
      Return $silAffiliates;
   End
   /********************************** GENERAL FIELDS ********************************/
   CMN_LegalEntity $legalEntity := CAST(CMN_LegalEntity, $cmnParty);
   CMN_LegalEntityKycProfile $cmnLegalEntityKycProfile := $legalEntity.getKYCProfile();
   If LIB_Validator.validateNotEmptyIndexed($cmnLegalEntityKycProfile.sourceOfWealth.affiliate) Then
      CMN_KYCLegalAffiliate $cmnKYCLegalAffiliate;
      ForEach $cmnKYCLegalAffiliate In $cmnLegalEntityKycProfile.sourceOfWealth.affiliate Do
         SIL_INVOLVEDPARTYorganization $silAffiliate := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
         IF(NotEmpty($cmnKYCLegalAffiliate.getSILID()), $silAffiliate.id := $cmnKYCLegalAffiliate.getSILID());
         IF($cmnKYCLegalAffiliate.ownershipRate != null, $silAffiliate.parentOwnshipRatio := $cmnKYCLegalAffiliate.ownershipRate);
         IF($cmnKYCLegalAffiliate.noEmployeeDetails != null, $silAffiliate.noEmployeeReason := $cmnKYCLegalAffiliate.noEmployeeDetails);
         $silAffiliates.addElement($silAffiliate);
         SIL_INVOLVEDPARTYorganization $subSILOrganization := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
         $silAffiliate.isParentOrganizationOf.addElement($subSILOrganization);
         $subSILOrganization.addresses := NewIndexed(SIL_INVOLVEDPARTYaddress);
         If $cmnKYCLegalAffiliate.name != null Then
            $subSILOrganization.names := NewIndexed(SIL_INVOLVEDPARTYInvolvedPartyName);
            SIL_INVOLVEDPARTYorganizationName $subSilOrganizationName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
            $subSilOrganizationName.businessName := $cmnKYCLegalAffiliate.name;
            $subSILOrganization.names.addElement($subSilOrganizationName);
         End
         IF($cmnKYCLegalAffiliate.companyDescription != null, $subSILOrganization.businessDescription := $cmnKYCLegalAffiliate.companyDescription);
         IF($cmnKYCLegalAffiliate.numberOfEmployees != null, $subSILOrganization.numberOfEmployees := $cmnKYCLegalAffiliate.numberOfEmployees);
         INT_SILMatchingTools.matchCMNMainBusinessToSILOrganization($cmnKYCLegalAffiliate.mainBusinessActivity, $subSILOrganization);
         If LIB_Validator.validateNotEmptyIndexed($cmnKYCLegalAffiliate.countryOfOperation) Then
            ForEach String $cmnKCountryOfOperationy In $cmnKYCLegalAffiliate.countryOfOperation Do
               If NotEmpty($cmnKCountryOfOperationy) Then
                  $subSILOrganization.addresses.addElement(INT_SILMappingCMNtoSIL.createSILCountryAddress($cmnKCountryOfOperationy, INT_SILEnumerations.getCountryTypeOperation()));
               End
            End
         End
         If LIB_Validator.validateNotEmptyIndexed($cmnKYCLegalAffiliate.businessExposure) Then
            CMN_KycBusinessExposure $cmnKycBusinessExposure;
            ForEach $cmnKycBusinessExposure In $cmnKYCLegalAffiliate.businessExposure Do
               //1904 should not be mapped like 
               If NotEmpty($cmnKycBusinessExposure.businessExposure) Then
                  SIL_INVOLVEDPARTYcountryAddress $silCountryAddress := INT_SILMappingCMNtoSIL.createSILCountryAddress($cmnKycBusinessExposure.businessExposure, INT_SILEnumerations.getCountryTypeExposure());
                  $subSILOrganization.addresses.addElement($silCountryAddress);
               End
            End
         End
         If $cmnKYCLegalAffiliate.hasGovernmentContractDeal != null Then
            IF($subSILOrganization.businessNatureDetails == null, $subSILOrganization.businessNatureDetails := NewIndexed(SIL_INVOLVEDPARTYbusinessNatureDetails));
            IF(not LIB_Validator.validateNotEmptyIndexed($subSILOrganization.businessNatureDetails), $subSILOrganization.businessNatureDetails[1] := CAST(SIL_INVOLVEDPARTYbusinessNatureDetails, CreateSkeletonDataClass(SIL_INVOLVEDPARTYbusinessNatureDetails)));
            $subSILOrganization.businessNatureDetails[1].isInvolvedInGovernmentContract := $cmnKYCLegalAffiliate.hasGovernmentContractDeal;
            If LIB_Validator.validateNotEmptyIndexed($cmnKYCLegalAffiliate.countryOfJuridiction) Then
               CMN_KycSowJuridictionCountry $cmnKycSowJuridictionCountry;
               ForEach $cmnKycSowJuridictionCountry In $cmnKYCLegalAffiliate.countryOfJuridiction Do
                  If NotEmpty($cmnKycSowJuridictionCountry.countryOfJuridiction) Then
                     IF($subSILOrganization.businessNatureDetails[1].businessCustomers == null, $subSILOrganization.businessNatureDetails[1].businessCustomers := NewIndexed(SIL_INVOLVEDPARTYbusinessCustomer));
                     SIL_INVOLVEDPARTYbusinessCustomer $silBusinessCustomer := CAST(SIL_INVOLVEDPARTYbusinessCustomer, CreateSkeletonDataClass(SIL_INVOLVEDPARTYbusinessCustomer));
                     $silBusinessCustomer.isGovernmental := true;
                     $silBusinessCustomer.country := INT_SILMappingCMNtoSIL.createSILCountry($cmnKycSowJuridictionCountry.countryOfJuridiction);
                     IF($cmnKycSowJuridictionCountry.comments != null, $silBusinessCustomer.comment := $cmnKycSowJuridictionCountry.comments);
                     $subSILOrganization.businessNatureDetails[1].businessCustomers.addElement($silBusinessCustomer);
                  End
               End
            End
         End
      End
   End
   Return $silAffiliates;
End]]></definition>
        </method>
        <method name="createSILBusinessOrganization" userId="pezzi" uuid="00000000-6707-626d-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILBusinessOrganization'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.cmnBusinessRelationship
*/
StaticFunction createSILBusinessOrganization(CMN_Party $cmnParty) : SIL_INVOLVEDPARTYorganization Begin
   If $cmnParty == null || not ISA($cmnParty, CMN_LegalEntity) Then
      Return null;
   End
   SIL_INVOLVEDPARTYorganization $silOrganization := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
   /********************************** GENERAL FIELDS ********************************/
   CMN_LegalEntity $legalEntity := CAST(CMN_LegalEntity, $cmnParty);
   CMN_LegalEntityKycProfile $legalEntityKycProfile := $legalEntity.getKYCProfile();
   SIL_INVOLVEDPARTYcustomerRole $customerRole := CAST(SIL_INVOLVEDPARTYcustomerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcustomerRole));
   $silOrganization.roles.addElement($customerRole);
   /*********************** NATURE OF BUSINESS & SOURCE OF WEALTH ***********************/
   If $cmnParty.type.isCommercialOperatingBusiness() Then
      If $legalEntityKycProfile.sourceOfWealth != null Then
         $silOrganization.businessNatureDetails.addElement(CAST(SIL_INVOLVEDPARTYbusinessNatureDetails, CreateSkeletonDataClass(SIL_INVOLVEDPARTYbusinessNatureDetails)));
         IF($legalEntityKycProfile.sourceOfWealth.companyDescription != null, $silOrganization.businessDescription := $legalEntityKycProfile.sourceOfWealth.companyDescription);
         If $legalEntityKycProfile.sourceOfWealth.originOfSow != null Then
            $silOrganization.originalWealthDescription := $legalEntityKycProfile.sourceOfWealth.originOfSow;
         End
         If $legalEntityKycProfile.sourceOfWealth.numberOfEmployees != null Then
            IF($legalEntityKycProfile.sourceOfWealth.numberOfEmployees > 0, $silOrganization.numberOfEmployees := $legalEntityKycProfile.sourceOfWealth.numberOfEmployees);
            IF($legalEntityKycProfile.sourceOfWealth.numberOfEmployees == 0, $silOrganization.noEmployeeReason := $legalEntityKycProfile.sourceOfWealth.noEmployeeDetails);
         End
         INT_SILMatchingTools.matchCMNMainBusinessToSILOrganization($legalEntityKycProfile.sourceOfWealth.mainBusiness, $silOrganization);
         If LIB_Validator.validateNotEmptyIndexed($legalEntityKycProfile.sourceOfWealth.countryOfOperation) Then
            ForEach String $cmnKCountryOfOperationy In $legalEntityKycProfile.sourceOfWealth.countryOfOperation Do
               If NotEmpty($cmnKCountryOfOperationy) Then
                  $silOrganization.addresses.addElement(INT_SILMappingCMNtoSIL.createSILCountryAddress($cmnKCountryOfOperationy, INT_SILEnumerations.getCountryTypeOperation()));
               End
            End
         End
         If LIB_Validator.validateNotEmptyIndexed($legalEntityKycProfile.sourceOfWealth.businessExposure) Then
            CMN_KycBusinessExposure $cmnKycBusinessExposure;
            ForEach $cmnKycBusinessExposure In $legalEntityKycProfile.sourceOfWealth.businessExposure Do
               If NotEmpty($cmnKycBusinessExposure.businessExposure) Then
                  SIL_INVOLVEDPARTYcountryAddress $silCountry := INT_SILMappingCMNtoSIL.createSILCountryAddress($cmnKycBusinessExposure.businessExposure, INT_SILEnumerations.getCountryTypeExposure());
                  $silOrganization.addresses.addElement($silCountry);
               End
            End
         End
         IF($legalEntityKycProfile.sourceOfWealth.isHighRiskJuridictionCountry != null, $silOrganization.highRiskCountryExposureNoHSBCPresenceIndicator := $legalEntityKycProfile.sourceOfWealth.isHighRiskJuridictionCountry);
         IF($legalEntityKycProfile.sourceOfWealth.hasBusActivitiesGreather50 != null, $silOrganization.isReliantOnKeyCustomerIndicator := $legalEntityKycProfile.sourceOfWealth.hasBusActivitiesGreather50);
         If $legalEntityKycProfile.sourceOfWealth.hasBusActivitiesGreather50 Then
            SIL_INVOLVEDPARTYinvolvedPartyRelationship $silRelation := CAST(SIL_INVOLVEDPARTYinvolvedPartyRelationship, CreateSkeletonDataClass(SIL_INVOLVEDPARTYinvolvedPartyRelationship));
            $silRelation.relationshipType := 'Key Customer';
            $customerRole.involvedPartyRelationships.addElement($silRelation);
            SIL_INVOLVEDPARTYorganization $silRelationOrganization := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
            $silRelation.party := $silRelationOrganization;
            If $legalEntityKycProfile.sourceOfWealth.keyCustomerName != null Then
               SIL_INVOLVEDPARTYorganizationName $silRelationOrganizationName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
               $silRelationOrganization.names.addElement($silRelationOrganizationName);
               $silRelationOrganizationName.businessName := $legalEntityKycProfile.sourceOfWealth.keyCustomerName;
            End
            If $legalEntityKycProfile.sourceOfWealth.industryName != null Then
               INT_SILMatchingTools.matchCMNMainBusinessToSILOrganization($legalEntityKycProfile.sourceOfWealth.industryName, $silRelationOrganization);
            End
            IF($legalEntityKycProfile.sourceOfWealth.customerKeyType != null, $silRelationOrganization.entityType := $legalEntityKycProfile.sourceOfWealth.customerKeyType);
         End
         If $legalEntityKycProfile.sourceOfWealth.hasGovernmentContractDeal != null Then
            $silOrganization.businessNatureDetails[1].isInvolvedInGovernmentContract := $legalEntityKycProfile.sourceOfWealth.hasGovernmentContractDeal;
         End
         If $legalEntityKycProfile.sourceOfWealth.hasGovernmentContractDeal Then
            If LIB_Validator.validateNotEmptyIndexed($legalEntityKycProfile.sourceOfWealth.countryOfJuridiction) Then
               CMN_KycSowJuridictionCountry $cmnKycSowJuridictionCountry;
               ForEach $cmnKycSowJuridictionCountry In $legalEntityKycProfile.sourceOfWealth.countryOfJuridiction Do
                  SIL_INVOLVEDPARTYbusinessCustomer $silBusinessCustomer := CAST(SIL_INVOLVEDPARTYbusinessCustomer, CreateSkeletonDataClass(SIL_INVOLVEDPARTYbusinessCustomer));
                  $silOrganization.businessNatureDetails[1].businessCustomers.addElement($silBusinessCustomer);
                  IF(NotEmpty($cmnKycSowJuridictionCountry.countryOfJuridiction), $silBusinessCustomer.country := INT_SILMappingCMNtoSIL.createSILCountry($cmnKycSowJuridictionCountry.countryOfJuridiction));
                  IF($cmnKycSowJuridictionCountry.comments != null, $silBusinessCustomer.relationshipDescription := $cmnKycSowJuridictionCountry.comments);
                  $silBusinessCustomer.isGovernmental := true;
               End
            End
         End
         If $legalEntityKycProfile.sourceOfWealth.customerType != null Then
            $silOrganization.legalForm := LIST($legalEntityKycProfile.sourceOfWealth.customerType, 'CMN_KycLegalCustomerType', 'sil_Id');
            IF($legalEntityKycProfile.sourceOfWealth.otherCustomerTypeDetail != null, $silOrganization.entityNature := $legalEntityKycProfile.sourceOfWealth.otherCustomerTypeDetail);
         End
         If $legalEntityKycProfile.sourceOfWealth.hasAffiliate != null Then
            $silOrganization.hasSubOrganizationIndicator := $legalEntityKycProfile.sourceOfWealth.hasAffiliate;
         End
      End
      If $legalEntity.structureDetails != null Then
         /******************************** Corporate Structure and Regulation ****************************************************/
         $silOrganization.structures := NewIndexed(SIL_INVOLVEDPARTYorganizationStructure);
         $silOrganization.structures.addElement(CAST(SIL_INVOLVEDPARTYorganizationStructure, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationStructure)));
         IF($legalEntity.structureDetails.isOperatingOrHoldingCompany != null, $silOrganization.structures[1].operationCompanyIndicator := $legalEntity.structureDetails.isOperatingOrHoldingCompany == 'operatingCompany');
         IF($legalEntity.structureDetails.isCustomerPartOfMastergroup != null, $silOrganization.structures[1].masterGroupCustomerIndicator := $legalEntity.structureDetails.isCustomerPartOfMastergroup);
         IF($legalEntity.structureDetails.nameMastergroup != null, $silOrganization.structures[1].masterGroupName := $legalEntity.structureDetails.nameMastergroup);
         ForEach String $countryCode In $legalEntity.structureDetails.countryOfOperationsAssets Do
            $silOrganization.addresses.addElement(INT_SILMappingCMNtoSIL.createSILCountryAddress($countryCode, INT_SILEnumerations.getCountryTypeOperation()));
         End
         IF($legalEntity.structureDetails.numberBranches != null, $silOrganization.numberOfBranches := $legalEntity.structureDetails.numberBranches);
         IF($legalEntity.structureDetails.hasEquityListingHSBCExchange != null, $silOrganization.stockExchangeApprovalIndicator := $legalEntity.structureDetails.hasEquityListingHSBCExchange);
         IF($legalEntity.structureDetails.hasShareCapital != null, $silOrganization.hasShareCapitalIndicator := $legalEntity.structureDetails.hasShareCapital);
         IF($legalEntity.structureDetails.clarificationShareCapital != null, $silOrganization.hasShareCapitalDescription := $legalEntity.structureDetails.clarificationShareCapital);
         If $legalEntity.structureDetails.isCustControlledByParentComp != null Then
            $silOrganization.controlledByParentIndicator := $legalEntity.structureDetails.isCustControlledByParentComp;
            IF($legalEntity.structureDetails.percParentCompanyOwnership != null, $silOrganization.parentOwnshipRatio := $legalEntity.structureDetails.percParentCompanyOwnership);
            /********** Parent structure details ************/
            If $legalEntity.structureDetails.isCustControlledByParentComp Then
               $silOrganization.isSubOrganizationOf := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
               IF($legalEntity.structureDetails.percParentCompanyOwnership != null, $silOrganization.parentOwnshipRatio := $legalEntity.structureDetails.percParentCompanyOwnership);
               IF($legalEntity.structureDetails.isExistingClient != null, $silOrganization.isSubOrganizationOf.existingCustomerIndicator := $legalEntity.structureDetails.isExistingClient);
               IF(NotEmpty($legalEntity.structureDetails.uniqueIdentifier), $silOrganization.isSubOrganizationOf.id := $legalEntity.structureDetails.uniqueIdentifier);
               If $legalEntity.structureDetails.nameCustomerParent != null Then
                  $silOrganization.names := NewIndexed(SIL_INVOLVEDPARTYorganizationName);
                  $silOrganization.names[1] := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
                  CAST(SIL_INVOLVEDPARTYorganizationName, $silOrganization.names[1]).businessName := $legalEntity.structureDetails.nameCustomerParent;
               End
               If $legalEntity.structureDetails.countryIncorporation != null Then
                  $silOrganization.isSubOrganizationOf.documentationItems := NewIndexed(SIL_INVOLVEDPARTYdocumentationItem);
                  SIL_INVOLVEDPARTYincorporation $silIncorporation := CAST(SIL_INVOLVEDPARTYincorporation, CreateSkeletonDataClass(SIL_INVOLVEDPARTYincorporation));
                  $silOrganization.isSubOrganizationOf.documentationItems.addElement($silIncorporation);
                  $silIncorporation.incorporateCountry := INT_SILMappingCMNtoSIL.createSILCountry($legalEntity.structureDetails.countryIncorporation);
               End
               $silOrganization.isSubOrganizationOf.regulatedBy := NewIndexed(SIL_INVOLVEDPARTYregulatoryBody);
               SIL_INVOLVEDPARTYregulatoryBody $silSubRegulatoryBody := CAST(SIL_INVOLVEDPARTYregulatoryBody, CreateSkeletonDataClass(SIL_INVOLVEDPARTYregulatoryBody));
               $silOrganization.isSubOrganizationOf.regulatedBy.addElement($silSubRegulatoryBody);
               If $legalEntity.structureDetails.nameRegulatoryBodyParent != null Then
                  $silSubRegulatoryBody.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName);
                  SIL_INVOLVEDPARTYorganizationName $silOrganizationName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
                  $silSubRegulatoryBody.names.addElement($silOrganizationName);
                  $silOrganizationName.businessName := $legalEntity.structureDetails.nameRegulatoryBodyParent;
               End
               If NotEmpty($legalEntity.structureDetails.countryRegulatoryBody) Then
                  SIL_INVOLVEDPARTYcountryAddress $silCountryAddress := INT_SILMappingCMNtoSIL.createSILCountryAddress($legalEntity.structureDetails.countryRegulatoryBody, INT_SILEnumerations.getCountryTypeJuridiction());
                  $silSubRegulatoryBody.addresses.addElement($silCountryAddress);
               End
               IF($legalEntity.structureDetails.isFinancialInstitution != null, $silOrganization.isSubOrganizationOf.regulatedFinancialInstitutionIndicator := $legalEntity.structureDetails.isFinancialInstitution);
               IF($legalEntity.structureDetails.isParentListInStockExchange != null, $silOrganization.isSubOrganizationOf.listedStockExchangeIndicator := $legalEntity.structureDetails.isParentListInStockExchange);
               IF($legalEntity.structureDetails.nameExchangeParent != null, $silOrganization.isSubOrganizationOf.stockExchangeCode := $legalEntity.structureDetails.nameExchangeParent);
               INT_SILMatchingTools.matchCMNMainBusinessToSILOrganization($legalEntity.structureDetails.mainBusinessActivity, $silOrganization.isSubOrganizationOf);
            End
         End
         If $legalEntity.structureDetails.financialInstitution != null Then
            /*** FINANCIAL INFORMATION ***/
            $silOrganization.regulatedBy := NewIndexed(SIL_INVOLVEDPARTYregulatoryBody);
            IF($legalEntity.structureDetails.financialInstitution.isRegFinancialInstitution != null, $silOrganization.regulatedFinancialInstitutionIndicator := $legalEntity.structureDetails.financialInstitution.isRegFinancialInstitution);
            SIL_INVOLVEDPARTYregulatoryBody $silRegulatoryBody := CAST(SIL_INVOLVEDPARTYregulatoryBody, CreateSkeletonDataClass(SIL_INVOLVEDPARTYregulatoryBody));
            $silOrganization.regulatedBy.addElement($silRegulatoryBody);
            If $legalEntity.structureDetails.financialInstitution.isRegFinancialInstitution != null Then
               $silRegulatoryBody.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName);
               SIL_INVOLVEDPARTYorganizationName $silOrganizationName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
               $silRegulatoryBody.names.addElement($silOrganizationName);
               $silOrganizationName.businessName := $legalEntity.structureDetails.financialInstitution.nameRegulatoryBody;
            End
            If NotEmpty($legalEntity.structureDetails.financialInstitution.countryRegulatoryBody) Then
               SIL_INVOLVEDPARTYcountryAddress $silCountryAddress := INT_SILMappingCMNtoSIL.createSILCountryAddress($legalEntity.structureDetails.financialInstitution.countryRegulatoryBody, INT_SILEnumerations.getCountryTypeJuridiction());
               $silCountryAddress.country.highRiskJuridictionIndicator := $legalEntity.structureDetails.financialInstitution.isCountryNonHighRisk;
               $silRegulatoryBody.addresses.addElement($silCountryAddress);
            End
            IF($legalEntity.structureDetails.financialInstitution.isCountryMemberOfFATF != null, $silRegulatoryBody.strategicDeficiencyFATFIndicator := $legalEntity.structureDetails.financialInstitution.isCountryMemberOfFATF);
            IF($legalEntity.structureDetails.financialInstitution.regulatoryReferenceNumber != null, $silOrganization.regulatoryReferenceNumber := $legalEntity.structureDetails.financialInstitution.regulatoryReferenceNumber);
            IF($legalEntity.structureDetails.financialInstitution.hasCountryMeetingEUCriteria != null, $silRegulatoryBody.meetEUJurisdictionEquivalentIndicator := $legalEntity.structureDetails.financialInstitution.hasCountryMeetingEUCriteria);
            IF($legalEntity.structureDetails.financialInstitution.isPartyListedStockExchange != null, $silOrganization.listedStockExchangeIndicator := $legalEntity.structureDetails.financialInstitution.isPartyListedStockExchange);
            IF($legalEntity.structureDetails.financialInstitution.nameStockExchange != null, $silOrganization.stockExchangeCode := $legalEntity.structureDetails.financialInstitution.nameStockExchange);
            IF($legalEntity.structureDetails.financialInstitution.hasApprovedEquityExchange != null, $silOrganization.hasApprovedEquityListedOnHSBCIndicator := $legalEntity.structureDetails.financialInstitution.hasApprovedEquityExchange);
            IF($legalEntity.structureDetails.financialInstitution.hasInternationalFirm != null, $silOrganization.auditByInternationalAccountantIndicator := $legalEntity.structureDetails.financialInstitution.hasInternationalFirm);
            If LIB_Validator.validateNotEmptyIndexed($legalEntity.structureDetails.hasMeetFinancialCriteria) Then
               $silOrganization.financialCriteriaSatisfaction := NewIndexed(String);
               ForEach String $financialCriteria In $legalEntity.structureDetails.hasMeetFinancialCriteria Do
                  $silOrganization.financialCriteriaSatisfaction.addElement($financialCriteria);
               End
            End
            If LIB_Validator.validateNotEmptyIndexed($legalEntity.structureDetails.hasMeetNonFinancialCriteria) Then
               $silOrganization.nonFinancialCriteriaSatisfaction := NewIndexed(String);
               ForEach String $financialCriteria In $legalEntity.structureDetails.hasMeetNonFinancialCriteria Do
                  $silOrganization.nonFinancialCriteriaSatisfaction.addElement($financialCriteria);
               End
            End
            If $legalEntity.structureDetails.financialInstitution.nameAuditAccountingFirm != null Then
               SIL_INVOLVEDPARTYcustomerRole $silRole := CAST(SIL_INVOLVEDPARTYcustomerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcustomerRole));
               $silOrganization.roles.addElement($silRole);
               $silRole.involvedPartyRelationships := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyRelationship);
               $silRole.involvedPartyRelationships.addElement(CAST(SIL_INVOLVEDPARTYinvolvedPartyRelationship, CreateSkeletonDataClass(SIL_INVOLVEDPARTYinvolvedPartyRelationship)));
               $silRole.involvedPartyRelationships[1].relationshipType := 'AccountingAuditFirm';
               SIL_INVOLVEDPARTYorganization $silParty := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
               $silRole.party := $silParty;
               SIL_INVOLVEDPARTYorganizationName $silOrganizationName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
               $silOrganizationName.businessName := $legalEntity.structureDetails.financialInstitution.nameAuditAccountingFirm;
               $silParty.names := NewIndexed(SIL_INVOLVEDPARTYorganizationName);
               $silParty.names.addElement($silOrganizationName);
            End
         End
      End
   End
   /******************************** Nature Of Business ****************************************************/
   If OR($cmnParty.type.isPrivateInvestmentCompany(), $cmnParty.type.isTrustOrFoundation()) and $legalEntityKycProfile.businessNature != null Then
      IF($legalEntityKycProfile.businessNature.naturePurposeOfEntity != null, $silOrganization.entityNature := $legalEntityKycProfile.businessNature.naturePurposeOfEntity);
      IF($legalEntityKycProfile.businessNature.reasonsUseEntityStructure != null, $silOrganization.reasonForEntityStructure := $legalEntityKycProfile.businessNature.reasonsUseEntityStructure);
   End
   /******************************** Bearer Shares ****************************************************/
   If OR($cmnParty.type.isPrivateInvestmentCompany(), $cmnParty.type.isCommercialOperatingBusiness()) and $legalEntityKycProfile.bearerShares != null Then
      If $legalEntityKycProfile.bearerShares.isBearerSharesCapableCompany != null Then
         $silOrganization.hasIssuedBearerShares := $legalEntityKycProfile.bearerShares.isBearerSharesCapableCompany;
         If $legalEntityKycProfile.bearerShares.hasIBSCApprovedAtRRCSC != null Then
            SIL_INVOLVEDPARTYbearShareInformation $silBearShare := CAST(SIL_INVOLVEDPARTYbearShareInformation, CreateSkeletonDataClass(SIL_INVOLVEDPARTYbearShareInformation));
            $silBearShare.bearerSharesIBSCApprovalIndicator := $legalEntityKycProfile.bearerShares.hasIBSCApprovedAtRRCSC;
            If NotEmpty($legalEntityKycProfile.bearerShares.approvedCustodianName) Then
               SIL_INVOLVEDPARTYorganization $silCustodian := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
               SIL_INVOLVEDPARTYorganizationName $silCustodianName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
               $silCustodianName.businessName := $legalEntityKycProfile.bearerShares.approvedCustodianName;
               $silCustodian.names.addElement($silCustodianName);
               $silBearShare.custodians.addElement($silCustodian);
            End
            If NotEmpty($legalEntityKycProfile.bearerShares.RRCSCReferallOutcome) Then
               $silBearShare.RRCSCApprovalType := LIST($legalEntityKycProfile.bearerShares.RRCSCReferallOutcome, 'CMN_KYCRRCSCReferralOutcome', 'sil_Id');
            End
            $silOrganization.bearShares.addElement($silBearShare);
         End
      End
      IF($legalEntityKycProfile.bearerShares.isIBSCCompany != null, $silOrganization.isCapableOfIssuingBearerShares := $legalEntityKycProfile.bearerShares.isIBSCCompany);
      If $legalEntityKycProfile.bearerShares.hyperlinkPBTCs != null Then
         SIL_CMSdocument $silDocument := INT_SILMappingCMNtoSIL.createSILDocument($legalEntityKycProfile.bearerShares.hyperlinkPBTCs, 'Bearer Share Document');
         If $silDocument != null Then
            $customerRole.documents.addElement($silDocument);
         End
      End
   End
   /******************************* Financial Information ************************/
   If $legalEntity.getKYCProfile().financialInformation != null Then
      IF($legalEntity.getKYCProfile().financialInformation.hasChangesToBusiness != null, $silOrganization.businessMaterialChangeIndicator := $legalEntity.getKYCProfile().financialInformation.hasChangesToBusiness);
      IF($legalEntity.getKYCProfile().financialInformation.hasChangesToBusiness && $legalEntity.getKYCProfile().financialInformation.changesToBusinessComment != null, $silOrganization.businessMaterialChangeDescription := $legalEntity.getKYCProfile().financialInformation.changesToBusinessComment);
   End
   Return $silOrganization;
End]]></definition>
        </method>
        <method name="createSILClientServices" userId="pezzi" uuid="00000000-5a01-fa23-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILClientServices'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILClientServices(CMN_BusinessRelationship $businessRelationship, CMN_Party $cmnParty) : Indexed SIL_RELATIONservice Begin
   Indexed SIL_RELATIONservice $silServices := NewIndexed(SIL_RELATIONservice);
   If $businessRelationship != null && $businessRelationship.optionalServices != null Then
      CMN_AvailableOptionCategory $availableOptionCategory;
      String $optionID := 'internetBanking';
      If $businessRelationship.optionalServices.isOptionSelected($optionID) Then
         CMN_OptionalServiceInternetBanking $optionalService := CAST(CMN_OptionalServiceInternetBanking, $businessRelationship.optionalServices.getOptionalService('internetBanking'));
         Indexed CMN_AssignedRole $roles := $cmnParty.getAssignedRoles();
         ForEach CMN_AssignedRole $assignedRole In $roles Do
            If ($assignedRole.getRoleID() == 'internetBanking') Then
               $optionalService := CAST(CMN_OptionalServiceInternetBanking, $businessRelationship.optionalServices.getOptionalService('internetBanking'));
               SIL_RELATIONinternetBankingService $silInternetService := CAST(SIL_RELATIONinternetBankingService, CreateSkeletonDataClass(SIL_RELATIONinternetBankingService));
               $silInternetService.authorityType := LIST(CAST(CMN_AssignedBRRole, $assignedRole).getBRRoleAttributes().internetBankingAuthority, 'CMN_InternetAuthorities__selector', 'sil_Id');
               If CAST(CMN_AssignedBRRole, $assignedRole).getBRRoleAttributes().internetBankingAuthority == 'linked' Then
                  $silInternetService.serviceId := CAST(CMN_AssignedBRRole, $assignedRole).getBRRoleAttributes().internetBASWGVNumber;
               End
               $silServices.addElement($silInternetService);
            End
         End
      End
   End
   Return $silServices;
End]]></definition>
        </method>
        <method name="createSILConnectedParties" userId="pezzi" uuid="00000000-7aad-6115-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILConnectedParties'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILConnectedParties(CMN_Party $cmnParty, CMN_BusinessRelationship $cmnBusinessRelationship := null, Indexed SIL_INVOLVEDPARTYinvolvedPartyRelationship $silPartyStructure := null) : Indexed SIL_INVOLVEDPARTYinvolvedPartyRelationship Begin
   If $silPartyStructure == null Then
      $silPartyStructure := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyRelationship);
   End
   If $cmnParty == null Then
      Return $silPartyStructure;
   End
   /******************************************* CONNECTED PARTIES SCREEN ********************************************/
   If $cmnBusinessRelationship != null Then
      ForEach $iRecord In RECORDS('CMN_PartyRoles') Do
         String $roleID := TOSTRING($iRecord.getValue('id'));
         Indexed CMN_Party $parties := $cmnParty.getInvolvedParties($cmnBusinessRelationship, $roleID);
         If LIB_Validator.validateNotEmptyIndexed($parties) && NotEmpty($roleID) Then
            IF($silPartyStructure == null, $silPartyStructure := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyRelationship));
            ForEach CMN_Party $party In $parties Do
               SIL_INVOLVEDPARTYinvolvedPartyRelationship $silINVOLVEDPARTYinvolvedPartyRelationship := CAST(SIL_INVOLVEDPARTYinvolvedPartyRelationship, CreateSkeletonDataClass(SIL_INVOLVEDPARTYinvolvedPartyRelationship));
               If $party.type.isPhysicalPerson() Then
                  CMN_PhysicalPerson $physicalPerson := CAST(CMN_PhysicalPerson, $party);
                  $silINVOLVEDPARTYinvolvedPartyRelationship.party := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
                  $silINVOLVEDPARTYinvolvedPartyRelationship.party.names := NewIndexed(SIL_INVOLVEDPARTYindividualName);
                  SIL_INVOLVEDPARTYindividualName $silIndividualName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
                  If $physicalPerson.lastName != null Then
                     $silIndividualName.lastName := $physicalPerson.lastName;
                  End
                  If $physicalPerson.firstName != null Then
                     $silIndividualName.firstName := $physicalPerson.firstName;
                  End
                  $silINVOLVEDPARTYinvolvedPartyRelationship.party.names.addElement($silIndividualName);
               ElseIf $party.type.isLegalEntity() Then
                  CMN_LegalEntity $legalEntity := CAST(CMN_LegalEntity, $party);
                  $silINVOLVEDPARTYinvolvedPartyRelationship.party := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
                  $silINVOLVEDPARTYinvolvedPartyRelationship.party.names := NewIndexed(SIL_INVOLVEDPARTYorganizationName);
                  SIL_INVOLVEDPARTYorganizationName $silOrganizationName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
                  If $legalEntity.companyName != null Then
                     $silOrganizationName.businessName := $legalEntity.companyName;
                  End
                  $silINVOLVEDPARTYinvolvedPartyRelationship.party.names.addElement($silOrganizationName);
               End
               /*String $relationshipRole := LIST($roleID, 'SIL_PartyRoles__selector', 'relationshipRole', 'id');
               If NotEmpty($relationshipRole) Then
                  $silINVOLVEDPARTYinvolvedPartyRelationship.relationshipRole := $relationshipRole;
               End*/
               String $relationshipType := LIST($roleID, 'CMN_PartyRoles', 'sil_Id', 'id');
               If NotEmpty($relationshipType) Then
                  $silINVOLVEDPARTYinvolvedPartyRelationship.relationshipType := $relationshipType;
               End
               If NotEmpty($party.getSILID()) Then
                  $silINVOLVEDPARTYinvolvedPartyRelationship.party.id := $party.getSILID();
               End
               $silPartyStructure.addElement($silINVOLVEDPARTYinvolvedPartyRelationship);
            End
         End
      End
   End
   Return $silPartyStructure;
End]]></definition>
        </method>
        <method name="createSILCountry" userId="pezzi" uuid="ffffffff-e47a-2bfc-0000-000000000000">
            <definition><![CDATA[/**
  Function to create a SIL_Country instance given a country code.
  @return SIL_STATICCountry instance.
*/
StaticFunction createSILCountry(String $countryCode) : SIL_STATICcountry Begin
   SIL_STATICcountry $country := CAST(SIL_STATICcountry, CreateSkeletonDataClass(SIL_STATICcountry));
   If EMPTY($countryCode) || EMPTY(LIST($countryCode, 'CMN_Countries__selector', 'description', 'id')) Then
      If EMPTY($countryCode) Then
         $countryCode := 'missing';
      End
      LIB_Logger.integrationWarn('[INT_SILMapping]: Unknown or missing country code found for country code: ' & $countryCode);
      Return $country;
   End
   $country.code := $countryCode;
   $country.name := TRANSLATE(LIST($countryCode, 'CMN_Countries__selector', 'description', 'id'), 'en');
   Return $country;
End]]></definition>
        </method>
        <method name="createSILCountryAddress" userId="pezzi" uuid="00000000-3147-d458-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILCountryAddress'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILCountryAddress(String $countryCode, String $countryType) : SIL_INVOLVEDPARTYcountryAddress Begin
   SIL_INVOLVEDPARTYcountryAddress $silCountryAddress := CAST(SIL_INVOLVEDPARTYcountryAddress, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcountryAddress));
   If EMPTY($countryCode) || EMPTY($countryType) Then
      LIB_Logger.integrationWarn('[INT_SILMapping]: Missing Country code or missing country type. Generating empty country address');
      Return $silCountryAddress;
   End
   $silCountryAddress.country := INT_SILMappingCMNtoSIL.createSILCountry($countryCode);
   $silCountryAddress.countryType := $countryType;
   Return $silCountryAddress;
End]]></definition>
        </method>
        <method name="createSILCredit" userId="pezzi" uuid="00000000-0fc3-b1d3-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILCredit'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILCredit(CMN_BusinessRelationship $businessRelationship) : Indexed SIL_CREDITcredit Begin
   Indexed SIL_CREDITcredit $credits := NewIndexed(SIL_CREDITcredit);
   If $businessRelationship != null && $businessRelationship.optionalServices != null Then
      CMN_AvailableOptionCategory $availableOptionCategory;
      String $optionID := '';
      $optionID := 'generalAgreementTradeOperation';
      SIL_CREDITcredit $silCredit := CAST(SIL_CREDITcredit, CreateSkeletonDataClass(SIL_CREDITcredit));
      If $businessRelationship.optionalServices.isOptionSelected($optionID) Then
         $silCredit.documentCreditAgreementIndicator := true;
         CMN_OptionalServiceGenAgrTradeOper $optionalService := CAST(CMN_OptionalServiceGenAgrTradeOper, $businessRelationship.optionalServices.getOptionalService($optionID));
         IF($optionalService.agreementOn != null, $silCredit.documentCreditAgreementDate := $optionalService.agreementOn);
      Else
         $silCredit.documentCreditAgreementIndicator := false;
      End
      $credits.addElement($silCredit);
      $optionID := 'guaranteeLetter';
      $silCredit.letterOfCreditIndicator := $businessRelationship.optionalServices.isOptionSelected($optionID);
   End
   Return $credits;
End]]></definition>
        </method>
        <method name="createSILCurrency" userId="pezzi" uuid="ffffffff-e343-a86b-0000-000000000000">
            <definition><![CDATA[/**
  Create SIL_Currency instance based on its code
  @param $curCode 3 letter currency code
  @return Matching currency instance
*/
StaticFunction createSILCurrency(String $curCode) : SIL_STATICCurrency Begin
   SIL_STATICCurrency $currency := CAST(SIL_STATICCurrency, CreateSkeletonDataClass(SIL_STATICCurrency));
   If EMPTY($curCode) || EMPTY(LIST($curCode, 'CMN_Currencies__selector', 'shortName', 'id')) Then
      If EMPTY($curCode) Then
         $curCode := 'missing';
      End
      LIB_Logger.integrationWarn('[INT_SILMapping]: Unknown or missing currency code found for SIL_Currency ' & $curCode);
      Return $currency;
   End
   $currency.code := $curCode;
   $currency.name := LIST($curCode, 'CMN_Currencies__selector', 'fullName', 'id');
   Return $currency;
End]]></definition>
        </method>
        <method name="createSILCustomerRole" userId="pezzi" uuid="ffffffff-c8f9-50ce-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILCustomerRole'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILCustomerRole(CMN_Party $cmnParty, CMN_BusinessRelationship $cmnBusinessRelationship, SIL_INVOLVEDPARTYinvolvedParty $silParty) : SIL_INVOLVEDPARTYinvolvedParty Begin
   If $silParty == null Then
      Return $silParty;
   End
   SIL_INVOLVEDPARTYcustomerRole $customerRole := CAST(SIL_INVOLVEDPARTYcustomerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcustomerRole));
   $customerRole.customerRisks := NewIndexed(SIL_INVOLVEDPARTYcustomerRisk);
   $customerRole.preferences := NewIndexed(SIL_PREFERENCESpreferences);
   $customerRole.documents := NewIndexed(SIL_CMSdocument);
   $customerRole.references := NewIndexed(SIL_RELATIONreference);
   $customerRole.connectedParties := NewIndexed(SIL_INVOLVEDPARTYRELATIONparties);
   $customerRole.kycs := NewIndexed(SIL_KYCkyc);
   $customerRole.relations := NewIndexed(SIL_INVOLVEDPARTYRELATIONipRelation);
   $customerRole.customerClassifications := NewIndexed(SIL_CUSTOMERCLASSIFICATIONcustomerClassification);
   /******************************** CUSTOMER CLASSIFICATION ***************************************/
   SIL_CUSTOMERCLASSIFICATIONfccram $fccramCustomerClassification := CAST(SIL_CUSTOMERCLASSIFICATIONfccram, CreateSkeletonDataClass(SIL_CUSTOMERCLASSIFICATIONfccram));
   IF(NotEmpty($cmnParty.FCCRiskRating.customerFamily), $fccramCustomerClassification.customerFamily := LIST($cmnParty.FCCRiskRating.customerFamily, 'SIL_FCCRAMCustomerFamilies', 'id', 'cmn_description'));
   IF(NotEmpty($cmnParty.FCCRiskRating.customerType), $fccramCustomerClassification.customerType := LIST($cmnParty.FCCRiskRating.customerType, 'SIL_FCCRAMCustomerTypes', 'description', 'cmn_description'));
   IF($cmnBusinessRelationship != null and NotEmpty($cmnParty.legalEntityStructure), $fccramCustomerClassification.classification := LIST($cmnParty.legalEntityStructure, 'SIL_LegalEntityStructures', 'sil_Id'));
   If $cmnBusinessRelationship.partyIsCustomer($cmnParty) Then
      IF(NotEmpty($cmnParty.FCCRiskRating.newManualFCCRRCode), $fccramCustomerClassification.manualOverrideValue := LIST($cmnParty.FCCRiskRating.newManualFCCRRCode, 'SIL_FCCRCodes', 'sil_id'));
      IF(NotEmpty($cmnParty.FCCRiskRating.newCalculatedFCCRRCode), $fccramCustomerClassification.calculatedFCCRRCode := LIST($cmnParty.FCCRiskRating.newCalculatedFCCRRCode, 'SIL_FCCRCodes', 'sil_id'));
      IF(NotEmpty($cmnParty.FCCRiskRating.calculatedFCCRRCountryCode), $fccramCustomerClassification.calculatedFCCRRCountryCode := $cmnParty.FCCRiskRating.calculatedFCCRRCountryCode);
      IF(NotEmpty($cmnParty.FCCRiskRating.calculatedFCCRRBusinessOccCode), $fccramCustomerClassification.calculatedFCCRRBusinessOccupationCode := $cmnParty.FCCRiskRating.calculatedFCCRRBusinessOccCode);
      IF(NotEmpty($cmnParty.FCCRiskRating.calculatedFCCRRLegalStructCode), $fccramCustomerClassification.calculatedFCCRRLegalEntityStructureCode := $cmnParty.FCCRiskRating.calculatedFCCRRLegalStructCode);
      IF(NotEmpty($cmnParty.FCCRiskRating.calculatedFCCRRProductCode), $fccramCustomerClassification.calculatedFCCRRProductCode := $cmnParty.FCCRiskRating.calculatedFCCRRProductCode);
      /* If NotEmpty($cmnBusinessRelationship.kytProfile.generalInformation.fccrmLegalEntityStructure) Then
      $customerRole.legalFormFCCRAMCode := NewIndexed(SIL_INVOLVEDPARTYlegalEntityStructure);
      $customerRole.legalFormFCCRAMCode.addElement(LIST($cmnBusinessRelationship.kytProfile.generalInformation.fccrmLegalEntityStructure, 'SIL_LegalEntityStructures', 'description', 'id'));
      //$customerRole.legalFormFCCRAMCode.addElement($cmnBusinessRelationship.kytProfile.generalInformation.fccrmLegalEntityStructure);
   End*/
      If LIB_Validator.validateNotEmptyIndexed($cmnParty.FCCRiskRating.auditReasonCodes) Then
         $fccramCustomerClassification.auditReasonCodes := NewIndexed(String);
         $fccramCustomerClassification.auditReasonCodes.addAll($cmnParty.FCCRiskRating.auditReasonCodes);
      End
   End
   $customerRole.customerClassifications.addElement($fccramCustomerClassification);
   /********* DOCUMENT ***********/
   CMN_hyperlink $cmnHyperLink;
   SIL_CMSdocument $silDocument;
   If $cmnParty.type.isPhysicalPerson() && LIB_Validator.validateNotEmptyIndexed($cmnParty.kycProfile.overallNetWorthAndIncome.evidences) Then
      ForEach $cmnHyperLink In $cmnParty.kycProfile.overallNetWorthAndIncome.evidences Do
         $silDocument := INT_SILMappingCMNtoSIL.createSILDocument($cmnHyperLink.hyperlink, $cmnHyperLink.description, 'Source Of Fund');
         If $silDocument != null Then
            $customerRole.documents.addElement($silDocument);
         End
      End
   End
   /**************************** PEPSCCDetails ************************************************/
   //$customerRole.customerClassifications.addAll(INT_SILMappingCMNtoSIL.createSILCustomerRoleClassifications($cmnParty));
   $silParty.roles.addElement($customerRole);
   Return $silParty;
End]]></definition>
        </method>
        <method name="createSILDeclaration" userId="pezzi" uuid="00000000-628d-a6e0-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILDeclaration'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILDeclaration(CMN_BusinessRelationship $businessRelationship) : Indexed SIL_DECLARATIONdeclaration Begin
   Indexed SIL_DECLARATIONdeclaration $silDeclarations := NewIndexed(SIL_DECLARATIONdeclaration);
   If $businessRelationship != null && $businessRelationship.regulatoryProfile.rmDeclarations != null Then
      CMN_RMDeclarations $rmDeclarations := $businessRelationship.regulatoryProfile.rmDeclarations;
      SIL_DECLARATIONsustainabilityPolicyDeclaration $silSustainability := CAST(SIL_DECLARATIONsustainabilityPolicyDeclaration, CreateSkeletonDataClass(SIL_DECLARATIONsustainabilityPolicyDeclaration));
      IF($rmDeclarations.sustainabilityQuestion1 != null, $silSustainability.significantWealthFromHSRSectorIndicator := $rmDeclarations.sustainabilityQuestion1);
      IF($rmDeclarations.sustainabilityQuestion2 != null, $silSustainability.significantWealthFromUnacceptableActivitiesIndicator := $rmDeclarations.sustainabilityQuestion2);
      IF($rmDeclarations.sustainabilityQuestion3 != null, $silSustainability.operateInHSRSectorIndicator := $rmDeclarations.sustainabilityQuestion3);
      IF($rmDeclarations.sustainabilityQuestion4 != null, $silSustainability.operateInUnacceptableActivitiesIndicator := $rmDeclarations.sustainabilityQuestion4);
      $silSustainability.nonComplianceIndicator := TOBOOLEAN($rmDeclarations.sustainabilityQuestion5);
      $silDeclarations.addElement($silSustainability);
      SIL_DECLARATIONantiFraudDeclaration $silAntiFraud := CAST(SIL_DECLARATIONantiFraudDeclaration, CreateSkeletonDataClass(SIL_DECLARATIONantiFraudDeclaration));
      IF($rmDeclarations.antiFraudQuestion1 != null, $silAntiFraud.antiFraudAdverseMediaInterestIndicator := $rmDeclarations.antiFraudQuestion1);
      IF($rmDeclarations.antiFraudQuestion2 != null, $silAntiFraud.antiFraudBusinessModelIndicator := $rmDeclarations.antiFraudQuestion2);
      IF($rmDeclarations.antiFraudQuestion3 != null, $silAntiFraud.antiFraudTransparencyIndicator := $rmDeclarations.antiFraudQuestion3);
      $silDeclarations.addElement($silAntiFraud);
      SIL_DECLARATIONtaxTransparencyDeclaration $silTaxTransparency := CAST(SIL_DECLARATIONtaxTransparencyDeclaration, CreateSkeletonDataClass(SIL_DECLARATIONtaxTransparencyDeclaration));
      IF($rmDeclarations.taxTransparencyQuestion1 != null, $silTaxTransparency.suspectUndeclaredFundIndicator := $rmDeclarations.taxTransparencyQuestion1);
      IF($rmDeclarations.taxTransparencyQuestion2 != null, $silTaxTransparency.refuseDiscloseTaxResidenceIndicator := $rmDeclarations.taxTransparencyQuestion2);
      IF($rmDeclarations.taxTransparencyQuestion3 != null, $silTaxTransparency.refuseProvideTaxInformationIndicator := $rmDeclarations.taxTransparencyQuestion3);
      IF($rmDeclarations.taxTransparencyQuestion4 != null, $silTaxTransparency.requestRecommendationOfTaxableIncomeIndicator := $rmDeclarations.taxTransparencyQuestion4);
      IF($rmDeclarations.taxTransparencyQuestion5 != null, $silTaxTransparency.refuseContactedIndicator := $rmDeclarations.taxTransparencyQuestion5);
      IF($rmDeclarations.taxTransparencyQuestion6 != null, $silTaxTransparency.suspectGuiltyOfTaxEvasionIndicator := $rmDeclarations.taxTransparencyQuestion6);
      IF($rmDeclarations.taxTransparencyQuestion7 != null, $silTaxTransparency.highTaxRiskCountryNonTaxCompliantIndicator := $rmDeclarations.taxTransparencyQuestion7);
      $silDeclarations.addElement($silTaxTransparency);
   End
   Return $silDeclarations;
End]]></definition>
        </method>
        <method name="createSILDOCOScreening" userId="pezzi" uuid="00000000-3b1b-c385-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILDOCOScreening'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILDOCOScreening(CMN_Party $cmnParty, Indexed SIL_INVOLVEDPARTYSCREENINGscreening $silScreeningScreenings) : Indexed SIL_INVOLVEDPARTYSCREENINGscreening Begin
   If $cmnParty == null Then
      Return $silScreeningScreenings;
   End
   IF(not LIB_Validator.validateNotEmptyIndexed($silScreeningScreenings), $silScreeningScreenings := NewIndexed(SIL_INVOLVEDPARTYSCREENINGscreening));
   If $cmnParty.type.isPhysicalPerson() Then
      CMN_PhysicalPerson $cmnPhysicalPerson := CAST(CMN_PhysicalPerson, $cmnParty);
      /****************** Overall net worth and Income *********************************/
      CMN_OverallNetWorthAndIncome $cmnOverallNetWorthAndIncome := $cmnPhysicalPerson.kycProfile.overallNetWorthAndIncome;
      If LIB_Validator.validateNotEmptyIndexed($cmnOverallNetWorthAndIncome.evidences) Then
         CMN_hyperlink $cmnhyperlink;
         SIL_INVOLVEDPARTYSCREENINGdocoScreening $silINVOLVEDPARTYSCREENINGdocoScreening;
         ForEach $cmnhyperlink In $cmnOverallNetWorthAndIncome.evidences Do
            $silINVOLVEDPARTYSCREENINGdocoScreening := CAST(SIL_INVOLVEDPARTYSCREENINGdocoScreening, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGdocoScreening));
            $silINVOLVEDPARTYSCREENINGdocoScreening.findings := NewIndexed(SIL_INVOLVEDPARTYSCREENINGfinding);
            SIL_INVOLVEDPARTYSCREENINGdocoFinding $silINVOLVEDPARTYSCREENINGfinding := CAST(SIL_INVOLVEDPARTYSCREENINGdocoFinding, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGdocoFinding));
            IF($cmnhyperlink.description != null, $silINVOLVEDPARTYSCREENINGfinding.description := $cmnhyperlink.description);
            IF($cmnhyperlink.hyperlink != null, $silINVOLVEDPARTYSCREENINGfinding.sourceLink := $cmnhyperlink.hyperlink);
            $silINVOLVEDPARTYSCREENINGdocoScreening.findings.addElement($silINVOLVEDPARTYSCREENINGfinding);
            $silINVOLVEDPARTYSCREENINGdocoScreening.type := 'NETWORTH';
            $silScreeningScreenings.addElement($silINVOLVEDPARTYSCREENINGdocoScreening);
         End
      End
      CMN_KycSow $cmnKycSow := $cmnPhysicalPerson.getKYCProfile().sourceOfWealth;
      /******************************** KYC SOW ****************************************************/
      CMN_KycSowContribution $cmnKycSowContribution;
      CMN_hyperlink $cmnhyperlink;
      SIL_INVOLVEDPARTYSCREENINGdocoScreening $silINVOLVEDPARTYSCREENINGdocoScreening;
      SIL_INVOLVEDPARTYSCREENINGdocoFinding $silINVOLVEDPARTYSCREENINGfinding;
      /****************** SOW Employement ***************/
      If LIB_Validator.validateNotEmptyIndexed($cmnKycSow.sowEmployment) Then
         ForEach $cmnKycSowContribution In $cmnKycSow.sowEmployment Do
            If LIB_Validator.validateNotEmptyIndexed($cmnKycSowContribution.evidences) Then
               ForEach $cmnhyperlink In $cmnKycSowContribution.evidences Do
                  $silINVOLVEDPARTYSCREENINGdocoScreening := CAST(SIL_INVOLVEDPARTYSCREENINGdocoScreening, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGdocoScreening));
                  $silINVOLVEDPARTYSCREENINGdocoScreening.findings := NewIndexed(SIL_INVOLVEDPARTYSCREENINGfinding);
                  $silINVOLVEDPARTYSCREENINGfinding := CAST(SIL_INVOLVEDPARTYSCREENINGdocoFinding, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGdocoFinding));
                  IF($cmnhyperlink.description != null, $silINVOLVEDPARTYSCREENINGfinding.description := $cmnhyperlink.description);
                  IF($cmnhyperlink.hyperlink != null, $silINVOLVEDPARTYSCREENINGfinding.sourceLink := $cmnhyperlink.hyperlink);
                  $silINVOLVEDPARTYSCREENINGdocoScreening.findings.addElement($silINVOLVEDPARTYSCREENINGfinding);
                  $silINVOLVEDPARTYSCREENINGdocoScreening.type := 'EMPLOYEMENT';
                  $silScreeningScreenings.addElement($silINVOLVEDPARTYSCREENINGdocoScreening);
               End
            End
         End
      End
      /****************** SOW Business Owner *********************/
      If LIB_Validator.validateNotEmptyIndexed($cmnKycSow.sowBusinessOwner) Then
         ForEach $cmnKycSowContribution In $cmnKycSow.sowBusinessOwner Do
            If LIB_Validator.validateNotEmptyIndexed($cmnKycSowContribution.evidences) Then
               ForEach $cmnhyperlink In $cmnKycSowContribution.evidences Do
                  $silINVOLVEDPARTYSCREENINGdocoScreening := CAST(SIL_INVOLVEDPARTYSCREENINGdocoScreening, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGdocoScreening));
                  $silINVOLVEDPARTYSCREENINGdocoScreening.findings := NewIndexed(SIL_INVOLVEDPARTYSCREENINGfinding);
                  $silINVOLVEDPARTYSCREENINGfinding := CAST(SIL_INVOLVEDPARTYSCREENINGdocoFinding, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGdocoFinding));
                  IF($cmnhyperlink.description != null, $silINVOLVEDPARTYSCREENINGfinding.description := $cmnhyperlink.description);
                  IF($cmnhyperlink.hyperlink != null, $silINVOLVEDPARTYSCREENINGfinding.sourceLink := $cmnhyperlink.hyperlink);
                  $silINVOLVEDPARTYSCREENINGdocoScreening.findings.addElement($silINVOLVEDPARTYSCREENINGfinding);
                  $silINVOLVEDPARTYSCREENINGdocoScreening.type := 'BUSINESS_OWNERSHIP';
                  $silScreeningScreenings.addElement($silINVOLVEDPARTYSCREENINGdocoScreening);
               End
            End
         End
      End
      /****************** SOW Inheritance *********************/
      If LIB_Validator.validateNotEmptyIndexed($cmnKycSow.sowInheritanceDonation) Then
         ForEach $cmnKycSowContribution In $cmnKycSow.sowInheritanceDonation Do
            If LIB_Validator.validateNotEmptyIndexed($cmnKycSowContribution.evidences) Then
               ForEach $cmnhyperlink In $cmnKycSowContribution.evidences Do
                  $silINVOLVEDPARTYSCREENINGdocoScreening := CAST(SIL_INVOLVEDPARTYSCREENINGdocoScreening, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGdocoScreening));
                  $silINVOLVEDPARTYSCREENINGdocoScreening.findings := NewIndexed(SIL_INVOLVEDPARTYSCREENINGfinding);
                  $silINVOLVEDPARTYSCREENINGfinding := CAST(SIL_INVOLVEDPARTYSCREENINGdocoFinding, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGdocoFinding));
                  IF($cmnhyperlink.description != null, $silINVOLVEDPARTYSCREENINGfinding.description := $cmnhyperlink.description);
                  IF($cmnhyperlink.hyperlink != null, $silINVOLVEDPARTYSCREENINGfinding.sourceLink := $cmnhyperlink.hyperlink);
                  $silINVOLVEDPARTYSCREENINGdocoScreening.findings.addElement($silINVOLVEDPARTYSCREENINGfinding);
                  $silINVOLVEDPARTYSCREENINGdocoScreening.type := 'INHERITANCE';
                  $silScreeningScreenings.addElement($silINVOLVEDPARTYSCREENINGdocoScreening);
               End
            End
         End
      End
      /****************** SOW Family *********************/
      If LIB_Validator.validateNotEmptyIndexed($cmnKycSow.sowFamilyRelationsRoyalty) Then
         ForEach $cmnKycSowContribution In $cmnKycSow.sowFamilyRelationsRoyalty Do
            If LIB_Validator.validateNotEmptyIndexed($cmnKycSowContribution.evidences) Then
               ForEach $cmnhyperlink In $cmnKycSowContribution.evidences Do
                  $silINVOLVEDPARTYSCREENINGdocoScreening := CAST(SIL_INVOLVEDPARTYSCREENINGdocoScreening, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGdocoScreening));
                  $silINVOLVEDPARTYSCREENINGdocoScreening.findings := NewIndexed(SIL_INVOLVEDPARTYSCREENINGfinding);
                  $silINVOLVEDPARTYSCREENINGfinding := CAST(SIL_INVOLVEDPARTYSCREENINGdocoFinding, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGdocoFinding));
                  IF($cmnhyperlink.description != null, $silINVOLVEDPARTYSCREENINGfinding.description := $cmnhyperlink.description);
                  IF($cmnhyperlink.hyperlink != null, $silINVOLVEDPARTYSCREENINGfinding.sourceLink := $cmnhyperlink.hyperlink);
                  $silINVOLVEDPARTYSCREENINGdocoScreening.findings.addElement($silINVOLVEDPARTYSCREENINGfinding);
                  $silINVOLVEDPARTYSCREENINGdocoScreening.type := 'FAMILY_SITUATION';
                  $silScreeningScreenings.addElement($silINVOLVEDPARTYSCREENINGdocoScreening);
               End
            End
         End
      End
      /****************** SOW Family *********************/
      If LIB_Validator.validateNotEmptyIndexed($cmnKycSow.sowOthers) Then
         ForEach $cmnKycSowContribution In $cmnKycSow.sowOthers Do
            If LIB_Validator.validateNotEmptyIndexed($cmnKycSowContribution.evidences) Then
               ForEach $cmnhyperlink In $cmnKycSowContribution.evidences Do
                  $silINVOLVEDPARTYSCREENINGdocoScreening := CAST(SIL_INVOLVEDPARTYSCREENINGdocoScreening, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGdocoScreening));
                  $silINVOLVEDPARTYSCREENINGdocoScreening.findings := NewIndexed(SIL_INVOLVEDPARTYSCREENINGfinding);
                  $silINVOLVEDPARTYSCREENINGfinding := CAST(SIL_INVOLVEDPARTYSCREENINGdocoFinding, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGdocoFinding));
                  IF($cmnhyperlink.description != null, $silINVOLVEDPARTYSCREENINGfinding.description := $cmnhyperlink.description);
                  IF($cmnhyperlink.hyperlink != null, $silINVOLVEDPARTYSCREENINGfinding.sourceLink := $cmnhyperlink.hyperlink);
                  $silINVOLVEDPARTYSCREENINGdocoScreening.findings.addElement($silINVOLVEDPARTYSCREENINGfinding);
                  $silINVOLVEDPARTYSCREENINGdocoScreening.type := 'OTHER';
                  $silScreeningScreenings.addElement($silINVOLVEDPARTYSCREENINGdocoScreening);
               End
            End
         End
      End
   End
End]]></definition>
        </method>
        <method name="createSILDocument" userId="pezzi" uuid="ffffffff-f454-8975-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILDocument'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILDocument(String $hyperlink, String $description := null, String $documentType := null) : SIL_CMSdocument Begin
   SIL_CMSdocument $silDocument := CAST(SIL_CMSdocument, CreateSkeletonDataClass(SIL_CMSdocument));
   IF($documentType != null, $silDocument.type := $documentType);
   IF($hyperlink != null, $silDocument.link := $hyperlink);
   IF($description != null, $silDocument.comment := $description);
   Return $silDocument;
End]]></definition>
        </method>
        <method name="createSILDocumentFromBusinessRelationshipParty" userId="pezzi" uuid="00000000-585a-21af-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILDocumentFromBusinessRelationshipParty'.
  @param $documentManagerHelper CMN_DocumentManagerHelper.
  @param $businessRelationship CMN_BusinessRelationship.
  @param $party CMN_Party.
  @return       SIL_CMSdocument.
*/
StaticFunction createSILDocumentFromBusinessRelationshipParty(CMN_BusinessRelationship $businessRelationship, CMN_Party $party, CMN_DocumentTrackerManagerItemAdditional $documentTrackerItem) : SIL_CMSdocument Begin
   SIL_CMSdocument $silDocument;
   If $documentTrackerItem != null Then
      $silDocument := CAST(SIL_CMSdocument, CreateSkeletonDataClass(SIL_CMSdocument));
      //CLASS
      IF($documentTrackerItem.sectionId != null, $silDocument.class := $documentTrackerItem.sectionId);
      //
      //ReceivedDate
      IF($documentTrackerItem.receivedDate != null, $silDocument.receivedDate := $documentTrackerItem.receivedDate);
      //
      //Type
      IF($documentTrackerItem.documentType != null, $silDocument.type := LIST($documentTrackerItem.documentType, 'CMN_DocumentTypeUpload__selector', 'sil_Id'));
      //
      //Name
      IF($documentTrackerItem.documentFile != null && $documentTrackerItem.documentFile.clusterFile != null, $silDocument.name := REPLACE(FILENAME($documentTrackerItem.documentFile.clusterFile), '^\\d+?_', ''));
      //
      //Title
      IF($documentTrackerItem.description != null, $silDocument.title := $documentTrackerItem.description);
      //
      //ExpiredOn
      //IF();
      //
      //Account
      SIL_ACCOUNTaccount $silAccount;
      If $businessRelationship.getSILID() != null Then
         //account Id
         $silAccount := CAST(SIL_ACCOUNTaccount, CreateSkeletonDataClass(SIL_ACCOUNTaccount));
         IF($party == null, $silAccount.accountId := $businessRelationship.getSILID());
         //bookingCenter
         SIL_INVOLVEDPARTYdepartment $silDepartment;
         If $businessRelationship.getBookingCenter() != null Then
            $silDepartment := CAST(SIL_INVOLVEDPARTYdepartment, CreateSkeletonDataClass(SIL_INVOLVEDPARTYdepartment));
            $silDepartment.bookingCenter := LIST($businessRelationship.getBookingCenter(), 'CMN_BookingCenter__selector', 'locationCode', 'description');
         End
         IF($silDepartment != null, $silAccount.bookingCenter := $silDepartment);
      End
      IF($silAccount != null, $silDocument.accounts.addElement($silAccount));
      //
      //ROLES
      SIL_INVOLVEDPARTYcustomerRole $customerRole;
      If $party != null Then
         $customerRole := CAST(SIL_INVOLVEDPARTYcustomerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcustomerRole));
         SIL_INVOLVEDPARTYindividual $individual;
         If $party.getSILID() != null Then
            $individual := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
            $individual.id := $party.getSILID();
            SIL_INVOLVEDPARTYindividualName $individualName;
            If $party.getFullName() != null Then
               $individualName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
               $individualName.fullName := $party.getFullName();
            End
            IF($individualName != null, $individual.names.addElement($individualName));
         End
         IF($individual != null, $customerRole.party := $individual);
      End
      IF($customerRole != null, $silDocument.roles.addElement($customerRole));
   End
   Return $silDocument;
End]]></definition>
        </method>
        <method name="createSILEmailAddress" userId="pezzi" uuid="00000000-537a-dc12-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILEmailAddress'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILEmailAddress(CMN_Email $cmnEmail) : SIL_INVOLVEDPARTYemailAddress Begin
   SIL_INVOLVEDPARTYemailAddress $silEmail := CAST(SIL_INVOLVEDPARTYemailAddress, CreateSkeletonDataClass(SIL_INVOLVEDPARTYemailAddress));
   If $cmnEmail == null Then
      LIB_Logger.integrationWarn('[INT_SILMapping]: CMN_Email object empty, creating empty SIL_EmailAddress');
      Return $silEmail;
   End
   //Old logic prior to US changes was sending a fixed value - Story # 172602
   //$silEmail.type := '04'
   IF(not EMPTY($cmnEmail.getSILID()), $silEmail.addressId := $cmnEmail.getSILID());
   IF(not EMPTY($cmnEmail.address), $silEmail.email := $cmnEmail.address);
   If not EMPTY($silEmail.email) && MATCH($silEmail.email, '@') Then
      $silEmail.domainName := SPLIT($cmnEmail.address, '@')[2];
   End
   // @STODO no corresponding fields in Process
   $silEmail.validFrom := NOW();
   $silEmail.isAttachmentAllowed := true;
   IF($cmnEmail.isMain != null, $silEmail.isPrimary := $cmnEmail.isMain);
   INT_SILMappingCMNtoSILVariationFactory__selector().createSILEmailAddress($cmnEmail, $silEmail);
   Return $silEmail;
End]]></definition>
        </method>
        <method name="createSILEstimatedNetWorth" userId="pezzi" uuid="00000000-1ec8-f233-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILEstimatedNetWorth'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILEstimatedNetWorth(CMN_Party $cmnParty) : SIL_KYCestimatedNetWorth Begin
   If $cmnParty == null || not ISA($cmnParty, CMN_LegalEntity) Then
      Return null;
   End
   SIL_KYCestimatedNetWorth $silEstimatedNetWorth := CAST(SIL_KYCestimatedNetWorth, CreateSkeletonDataClass(SIL_KYCestimatedNetWorth));
   /********************************** GENERAL FIELDS ********************************/
   CMN_LegalEntity $legalEntity := CAST(CMN_LegalEntity, $cmnParty);
   CMN_LegalEntityKycProfile $cmnLegalEntityKycProfile := $legalEntity.getKYCProfile();
   /********************************Estimated Worth ***********************************/
   If NotEmpty($cmnLegalEntityKycProfile.financialInformation.getSILID()) Then
      $silEstimatedNetWorth.id := $cmnLegalEntityKycProfile.financialInformation.getSILID();
   End
   If $cmnLegalEntityKycProfile.financialInformation.financialAssets != null Then
      $silEstimatedNetWorth.financialAssetsAmount := $cmnLegalEntityKycProfile.financialInformation.financialAssets;
   End
   If $cmnLegalEntityKycProfile.financialInformation.fixedAssets != null Then
      $silEstimatedNetWorth.fixedAssetsAmount := $cmnLegalEntityKycProfile.financialInformation.fixedAssets;
   End
   If $cmnLegalEntityKycProfile.financialInformation.otherAssets != null Then
      $silEstimatedNetWorth.otherAssetsAmount := $cmnLegalEntityKycProfile.financialInformation.otherAssets;
   End
   If $cmnLegalEntityKycProfile.financialInformation.debts != null Then
      $silEstimatedNetWorth.debtsAssetsAmount := $cmnLegalEntityKycProfile.financialInformation.debts;
   End
   If $cmnLegalEntityKycProfile.financialInformation.financialAssetsRate != null Then
      $silEstimatedNetWorth.financialAssetsPercentage := $cmnLegalEntityKycProfile.financialInformation.financialAssetsRate;
   End
   If $cmnLegalEntityKycProfile.financialInformation.fixedAssetsRate != null Then
      $silEstimatedNetWorth.fixedAssetsPercentage := $cmnLegalEntityKycProfile.financialInformation.fixedAssetsRate;
   End
   If $cmnLegalEntityKycProfile.financialInformation.otherAssetsRate != null Then
      $silEstimatedNetWorth.otherAssetsPercentage := $cmnLegalEntityKycProfile.financialInformation.otherAssetsRate;
   End
   If $cmnLegalEntityKycProfile.financialInformation.debts != null Then
      $silEstimatedNetWorth.debtsAssetsPercentage := $cmnLegalEntityKycProfile.financialInformation.debtsRate;
   End
   If $cmnLegalEntityKycProfile.financialInformation.estimatedAnnualRevenues != null Then
      $silEstimatedNetWorth.estimatedAnnualIncome := TOSTRING($cmnLegalEntityKycProfile.financialInformation.estimatedAnnualRevenues);
   End
   If $cmnLegalEntityKycProfile.financialInformation.estimatedAnnualNetIncome != null Then
      $silEstimatedNetWorth.netWealthAmount := $cmnLegalEntityKycProfile.financialInformation.estimatedAnnualNetIncome.toString();
   End
   If $cmnLegalEntityKycProfile.financialInformation.customerKeyFinancialData != null Then
      $silEstimatedNetWorth.customerRelevantKeyFinancialDataType := LIST($cmnLegalEntityKycProfile.financialInformation.customerKeyFinancialData, 'CMN_kycCustomerKeyFinancialData', 'sil_Id');
   End
   If $cmnLegalEntityKycProfile.financialInformation.customerKeyFinancialDataAmount != null Then
      $silEstimatedNetWorth.annualTurnoverTotalAmount := $cmnLegalEntityKycProfile.financialInformation.customerKeyFinancialDataAmount;
   End
   If $cmnLegalEntityKycProfile.financialInformation.customerKeyFinancialDataInfo != null Then
      $silEstimatedNetWorth.incomeComment := $cmnLegalEntityKycProfile.financialInformation.customerKeyFinancialDataInfo;
   End
   If $cmnLegalEntityKycProfile.financialInformation.customerKeyFinancialOther != null Then
      $silEstimatedNetWorth.customerRelevantKeyFinancialDescription := $cmnLegalEntityKycProfile.financialInformation.customerKeyFinancialOther;
   End
   
   Return $silEstimatedNetWorth;
End]]></definition>
        </method>
        <method name="createSILFindings" userId="pezzi" uuid="ffffffff-9885-8e64-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILFindings'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILFindings(CMN_Party $cmnParty) : Indexed SIL_INVOLVEDPARTYSCREENINGfinding Begin
   Indexed SIL_INVOLVEDPARTYSCREENINGfinding $silFindings := NewIndexed(SIL_INVOLVEDPARTYSCREENINGfinding);
   If $cmnParty.kycProfile.screening.isSubjectToNegativeNews Then
      If LIB_Validator.validateNotEmptyIndexed($cmnParty.kycProfile.screening.connectedPartyNegativeNews) Then
         CMN_ConnectedPartyNegativeNews $cmnConnectedPartyNegativeNews;
         SIL_INVOLVEDPARTYSCREENINGnegativeMediaFinding $silINVOLVEDPARTYSCREENINGnegativeMediaScreening;
         ForEach $cmnConnectedPartyNegativeNews In $cmnParty.kycProfile.screening.connectedPartyNegativeNews Do
            $silINVOLVEDPARTYSCREENINGnegativeMediaScreening := CAST(SIL_INVOLVEDPARTYSCREENINGnegativeMediaFinding, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGnegativeMediaFinding));
            IF(NotEmpty($cmnConnectedPartyNegativeNews.getSILID()), $silINVOLVEDPARTYSCREENINGnegativeMediaScreening.id := $cmnConnectedPartyNegativeNews.getSILID());
            //$silINVOLVEDPARTYSCREENINGnegativeMediaScreening.isSubjectToNegativeMedia := true;
            IF($cmnConnectedPartyNegativeNews.eventType != null, $silINVOLVEDPARTYSCREENINGnegativeMediaScreening.type := LIST($cmnConnectedPartyNegativeNews.eventType, 'CMN_ComplianceEventType', 'sil_Id'));
            IF($cmnConnectedPartyNegativeNews.year != null, $silINVOLVEDPARTYSCREENINGnegativeMediaScreening.year := TOSTRING($cmnConnectedPartyNegativeNews.year));
            IF(NotEmpty($cmnConnectedPartyNegativeNews.reason), $silINVOLVEDPARTYSCREENINGnegativeMediaScreening.subType := LIST($cmnConnectedPartyNegativeNews.reason, 'CMN_ComplianceReasons', 'sil_Id'));
            IF($cmnConnectedPartyNegativeNews.comment != null, $silINVOLVEDPARTYSCREENINGnegativeMediaScreening.description := $cmnConnectedPartyNegativeNews.comment);
            $silFindings.addElement($silINVOLVEDPARTYSCREENINGnegativeMediaScreening);
         End
      End
   End
   Return $silFindings;
End]]></definition>
        </method>
        <method name="createSILIdentityAndAddressDocument" userId="pezzi" uuid="00000000-7253-e190-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILIdentityAndAddressDocument'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILIdentityAndAddressDocument(CMN_IdentificationDocument $cmnIdentificationDocument) : SIL_INVOLVEDPARTYidentityAndAddressDocument Begin
   SIL_INVOLVEDPARTYidentityAndAddressDocument $silDocumentationItem := CAST(SIL_INVOLVEDPARTYidentityAndAddressDocument, CreateSkeletonDataClass(SIL_INVOLVEDPARTYidentityAndAddressDocument));
   IF($cmnIdentificationDocument.getSILID() != null, $silDocumentationItem.documentId := $cmnIdentificationDocument.getSILID());
   IF($cmnIdentificationDocument.idType != null, $silDocumentationItem.documentType := LIST($cmnIdentificationDocument.idType, 'CMN_IdentificationTypes__selector', 'sil_Id'));
   If $cmnIdentificationDocument.otherIdentificationType != null && ($cmnIdentificationDocument.idType == 'other' || $cmnIdentificationDocument.idType == 'otherLegal') Then
      $silDocumentationItem.documentationName := $cmnIdentificationDocument.otherIdentificationType;
   End
   IF($cmnIdentificationDocument.idNumber != null, $silDocumentationItem.documentNumber := $cmnIdentificationDocument.idNumber);
   IF($cmnIdentificationDocument.idIssuanceDate != null, $silDocumentationItem.issueDate := $cmnIdentificationDocument.idIssuanceDate);
   IF($cmnIdentificationDocument.idExpirationDate != null, $silDocumentationItem.expiryDate := $cmnIdentificationDocument.idExpirationDate);
   IF($cmnIdentificationDocument.idIssuancePlace != null, $silDocumentationItem.placeOfIssue := $cmnIdentificationDocument.idIssuancePlace);
   IF($cmnIdentificationDocument.idIssuanceState != null, $silDocumentationItem.stateOfIssue := $cmnIdentificationDocument.idIssuanceState);
   IF(NotEmpty($cmnIdentificationDocument.idIssuanceCountry), $silDocumentationItem.countryOfIssue := INT_SILMappingCMNtoSIL.createSILCountry($cmnIdentificationDocument.idIssuanceCountry));
   IF($cmnIdentificationDocument.idIssuedBy != null, $silDocumentationItem.issuingAuthorityName := $cmnIdentificationDocument.idIssuedBy);
   IF($cmnIdentificationDocument.isMain != null, $silDocumentationItem.isPrimary := $cmnIdentificationDocument.isMain);
   Return $silDocumentationItem;
End]]></definition>
        </method>
        <method name="createSILIndividual" userId="pezzi" uuid="00000000-5f28-ac73-0000-000000000000">
            <definition><![CDATA[/**
  Creates a SIL_INVOLVEDPARTYindividual Object taking a CMN_PhysicalPerson and a CMN_BusinessRelationship Object as input.
  @param $cmnPhysicalPerson is the CMN_PhysicalPerson Object
  @param $cmnBusinessRelationship is the CMN_BusinessRelationship Object 
  @return       The mapped SIL_INVOLVEDPARTYindividual Object
*/
StaticFunction createSILIndividual(CMN_PhysicalPerson $cmnPhysicalPerson, SIL_INVOLVEDPARTYindividual $silIndividual := null) : SIL_INVOLVEDPARTYindividual Begin
   /**************************************** CREATE TOP STRUCTURES *******************************/
   If $silIndividual == null Then
      $silIndividual := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
   End
   //$silIndividual.roles := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyRole);
   CMN_PhysicalPersonKycProfile $cmnPhysicalPersonKycProfile;
   CMN_KycSow $cmnPhysicalPersonKycSow;
   If $cmnPhysicalPerson.kycProfile != null Then
      $cmnPhysicalPersonKycProfile := CAST(CMN_PhysicalPersonKycProfile, $cmnPhysicalPerson.kycProfile);
      If $cmnPhysicalPersonKycProfile.sourceOfWealth != null Then
         $cmnPhysicalPersonKycSow := $cmnPhysicalPersonKycProfile.sourceOfWealth;
      End
      
   Else
      LIB_Logger.integrationDebug('[INT_SILMapping]: Physical person KYC missing');
   End
   Return $silIndividual;
End]]></definition>
        </method>
        <method name="createSILIndividualIDV" userId="pezzi" uuid="ffffffff-be3d-3548-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILIndividualIDV'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILIndividualIDV(CMN_PhysicalPerson $cmnPhysicalPerson, CMN_BusinessRelationship $br, SIL_INVOLVEDPARTYindividual $silIndividual) : SIL_INVOLVEDPARTYindividual Begin
   If $cmnPhysicalPerson == null || $silIndividual == null Then
      Return $silIndividual;
   End
   /**************************************** CREATE INDEXES ****************************************/
   $silIndividual.names := NewIndexed(SIL_INVOLVEDPARTYindividualName);
   $silIndividual.addresses := NewIndexed(SIL_INVOLVEDPARTYaddress);
   $silIndividual.tmpProperty1 := 'property1';
   /**************************************** MAPPING NAMES ****************************************/
   SIL_INVOLVEDPARTYindividualName $silIndividualName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
   IF($cmnPhysicalPerson.firstName != null, $silIndividualName.firstName := $cmnPhysicalPerson.firstName);
   IF($cmnPhysicalPerson.lastName != null, $silIndividualName.lastName := $cmnPhysicalPerson.lastName);
   IF($cmnPhysicalPerson.getFullName() != null, $silIndividualName.fullName := $cmnPhysicalPerson.getFullName());
   IF($cmnPhysicalPerson.formerMaidenName != null, $silIndividualName.maidenName := $cmnPhysicalPerson.formerMaidenName);
   IF($cmnPhysicalPerson.middleName != null, $silIndividualName.middleName := $cmnPhysicalPerson.middleName);
   IF($cmnPhysicalPerson.alias != null, $silIndividualName.alias := $cmnPhysicalPerson.alias);
   IF($cmnPhysicalPerson.salutation != null, $silIndividualName.title := LIST($cmnPhysicalPerson.salutation, 'CMN_Salutations__selector', 'sil_Id'));
   IF(NotEmpty($cmnPhysicalPerson.otherSalutation), $silIndividualName.otherTitle := $cmnPhysicalPerson.otherSalutation);
   $silIndividual.names.addElement($silIndividualName);
   /**************************************** MAPPING PREVIOUS NAMES ****************************************/
   SIL_INVOLVEDPARTYindividualName $silIndividualPreviousName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
   $silIndividualPreviousName.isValid := false;
   IF($cmnPhysicalPerson.previousName != null, $silIndividualPreviousName.lastName := $cmnPhysicalPerson.previousName);
   $silIndividual.names.addElement($silIndividualPreviousName);
   /********************************GENERAL VALUES**************************************************/
   IF($cmnPhysicalPerson.hasRelationshipHSBCGroup != null, $silIndividual.existingCustomerIndicator := $cmnPhysicalPerson.hasRelationshipHSBCGroup);
   IF($cmnPhysicalPerson.gender != null, $silIndividual.gender := LIST($cmnPhysicalPerson.gender, 'SIL_Genders', 'id', 'cmn_id'));
   IF($cmnPhysicalPerson.dateOfBirth != null, $silIndividual.dateOfBirth := $cmnPhysicalPerson.dateOfBirth);
   IF($cmnPhysicalPerson.townOfBirth != null, $silIndividual.placeOfBirth := $cmnPhysicalPerson.townOfBirth);
   IF(NotEmpty($cmnPhysicalPerson.countryOfBirth), $silIndividual.countryOfBirth := INT_SILMappingCMNtoSIL.createSILCountry($cmnPhysicalPerson.countryOfBirth));
   IF($cmnPhysicalPerson.isPartyAlive != null, $silIndividual.deceasedIndicator := ! $cmnPhysicalPerson.isPartyAlive);
   IF($cmnPhysicalPerson.regulatoryProfile.fatcaProfile.hasUSPassport != null, $silIndividual.holdUSPassportIndicator := $cmnPhysicalPerson.regulatoryProfile.fatcaProfile.hasUSPassport);
   IF($cmnPhysicalPerson.regulatoryProfile.fatcaProfile.hasOtherUSVisa != null, $silIndividual.holdUSVisaIndicator := $cmnPhysicalPerson.regulatoryProfile.fatcaProfile.hasOtherUSVisa);
   IF($cmnPhysicalPerson.regulatoryProfile.fatcaProfile.otherUSImmigrationNumber != null, $silIndividual.holdUSVisaDescription := $cmnPhysicalPerson.regulatoryProfile.fatcaProfile.otherUSImmigrationNumber);
   IF($cmnPhysicalPerson.regulatoryProfile.fatcaProfile.hasGreenCard != null, $silIndividual.holdUSGreenCardIndicator := $cmnPhysicalPerson.regulatoryProfile.fatcaProfile.hasGreenCard);
   IF($br.kytProfile.generalInformation.isPotentialVulnerableClient != null, $silIndividual.potentiallyVulnerableCustomerIndicator := $br.kytProfile.generalInformation.isPotentialVulnerableClient);
   //Must be changed to nationalities
   If NotEmpty($cmnPhysicalPerson.nationalities.mainNationality) Then
      SIL_STATICcountry $nationality := INT_SILMappingCMNtoSIL.createSILCountry($cmnPhysicalPerson.nationalities.mainNationality);
      $nationality.type := 'MAIN';
      $silIndividual.nationalities.addElement($nationality);
   End
   If NotEmpty($cmnPhysicalPerson.nationalities.secondNationality) Then
      SIL_STATICcountry $nationality := INT_SILMappingCMNtoSIL.createSILCountry($cmnPhysicalPerson.nationalities.secondNationality);
      $nationality.type := 'SECOND';
      $silIndividual.nationalities.addElement($nationality);
   End
   If NotEmpty($cmnPhysicalPerson.nationalities.thirdNationality) Then
      SIL_STATICcountry $nationality := INT_SILMappingCMNtoSIL.createSILCountry($cmnPhysicalPerson.nationalities.thirdNationality);
      $nationality.type := 'THIRD';
      $silIndividual.nationalities.addElement($nationality);
   End
   $silIndividual.documentationItems := NewIndexed(SIL_INVOLVEDPARTYdocumentationItem);
   /************************************** Documentation Items **********************/
   If LIB_Validator.validateNotEmptyIndexed($cmnPhysicalPerson.identifications) Then
      CMN_IdentificationDocument $cmnIdentificationDocument;
      SIL_INVOLVEDPARTYidentityAndAddressDocument $silDocumentationItem;
      ForEach $cmnIdentificationDocument In $cmnPhysicalPerson.identifications Do
         $silDocumentationItem := INT_SILMappingCMNtoSIL.createSILIdentityAndAddressDocument($cmnIdentificationDocument);
         IF($silDocumentationItem != null, $silIndividual.documentationItems.addElement($silDocumentationItem));
      End
   End
   /********** SFC ***************/
   If ERROR($cmnPhysicalPerson.regulatoryProfile.sfcCodeOfConduct.isConsentLetterRequired != null, false) Then
      SIL_INVOLVEDPARTYregistrationDocumentation $silRegistrationDocumentation := CAST(SIL_INVOLVEDPARTYregistrationDocumentation, CreateSkeletonDataClass(SIL_INVOLVEDPARTYregistrationDocumentation));
      $silRegistrationDocumentation.consentLetterRequiredIndicator := $cmnPhysicalPerson.regulatoryProfile.sfcCodeOfConduct.isConsentLetterRequired;
      IF($silRegistrationDocumentation != null, $silIndividual.documentationItems.addElement($silRegistrationDocumentation));
   End
   /************************************** Residential ADDRESSES **********************/
   If LIB_Validator.validateNotEmptyIndexed($cmnPhysicalPerson.contact.genericAddresses) Then
      CMN_MailAddress $mailAddress;
      SIL_INVOLVEDPARTYpostalAddress $silPostalAddress;
      ForEach $mailAddress In $cmnPhysicalPerson.contact.genericAddresses Do
         If $mailAddress != null Then
            $silPostalAddress := INT_SILMappingCMNtoSIL.createSILPostalAddress($mailAddress);
            $silPostalAddress.type := LIST('generic', 'CMN_AddressTypes__selector', 'code');
            $silIndividual.addresses.addElement($silPostalAddress);
         End
      End
   End
   /************************************** Previous ADDRESSES **********************/
   If LIB_Validator.validateNotEmptyIndexed($cmnPhysicalPerson.contact.previousAddresses) Then
      $silIndividual.individualResidencies := NewIndexed(SIL_INVOLVEDPARTYindividualResidency);
      CMN_MailAddress $previousAddress;
      SIL_INVOLVEDPARTYpostalAddress $silPostalAddress;
      ForEach $previousAddress In $cmnPhysicalPerson.contact.previousAddresses Do
         If $previousAddress != null Then
            $silPostalAddress := INT_SILMappingCMNtoSIL.createSILPostalAddress($previousAddress);
            $silPostalAddress.type := LIST('previous', 'CMN_AddressTypes__selector', 'code');
            $silIndividual.addresses.addElement($silPostalAddress);
         End
      End
   End
   /***************** Mailing ADDRESSES *********************/
   If LIB_Validator.validateNotEmptyIndexed($cmnPhysicalPerson.contact.mailingAddresses) Then
      CMN_MailAddress $cmnMailAddress;
      SIL_INVOLVEDPARTYpostalAddress $silPostalAddress;
      ForEach $cmnMailAddress In $cmnPhysicalPerson.contact.mailingAddresses Do
         If $cmnMailAddress != null Then
            $silPostalAddress := INT_SILMappingCMNtoSIL.createSILPostalAddress($cmnMailAddress);
            $silPostalAddress.type := LIST('mailing', 'CMN_AddressTypes__selector', 'code');
            $silIndividual.addresses.addElement($silPostalAddress);
         End
      End
   End
   /************************************** Telephon ADDRESSES **********************/
   If LIB_Validator.validateNotEmptyIndexed($cmnPhysicalPerson.contact.genericAddresses) Then
      CMN_Phone $cmnPhone;
      ForEach $cmnPhone In $cmnPhysicalPerson.contact.phone Do
         If $cmnPhone != null Then
            SIL_INVOLVEDPARTYtelephoneNumber $telephoneNumber := INT_SILMappingCMNtoSIL.createSILPhoneAddress($cmnPhone);
            $silIndividual.addresses.addElement($telephoneNumber);
         End
      End
   End
   /************************************** Email ADDRESSES **********************/
   If LIB_Validator.validateNotEmptyIndexed($cmnPhysicalPerson.contact.email) Then
      CMN_Email $mailAddress;
      ForEach $mailAddress In $cmnPhysicalPerson.contact.email Do
         If $mailAddress != null Then
            SIL_INVOLVEDPARTYemailAddress $emailAddress := INT_SILMappingCMNtoSIL.createSILEmailAddress($mailAddress);
            $silIndividual.addresses.addElement($emailAddress);
         End
      End
   End
   INT_SILMappingCMNtoSILVariationFactory__selector().createSILIndividualIDV($cmnPhysicalPerson, $silIndividual);
   Return $silIndividual;
End]]></definition>
        </method>
        <method name="createSILIndividualResidency" userId="bellanca" uuid="00000000-38e3-1fe7-0000-000000000000">
            <definition><![CDATA[/**
	Builds an indidividual residency based on the parameters given, if no value is given 0 is assumed
    @params country is a string representing the country
   	@params nbThisYear is an integer value represening the the nb of days spend at that location this year
   	@params nbPastYear is an integer value represening the the nb of days spend at that location last year
   	@params nbYearBefore is an integer value represening the the nb of days spend at that location the year before that
*/
StaticFunction createSILIndividualResidency(CMN_MailAddress $mailAddress) : SIL_INVOLVEDPARTYindividualResidency Begin
   SIL_INVOLVEDPARTYindividualResidency $indRes := CAST(SIL_INVOLVEDPARTYindividualResidency, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualResidency));
   IF(NotEmpty($mailAddress.getSILID()), $indRes.id := $mailAddress.getSILID());
   IF(NotEmpty($mailAddress.country), $indRes.countryOfIssue := INT_SILMappingCMNtoSIL.createSILCountry($mailAddress.country));
   If $mailAddress.validTo != null && $mailAddress.validFrom != null Then
      Date $today := TODAY();
      Integer $currentYear := LIB_DateHelper.getYear(TODAY());
      Double $yearsDiffToToday := LIB_DateHelper.getYear($today) - LIB_DateHelper.getYear($mailAddress.validTo);
      Double $yearsDiffFromToday := LIB_DateHelper.getYear($today) - LIB_DateHelper.getYear($mailAddress.validFrom);
      Double $yearsOfAddress := LIB_DateHelper.getYear($mailAddress.validTo) - LIB_DateHelper.getYear($mailAddress.validFrom);
      $indRes.nbDaysSpentThisYear := 0;
      $indRes.nbDaysSpentThiLastYear := 0;
      $indRes.nbDaysSpentTheYearBefore := 0;
      If $yearsOfAddress >= 0.0 Then
         If $yearsDiffToToday < 0.0 Then
            $indRes.nbDaysSpentThisYear := TOINTEGER(TIMEDIFF(LIB_DateHelper.firstDayOfYear($currentYear), $today, 'd'));
            If $yearsDiffFromToday < 0.0 Then
               $indRes.nbDaysSpentThisYear := 0;
            ElseIf $yearsDiffFromToday == 0.0 Then
               Double $diff := TOINTEGER(TIMEDIFF($mailAddress.validFrom, $today, 'd'));
               If $diff > 0.0 Then
                  $indRes.nbDaysSpentThisYear := TOINTEGER(TIMEDIFF($mailAddress.validFrom, $today, 'd'));
               Else
                  $indRes.nbDaysSpentThisYear := 0;
               End
            ElseIf TOINTEGER($yearsDiffFromToday) == 1 Then
               $indRes.nbDaysSpentThiLastYear := TOINTEGER(TIMEDIFF($mailAddress.validFrom, LIB_DateHelper.lastDayOfYear($currentYear - 1), 'd'));
            ElseIf TOINTEGER($yearsDiffFromToday) == 2 Then
               $indRes.nbDaysSpentThiLastYear := TOINTEGER(TIMEDIFF(LIB_DateHelper.firstDayOfYear($currentYear - 1), LIB_DateHelper.lastDayOfYear($currentYear - 1), 'd'));
               $indRes.nbDaysSpentTheYearBefore := TOINTEGER(TIMEDIFF($mailAddress.validFrom, LIB_DateHelper.lastDayOfYear($currentYear - 2), 'd'));
            ElseIf TOINTEGER($yearsDiffFromToday) >= 2 Then
               $indRes.nbDaysSpentThiLastYear := TOINTEGER(TIMEDIFF(LIB_DateHelper.firstDayOfYear($currentYear - 1), LIB_DateHelper.lastDayOfYear($currentYear - 1), 'd'));
               $indRes.nbDaysSpentTheYearBefore := TOINTEGER(TIMEDIFF(LIB_DateHelper.firstDayOfYear($currentYear - 2), LIB_DateHelper.lastDayOfYear($currentYear - 2), 'd'));
            End
         ElseIf $yearsDiffToToday == 0.0 Then
            Date $lastDate;
            If TIMEDIFF($mailAddress.validTo, $today, 'd') > 0.0 Then
               $lastDate := $mailAddress.validTo;
            Else
               $lastDate := $today;
            End
            If TOINTEGER($yearsDiffFromToday) == 0 Then
               $indRes.nbDaysSpentThisYear := TOINTEGER(TIMEDIFF($mailAddress.validFrom, $mailAddress.validTo, 'd'));
            ElseIf TOINTEGER($yearsDiffFromToday) == 1 Then
               $indRes.nbDaysSpentThisYear := TOINTEGER(TIMEDIFF(LIB_DateHelper.firstDayOfYear($currentYear), $today, 'd'));
               $indRes.nbDaysSpentThiLastYear := TOINTEGER(TIMEDIFF($mailAddress.validFrom, LIB_DateHelper.lastDayOfYear($currentYear - 1), 'd'));
            ElseIf TOINTEGER($yearsDiffFromToday) == 2 Then
               $indRes.nbDaysSpentThisYear := TOINTEGER(TIMEDIFF(LIB_DateHelper.firstDayOfYear($currentYear), $today, 'd'));
               $indRes.nbDaysSpentThiLastYear := TOINTEGER(TIMEDIFF(LIB_DateHelper.firstDayOfYear($currentYear - 1), LIB_DateHelper.lastDayOfYear($currentYear - 1), 'd'));
               $indRes.nbDaysSpentTheYearBefore := TOINTEGER(TIMEDIFF($mailAddress.validFrom, LIB_DateHelper.lastDayOfYear($currentYear - 2), 'd'));
            Else
               $indRes.nbDaysSpentThisYear := TOINTEGER(TIMEDIFF(LIB_DateHelper.firstDayOfYear($currentYear), $lastDate, 'd'));
               $indRes.nbDaysSpentThiLastYear := TOINTEGER(TIMEDIFF(LIB_DateHelper.firstDayOfYear($currentYear - 1), LIB_DateHelper.lastDayOfYear($currentYear - 1), 'd'));
               $indRes.nbDaysSpentTheYearBefore := TOINTEGER(TIMEDIFF(LIB_DateHelper.firstDayOfYear($currentYear - 2), LIB_DateHelper.lastDayOfYear($currentYear - 2), 'd'));
            End
         ElseIf TOINTEGER($yearsDiffToToday) == 1 Then
            If TOINTEGER($yearsDiffFromToday) == 1 Then
               $indRes.nbDaysSpentThiLastYear := TOINTEGER(TIMEDIFF($mailAddress.validFrom, $mailAddress.validTo, 'd'));
            ElseIf TOINTEGER($yearsDiffFromToday) == 2 Then
               $indRes.nbDaysSpentThiLastYear := TOINTEGER(TIMEDIFF(LIB_DateHelper.firstDayOfYear($currentYear - 1), $mailAddress.validTo, 'd'));
               $indRes.nbDaysSpentTheYearBefore := TOINTEGER(TIMEDIFF($mailAddress.validFrom, LIB_DateHelper.lastDayOfYear($currentYear - 2), 'd'));
            ElseIf TOINTEGER($yearsDiffFromToday) > 2 Then
               $indRes.nbDaysSpentThiLastYear := TOINTEGER(TIMEDIFF(LIB_DateHelper.firstDayOfYear($currentYear - 1), $mailAddress.validTo, 'd'));
               $indRes.nbDaysSpentTheYearBefore := TOINTEGER(TIMEDIFF(LIB_DateHelper.firstDayOfYear($currentYear - 2), LIB_DateHelper.lastDayOfYear($currentYear - 2), 'd'));
            End
         ElseIf TOINTEGER($yearsDiffToToday) == 2 Then
            If TOINTEGER($yearsDiffFromToday) == 2 Then
               $indRes.nbDaysSpentTheYearBefore := TOINTEGER(TIMEDIFF($mailAddress.validFrom, $mailAddress.validTo, 'd'));
            Else
               $indRes.nbDaysSpentTheYearBefore := TOINTEGER(TIMEDIFF($mailAddress.validTo, LIB_DateHelper.lastDayOfYear($currentYear - 2), 'd'));
            End
         Else
            LIB_Logger.integrationError('[createSILIndividualResidency] Previous Residency dates are not valid');
         End
      End
   End
   Return $indRes;
End]]></definition>
        </method>
        <method name="createSILInvolvedPartyIDV" userId="pezzi" uuid="00000000-48c4-00b6-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILInvolvedPartyIDV'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILInvolvedPartyIDV(CMN_Party $cmnParty, CMN_BusinessRelationship $br, SIL_INVOLVEDPARTYinvolvedParty $silInvolvedParty) : SIL_INVOLVEDPARTYinvolvedParty Begin
   If ISA($cmnParty, CMN_PhysicalPerson) and ISA($silInvolvedParty, SIL_INVOLVEDPARTYindividual) Then
      $silInvolvedParty := INT_SILMappingCMNtoSIL.createSILIndividualIDV(CAST(CMN_PhysicalPerson, $cmnParty), $br, CAST(SIL_INVOLVEDPARTYindividual, $silInvolvedParty));
   ElseIf ISA($cmnParty, CMN_LegalEntity) and ISA($silInvolvedParty, SIL_INVOLVEDPARTYorganization) Then
      $silInvolvedParty := INT_SILMappingCMNtoSIL.createSILOrganizationIDV(CAST(CMN_LegalEntity, $cmnParty), $br, CAST(SIL_INVOLVEDPARTYorganization, $silInvolvedParty));
   Else
      LIB_Logger.integrationError('UNKNOWN Party TYPE CONVERT: ' & TOSTRING($cmnParty));
   End
   Return $silInvolvedParty;
End]]></definition>
        </method>
        <method name="createSILMailingInstructions" userId="pezzi" uuid="ffffffff-93f4-2f76-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILMailingInstructions'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILMailingInstructions(CMN_BusinessRelationship $cmnBusinessRelationship) : Indexed SIL_ACCOUNTmailInstruction Begin
   /******** Mailing Instructions ************/
   Indexed SIL_ACCOUNTmailInstruction $silACCOUNTmailInstructions := NewIndexed(SIL_ACCOUNTmailInstruction);
   ForEach Record $cmnMailingInstructionType In RECORDS('CMN_MailingInstructionsTypes__selector') Do
      CMN_MailingInstruction $cmnMailingInstruction := $cmnBusinessRelationship.mailingInstructions[TOSTRING($cmnMailingInstructionType.getValue('id'))];
      If $cmnMailingInstruction == null Then
         Continue;
      End
      SIL_ACCOUNTmailInstruction $silACCOUNTmailInstruction := CAST(SIL_ACCOUNTmailInstruction, CreateSkeletonDataClass(SIL_ACCOUNTmailInstruction));
      $silACCOUNTmailInstruction.type := 'Original Mail';
      IF(NotEmpty($cmnMailingInstruction.language), $silACCOUNTmailInstruction.languageId := LIST($cmnMailingInstruction.language, 'CMN_MailingInstructionLanguage__selector', 'sil_id'));
      IF(NotEmpty($cmnMailingInstruction.frequency), $silACCOUNTmailInstruction.accountFrequency := LIST($cmnMailingInstruction.frequency, 'CMN_MailingInstructionFrequency__selector', 'sil_id'));
      IF(NotEmpty($cmnMailingInstruction.assetsFrequency), $silACCOUNTmailInstruction.assetFrequency := LIST($cmnMailingInstruction.assetsFrequency, 'CMN_MailingInstructionFrequency__selector', 'sil_id'));
      //IF($cmnMailingInstruction.mailHeader != null, $silACCOUNTmailInstruction.mailingHeader := $cmnMailingInstruction.mailHeader);
      If NotEmpty($cmnMailingInstruction.mode) Then
         $silACCOUNTmailInstruction.dispatchCode := LIST($cmnMailingInstruction.mode, 'CMN_MailingInstructionModes__selector', 'sil_id');
         SIL_INVOLVEDPARTYpostalAddress $silAddress := INT_SILMappingCMNtoSIL.createSILPostalAddress($cmnMailingInstruction.originalRecipient);
         If $silAddress != null Then
            $silACCOUNTmailInstruction.address := $silAddress;
            IF($cmnMailingInstruction.originalRecipient.mailHeader != null, $silACCOUNTmailInstruction.mailingHeader := $cmnMailingInstruction.originalRecipient.mailHeader);
         End
         If NotEmpty($cmnMailingInstruction.emailForEStatementNotification) Then
            SIL_INVOLVEDPARTYemailAddress $email := CAST(SIL_INVOLVEDPARTYemailAddress, CreateSkeletonDataClass(SIL_INVOLVEDPARTYemailAddress));
            $email.email := $cmnMailingInstruction.emailForEStatementNotification;
            $silACCOUNTmailInstruction.address := $email;
         End
      End
      $silACCOUNTmailInstructions.addElement($silACCOUNTmailInstruction);
      If $cmnMailingInstruction.hasCopyMail and LIB_Validator.validateNotEmptyIndexed($cmnMailingInstruction.copyRecipients) Then
         ForEach CMN_MailingParty $cmnMailingParty In $cmnMailingInstruction.copyRecipients Do
            SIL_ACCOUNTmailInstruction $copySilACCOUNTmailInstruction := CLONE($silACCOUNTmailInstruction);
            //$copySilACCOUNTmailInstruction.dispatchCode := LIST('mailAndInternet', 'CMN_MailingInstructionModes__selector', 'sil_id');
            $copySilACCOUNTmailInstruction.type := 'Copy Mail';
            $copySilACCOUNTmailInstruction.address := INT_SILMappingCMNtoSIL.createSILPostalAddress($cmnMailingParty);
            IF($cmnMailingParty.mailHeader != null, $silACCOUNTmailInstruction.mailingHeader := $cmnMailingParty.mailHeader);
            $silACCOUNTmailInstructions.addElement($copySilACCOUNTmailInstruction);
         End
      End
   End
   Return $silACCOUNTmailInstructions;
End]]></definition>
        </method>
        <method name="createSILOrganization" userId="pezzi" uuid="ffffffff-d994-e88d-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILOrganization'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILOrganization(CMN_LegalEntity $cmnLegalEntity, SIL_INVOLVEDPARTYorganization $silOrganization := null) : SIL_INVOLVEDPARTYorganization Begin
   If $silOrganization == null Then
      If $cmnLegalEntity.type.isTrustOrFoundation() Then
         $silOrganization := CAST(SIL_INVOLVEDPARTYtrust, CreateSkeletonDataClass(SIL_INVOLVEDPARTYtrust));
      Else
         $silOrganization := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
      End
   End
   /******************************** RETURN RESULT ********************************************/
   Return $silOrganization;
End]]></definition>
        </method>
        <method name="createSILOrganizationIDV" userId="pezzi" uuid="00000000-37a3-4aee-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILOrganizationIDV'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILOrganizationIDV(CMN_LegalEntity $cmnLegalEntity, CMN_BusinessRelationship $br, SIL_INVOLVEDPARTYorganization $silOrganization) : SIL_INVOLVEDPARTYorganization Begin
   If $cmnLegalEntity == null || $silOrganization == null Then
      Return $silOrganization;
   End
   /**************************************** CREATE INDEXES ****************************************/
   $silOrganization.names := NewIndexed(SIL_INVOLVEDPARTYindividualName);
   $silOrganization.addresses := NewIndexed(SIL_INVOLVEDPARTYaddress);
   $silOrganization.roles := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyRole);
   $silOrganization.businessNatureDetails := NewIndexed(SIL_INVOLVEDPARTYbusinessNatureDetails);
   $silOrganization.documentationItems := NewIndexed(SIL_INVOLVEDPARTYdocumentationItem);
   SIL_INVOLVEDPARTYincorporation $incorporation := CAST(SIL_INVOLVEDPARTYincorporation, CreateSkeletonDataClass(SIL_INVOLVEDPARTYincorporation));
   $silOrganization.documentationItems.addElement($incorporation);
   /******************************** Identification ****************************************************/
   //Organization <-> business nature details
   /******************************** GENERAL FIELDS *******************************************/
   IF($cmnLegalEntity.hasRelationshipHSBCGroup != null, $silOrganization.existingCustomerIndicator := $cmnLegalEntity.hasRelationshipHSBCGroup);
   //IF($cmnLegalEntity.registrationNumber != null, $silOrganization.companyNumber := $cmnLegalEntity.registrationNumber);
   If $cmnLegalEntity.type.isCommercialOperatingBusiness() Then
      $silOrganization.businessTypes.addElement('1');
      $silOrganization.entityType := 'COMMERCIAL_BUSINESS';
   ElseIf $cmnLegalEntity.type.isPrivateInvestmentCompany() Then
      $silOrganization.businessTypes.addElement('2');
      $silOrganization.entityType := 'PRIVATE_INVESTMENT_COMPANY';
   ElseIf ISA($silOrganization, SIL_INVOLVEDPARTYtrust) && $cmnLegalEntity.type.isTrustOrFoundation() Then
      $silOrganization.entityType := 'PRIVATE_HOLDING_TRUST';
      CMN_LegalEntityTrustFoundation $cmnTrust := CAST(CMN_LegalEntityTrustFoundation, $cmnLegalEntity);
      IF($cmnTrust.revocability != null, CAST(SIL_INVOLVEDPARTYtrust, $silOrganization).revocableIndicator := TOBOOLEAN(LIST($cmnTrust.revocability, 'CMN_TrustFoundationRevocability', 'sil_Id')));
      IF($cmnTrust.irrevocabilityType != null, CAST(SIL_INVOLVEDPARTYtrust, $silOrganization).irrevocableType := LIST($cmnTrust.irrevocabilityType, 'CMN_TrustFoundationIrrevocabilityType', 'sil_Id'));
      IF($cmnTrust.futureDateTrustDissolution != null, CAST(SIL_INVOLVEDPARTYtrust, $silOrganization).dissolutionDate := $cmnTrust.futureDateTrustDissolution);
      IF($cmnTrust.classOfBeneficiary != null, CAST(SIL_INVOLVEDPARTYtrust, $silOrganization).classOfBeneficiaries := $cmnTrust.classOfBeneficiary);
      If $cmnTrust.applicableLawCountry != null Then
         SIL_INVOLVEDPARTYcountryAddress $silCountryAddress := INT_SILMappingCMNtoSIL.createSILCountryAddress($cmnTrust.applicableLawCountry, INT_SILEnumerations.getCountryTypeJuridiction());
         $silOrganization.addresses.addElement($silCountryAddress);
      End
   End
   IF($cmnLegalEntity.dateOfBoardOfDirectors != null, $silOrganization.boardOfDirectorsDate := $cmnLegalEntity.dateOfBoardOfDirectors);
   IF($cmnLegalEntity.structureDetails.financialInstitution.isPartyListedStockExchange != null, $silOrganization.listedStockExchangeIndicator := $cmnLegalEntity.structureDetails.financialInstitution.isPartyListedStockExchange);
   IF($cmnLegalEntity.structureDetails.financialInstitution.nameStockExchange != null, $silOrganization.stockExchangeCode := $cmnLegalEntity.structureDetails.financialInstitution.nameStockExchange);
   IF($cmnLegalEntity.structureDetails.financialInstitution.hasApprovedEquityExchange != null, $silOrganization.hasApprovedEquityListedOnHSBCIndicator := $cmnLegalEntity.structureDetails.financialInstitution.hasApprovedEquityExchange);
   IF($cmnLegalEntity.kycProfile.screening.hasComplexUnusualStructure != null, $silOrganization.isComplexStructure := $cmnLegalEntity.kycProfile.screening.hasComplexUnusualStructure);
   INT_SILMatchingTools.matchCMNMainBusinessToSILOrganization($cmnLegalEntity.getKYCProfile().sourceOfWealth.mainBusiness, $silOrganization);
   //IF($cmnLegalEntity.irrevocabilityType != null, $silOrganization.:=$cmnLegalEntity.irrevocabilityType);
   //IF($cmnLegalEntity.applicableLawCountry != null, $silOrganization.:=$cmnLegalEntity.applicableLawCountry);
   //IF($cmnLegalEntity.registrationNumber != null, $silOrganization. := $cmnLegalEntity.registrationNumber);
   IF(NotEmpty($cmnLegalEntity.incorporationIssuingAuthority), $silOrganization.issuingAuthorityRegistrationName := $cmnLegalEntity.incorporationIssuingAuthority);
   //IF($cmnLegalEntity.futureDateTrustDissolution != null, $silOrganization. := $cmnLegalEntity.futureDateTrustDissolution);
   //IF($cmnLegalEntity.hsbcEntities != null, $silOrganization. := $cmnLegalEntity.hsbcEntities);
   //IF($cmnLegalEntity.dateOfBoardOfDirectors != null, $silOrganization. := $cmnLegalEntity.dateOfBoardOfDirectors);
   IF($br.clientSubtype != null, $silOrganization.subType := LIST($br.clientSubtype, 'CMN_ClientSubtype', 'sil_Id'));
   /******************************* Incorporation************************/
   IF($cmnLegalEntity.dateOfRegistration != null, $incorporation.incorporateDate := $cmnLegalEntity.dateOfRegistration);
   IF($cmnLegalEntity.registrationNumber != null, $incorporation.documentNumber := $cmnLegalEntity.registrationNumber);
   IF($cmnLegalEntity.incorporationIssuingAuthority != null, $incorporation.issuingAuthorityName := $cmnLegalEntity.incorporationIssuingAuthority);
   /*************** NAMES *********************/
   If $cmnLegalEntity.type.isTrustOrFoundation() Then
      SIL_INVOLVEDPARTYtrustName $silTrustName := CAST(SIL_INVOLVEDPARTYtrustName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYtrustName));
      IF($cmnLegalEntity.companyName != null, $silTrustName.name := $cmnLegalEntity.companyName);
      IF($cmnLegalEntity.getFullName() != null, $silTrustName.fullName := $cmnLegalEntity.getFullName());
      $silOrganization.names.addElement($silTrustName);
   Else
      SIL_INVOLVEDPARTYorganizationName $silOrganizationName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
      IF($cmnLegalEntity.companyName != null, $silOrganizationName.businessName := $cmnLegalEntity.companyName);
      IF($cmnLegalEntity.getFullName() != null, $silOrganizationName.fullName := $cmnLegalEntity.getFullName());
      IF($cmnLegalEntity.tradingName != null, $silOrganizationName.tradingName := $cmnLegalEntity.tradingName);
      $silOrganization.names.addElement($silOrganizationName);
   End
   /*************** Registrated ADDRESSES **********************/
   If LIB_Validator.validateNotEmptyIndexed($cmnLegalEntity.contact.genericAddresses) Then
      CMN_MailAddress $cmnMailAddress;
      SIL_INVOLVEDPARTYpostalAddress $silPostalAddress;
      ForEach $cmnMailAddress In $cmnLegalEntity.contact.genericAddresses Do
         If $cmnMailAddress != null Then
            $silPostalAddress := INT_SILMappingCMNtoSIL.createSILPostalAddress($cmnMailAddress);
            $silPostalAddress.type := LIST('generic', 'CMN_AddressTypes__selector', 'code');
            $silOrganization.addresses.addElement($silPostalAddress);
            If NotEmpty($cmnMailAddress.city) && EMPTY($incorporation.incorporatePlace) Then
               $incorporation.incorporatePlace := $cmnMailAddress.city;
            End
            If NotEmpty($cmnMailAddress.country) && OR($incorporation.incorporateCountry == null, EMPTY($incorporation.incorporateCountry.code)) Then
               $incorporation.incorporateCountry := INT_SILMappingCMNtoSIL.createSILCountry($cmnMailAddress.country);
               SIL_INVOLVEDPARTYcountryAddress $silCountryAddress := INT_SILMappingCMNtoSIL.createSILCountryAddress($cmnMailAddress.country, INT_SILEnumerations.getCountryTypeIncorporation());
               $silOrganization.addresses.addElement($silCountryAddress);
            End
         End
      End
   End
   /****************** BUSINESS ADDRESSES **********************/
   If LIB_Validator.validateNotEmptyIndexed($cmnLegalEntity.contact.businessAddress) Then
      CMN_MailAddress $cmnMailAddress;
      SIL_INVOLVEDPARTYpostalAddress $silPostalAddress;
      ForEach $cmnMailAddress In $cmnLegalEntity.contact.businessAddress Do
         If $cmnMailAddress != null Then
            $silPostalAddress := INT_SILMappingCMNtoSIL.createSILPostalAddress($cmnMailAddress);
            If $cmnLegalEntity.type.isTrustOrFoundation() Then
               $silPostalAddress.type := LIST('administrative', 'CMN_AddressTypes__selector', 'code');
            Else
               $silPostalAddress.type := LIST('business', 'CMN_AddressTypes__selector', 'code');
            End
            $silOrganization.addresses.addElement($silPostalAddress);
         End
      End
   End
   /***************** Mailing ADDRESSES *********************/
   If LIB_Validator.validateNotEmptyIndexed($cmnLegalEntity.contact.mailingAddresses) Then
      CMN_MailAddress $cmnMailAddress;
      SIL_INVOLVEDPARTYpostalAddress $silPostalAddress;
      ForEach $cmnMailAddress In $cmnLegalEntity.contact.mailingAddresses Do
         If $cmnMailAddress != null Then
            $silPostalAddress := INT_SILMappingCMNtoSIL.createSILPostalAddress($cmnMailAddress);
            $silPostalAddress.type := LIST('mailing', 'CMN_AddressTypes__selector', 'code');
            $silOrganization.addresses.addElement($silPostalAddress);
         End
      End
   End
   /************************************** Telephon ADDRESSES **********************/
   If LIB_Validator.validateNotEmptyIndexed($cmnLegalEntity.contact.genericAddresses) Then
      CMN_Phone $cmnPhone;
      ForEach $cmnPhone In $cmnLegalEntity.contact.phone Do
         If $cmnPhone != null Then
            SIL_INVOLVEDPARTYtelephoneNumber $telephoneNumber := INT_SILMappingCMNtoSIL.createSILPhoneAddress($cmnPhone);
            $silOrganization.addresses.addElement($telephoneNumber);
         End
      End
   End
   /***************** Website ADDRESSES *********************/
   If NotEmpty($cmnLegalEntity.internetWebsiteURL) Then
      SIL_INVOLVEDPARTYwebsiteAddress $silWebSiteAddress := CAST(SIL_INVOLVEDPARTYwebsiteAddress, CreateSkeletonDataClass(SIL_INVOLVEDPARTYwebsiteAddress));
      $silWebSiteAddress.link := $cmnLegalEntity.internetWebsiteURL;
      $silOrganization.addresses.addElement($silWebSiteAddress);
   End
   INT_SILMappingCMNtoSILVariationFactory__selector().createSILOrganizationIDV($cmnLegalEntity, $silOrganization);
   Return $silOrganization;
End]]></definition>
        </method>
        <method name="createSILOverallNetWorth" userId="pezzi" uuid="ffffffff-d8a1-eec4-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILOverallNetWorth'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILOverallNetWorth(CMN_Party $cmnParty) : SIL_KYCestimatedNetWorth Begin
   If $cmnParty == null Then
      Return null;
   End
   CMN_OverallNetWorthAndIncome $cmnOverallNetWorthAndIncome := $cmnParty.kycProfile.overallNetWorthAndIncome;
   If $cmnOverallNetWorthAndIncome == null Then
      Return null;
   End
   SIL_KYCestimatedNetWorth $silKYCestimatedNetWorth := CAST(SIL_KYCestimatedNetWorth, CreateSkeletonDataClass(SIL_KYCestimatedNetWorth));
   IF(NotEmpty($cmnOverallNetWorthAndIncome.getSILID()), $silKYCestimatedNetWorth.id := $cmnOverallNetWorthAndIncome.getSILID());
   IF($cmnOverallNetWorthAndIncome.estimatedOverallNetWorth != null, $silKYCestimatedNetWorth.netWealthAmount := TOSTRING($cmnOverallNetWorthAndIncome.estimatedOverallNetWorth * 1000));
   $silKYCestimatedNetWorth.netWealthAmountCurrency := CAST(SIL_STATICcurrency, CreateSkeletonDataClass(SIL_STATICcurrency));
   //Defect 4454
   $silKYCestimatedNetWorth.netWealthAmountCurrency.code := 'USD';
   /* If NotEmpty($cmnOverallNetWorthAndIncome.currency) Then
      $silKYCestimatedNetWorth.netWealthAmountCurrency := CAST(SIL_STATICcurrency, CreateSkeletonDataClass(SIL_STATICcurrency));
      //$silKYCestimatedNetWorth.netWealthAmountCurrency.code := $cmnOverallNetWorthAndIncome.currency;
      //Defect 4454
      $silKYCestimatedNetWorth.netWorthEstimatedAmountCurrency.code := 'USD';
   End*/
   $silKYCestimatedNetWorth.estimatedNetWorthDetails := NewIndexed(SIL_KYCestimatedNetWorthDetails);
   If LIB_Validator.validateNotEmptyIndexed($cmnOverallNetWorthAndIncome.netWorthItems) Then
      For Integer $i := 1 Condition $i <= $cmnOverallNetWorthAndIncome.netWorthItems.size() Step $i := $i + 1 Do
         If $cmnOverallNetWorthAndIncome.netWorthItems[$i] != null Then
            SIL_KYCestimatedNetWorthDetails $silKYCestimatedNetWorthDetails := CAST(SIL_KYCestimatedNetWorthDetails, CreateSkeletonDataClass(SIL_KYCestimatedNetWorthDetails));
            IF($cmnOverallNetWorthAndIncome.netWorthItems[$i].amount != null, $silKYCestimatedNetWorthDetails.amount := $cmnOverallNetWorthAndIncome.netWorthItems[$i].amount);
            String $silType := LIST($cmnOverallNetWorthAndIncome.netWorthItems[$i].name, 'CMN_NetWorthSource', 'sil_Id', 'description');
            If NotEmpty($silType) Then
               $silKYCestimatedNetWorthDetails.type := $silType;
            Else
               $silKYCestimatedNetWorthDetails.type := 'Other';
               IF($cmnOverallNetWorthAndIncome.netWorthItems[$i].name != null, $silKYCestimatedNetWorthDetails.name := $cmnOverallNetWorthAndIncome.netWorthItems[$i].name);
            End
            $silKYCestimatedNetWorth.estimatedNetWorthDetails.addElement($silKYCestimatedNetWorthDetails);
         End
      End
      //************************************** Estimated Annual income  **********************
      If LIB_Validator.validateNotEmptyIndexed($cmnOverallNetWorthAndIncome.estimatedAnnualIncomes) Then
         CMN_EstimatedAnnualIncome $cmnEstimatedAnnualIncome;
         ForEach $cmnEstimatedAnnualIncome In $cmnOverallNetWorthAndIncome.estimatedAnnualIncomes Do
            SIL_KYCestimatedNetWorthDetails $silKYCestimatedNetWorthDetails := CAST(SIL_KYCestimatedNetWorthDetails, CreateSkeletonDataClass(SIL_KYCestimatedNetWorthDetails));
            IF(NotEmpty($cmnEstimatedAnnualIncome.type), $silKYCestimatedNetWorthDetails.type := LIST($cmnEstimatedAnnualIncome.type, 'CMN_EstimatedAnnualIncome__selector', 'sil_Id'));
            IF($cmnEstimatedAnnualIncome.type == 'EAI5' or $cmnEstimatedAnnualIncome.type == 'oth', $silKYCestimatedNetWorthDetails.name := $cmnEstimatedAnnualIncome.otherType);
            IF($cmnEstimatedAnnualIncome.amount != null, $silKYCestimatedNetWorthDetails.amount := $cmnEstimatedAnnualIncome.amount * 1000);
            IF($cmnEstimatedAnnualIncome.comment != null, $silKYCestimatedNetWorthDetails.comment := $cmnEstimatedAnnualIncome.comment);
            $silKYCestimatedNetWorth.estimatedNetWorthDetails.addElement($silKYCestimatedNetWorthDetails);
         End
      End
   End
   Return $silKYCestimatedNetWorth;
End]]></definition>
        </method>
        <method name="createSILOwnedBusiness" userId="pezzi" uuid="ffffffff-da8c-116b-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILOwnedBusiness'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILOwnedBusiness(CMN_Party $cmnParty) : Indexed SIL_SOWbusinessWealthDetails Begin
   Indexed SIL_SOWbusinessWealthDetails $silBusinessWealthDetails := NewIndexed(SIL_SOWbusinessWealthDetails);
   If $cmnParty == null || not ISA($cmnParty, CMN_PhysicalPerson) Then
      Return $silBusinessWealthDetails;
   End
   /********************************** CREATE SIL PROFESSIONAL ACTIVITY ********************************/
   CMN_KycSow $cmnPhysicalPersonKycSow;
   CMN_PhysicalPersonKycProfile $cmnPhysicalPersonKycProfile;
   If $cmnParty.kycProfile != null Then
      $cmnPhysicalPersonKycProfile := CAST(CMN_PhysicalPersonKycProfile, $cmnParty.kycProfile);
      If $cmnPhysicalPersonKycProfile.sourceOfWealth != null Then
         $cmnPhysicalPersonKycSow := $cmnPhysicalPersonKycProfile.sourceOfWealth;
         /************************************** SoW Employement **********************/
         If $cmnPhysicalPersonKycSow != null && LIB_Validator.validateNotEmptyIndexed($cmnPhysicalPersonKycSow.sowBusinessOwner) Then
            For Integer $i := 1 Condition $i <= $cmnPhysicalPersonKycSow.sowBusinessOwner.size() Step $i := $i + 1 Do
               CMN_KycSowBusinessOwner $sowBusinessOwner := $cmnPhysicalPersonKycSow.sowBusinessOwner[$i];
               If $sowBusinessOwner == null Then
                  Continue;
               End
               SIL_SOWbusinessWealthDetails $silBusinessWealthDetail := CAST(SIL_SOWbusinessWealthDetails, CreateSkeletonDataClass(SIL_SOWbusinessWealthDetails));
               IF(NotEmpty($sowBusinessOwner.getSILID()), $silBusinessWealthDetail.id := $sowBusinessOwner.getSILID());
               $silBusinessWealthDetails.addElement($silBusinessWealthDetail);
               If LIB_Validator.validateNotEmptyIndexed($sowBusinessOwner.countriesBusinessExposure) Then
                  CMN_KycBusinessExposure $cmnKycBusinessExposure;
                  ForEach $cmnKycBusinessExposure In $sowBusinessOwner.countriesBusinessExposure Do
                     If $cmnKycBusinessExposure != null && NotEmpty($cmnKycBusinessExposure.businessExposure) Then
                        SIL_SOWsowCountry $silSOWCountry := INT_SILMappingCMNtoSIL.createSILSowCountry($cmnKycBusinessExposure.businessExposure, null, null);
                        $silBusinessWealthDetail.countriesContribution.addElement($silSOWCountry);
                     End
                  End
               End
               SIL_INVOLVEDPARTYindividual $silIndividual := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
               SIL_INVOLVEDPARTYbusinessOwner $silBusinessOwner := CAST(SIL_INVOLVEDPARTYbusinessOwner, CreateSkeletonDataClass(SIL_INVOLVEDPARTYbusinessOwner));
               $silIndividual.roles.addElement($silBusinessOwner);
               $silBusinessWealthDetail.party := $silIndividual;
               IF($sowBusinessOwner.customerOwnershipInterestRate != null, $silBusinessOwner.percentageOwnership := $sowBusinessOwner.customerOwnershipInterestRate);
               IF($sowBusinessOwner.isEmployeeOfBusiness != null, $silBusinessOwner.employeeIndicator := $sowBusinessOwner.isEmployeeOfBusiness);
               /*IF($sowBusinessOwner.positionSince != null and $sowBusinessOwner.positionSince > 0, $silBusinessOwner.validFrom := DATEPARSE(TOSTRING($sowBusinessOwner.positionSince), 'y', LIB_ConfigHelper.getDefaultLocale('en'), 'UTC'));
               If $sowBusinessOwner.isCurrentEmployment Then
                  $silBusinessOwner.validTo := null;
               ElseIf $sowBusinessOwner.positionUntil != null and $sowBusinessOwner.positionUntil > 0 Then
                  $silBusinessOwner.validTo := DATEPARSE($sowBusinessOwner.positionUntil.toString(), 'yyyy', LIB_ConfigHelper.getDefaultLocale('en'), 'UTC');
               End*/
               If NotEmpty($sowBusinessOwner.professionalTitle) Then
                  $silBusinessOwner.ownershipRole := INT_SILMatchingTools.matchCMNIdToSILEmploymentRolesId($sowBusinessOwner.professionalTitle);
               End
               If $silBusinessOwner.inContext == null Then
                  $silBusinessOwner.inContext := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
               End
               SIL_INVOLVEDPARTYorganization $silOrganization := CAST(SIL_INVOLVEDPARTYorganization, $silBusinessOwner.inContext);
               $silOrganization.names := NewIndexed(SIL_INVOLVEDPARTYorganizationName);
               If $sowBusinessOwner.companyName != null Then
                  SIL_INVOLVEDPARTYorganizationName $silOrganizationName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
                  $silOrganizationName.businessName := $sowBusinessOwner.companyName;
                  $silOrganization.names[1] := $silOrganizationName;
               End
               $silOrganization.addresses := NewIndexed(SIL_INVOLVEDPARTYaddress);
               SIL_INVOLVEDPARTYpostalAddress $silPostalAddress := CAST(SIL_INVOLVEDPARTYpostalAddress, CreateSkeletonDataClass(SIL_INVOLVEDPARTYpostalAddress));
               If $sowBusinessOwner.companyStreet != null Then
                  $silPostalAddress.street := $sowBusinessOwner.companyStreet;
               End
               If $sowBusinessOwner.companyCity != null Then
                  $silPostalAddress.city := $sowBusinessOwner.companyCity;
               End
               If NotEmpty($sowBusinessOwner.companyCountry) Then
                  $silPostalAddress.country := INT_SILMappingCMNtoSIL.createSILCountry($sowBusinessOwner.companyCountry);
               End
               $silOrganization.addresses[1] := $silPostalAddress;
               $silOrganization.documentationItems := NewIndexed(SIL_INVOLVEDPARTYdocumentationItem);
               SIL_INVOLVEDPARTYincorporation $incorporation := CAST(SIL_INVOLVEDPARTYincorporation, CreateSkeletonDataClass(SIL_INVOLVEDPARTYincorporation));
               $silOrganization.documentationItems.addElement($incorporation);
               IF($sowBusinessOwner.businessStartDate != null, $incorporation.incorporateDate := $sowBusinessOwner.businessStartDate);
               If $sowBusinessOwner.isCurrentEmployment Then
                  $incorporation.incorporateClosedDate := null;
               ElseIf $sowBusinessOwner.businessEndDate != null Then
                  $incorporation.incorporateClosedDate := $sowBusinessOwner.businessEndDate;
               End
               IF($sowBusinessOwner.companyDescription != null, $silOrganization.businessDescription := $sowBusinessOwner.companyDescription);
               IF($sowBusinessOwner.employeeNumber != null, $silOrganization.numberOfEmployees := $sowBusinessOwner.employeeNumber);
               IF($sowBusinessOwner.branchesNumber != null, $silOrganization.numberOfBranches := $sowBusinessOwner.branchesNumber);
               IF($sowBusinessOwner.localOfficesNumber != null, $silOrganization.numberOfOffices := $sowBusinessOwner.localOfficesNumber);
               IF($sowBusinessOwner.totalAnnualGrossRevenues != null, $silOrganization.annualTurnOverInUSD := $sowBusinessOwner.totalAnnualGrossRevenues);
               IF($sowBusinessOwner.annualAverageProfit != null, $silOrganization.annualProfitInUSD := $sowBusinessOwner.annualAverageProfit);
               INT_SILMatchingTools.matchCMNMainBusinessToSILOrganization($sowBusinessOwner.mainBusiness, $silOrganization);
               IF($silOrganization.businessNatureDetails == null, $silOrganization.businessNatureDetails := NewIndexed(SIL_INVOLVEDPARTYbusinessNatureDetails));
               IF($silOrganization.businessNatureDetails.size() == 0, $silOrganization.businessNatureDetails[1] := CAST(SIL_INVOLVEDPARTYbusinessNatureDetails, CreateSkeletonDataClass(SIL_INVOLVEDPARTYbusinessNatureDetails)));
               SIL_INVOLVEDPARTYbusinessNatureDetails $silBusinessNatureDetails := $silOrganization.businessNatureDetails[1];
               If $sowBusinessOwner.isGovernmentContract != null Then
                  $silBusinessNatureDetails.isInvolvedInGovernmentContract := $sowBusinessOwner.isGovernmentContract;
                  If LIB_Validator.validateNotEmptyIndexed($sowBusinessOwner.governmentContractCountry) Then
                     $silBusinessNatureDetails.businessCustomers := NewIndexed(SIL_INVOLVEDPARTYbusinessCustomer);
                     ForEach String $country In $sowBusinessOwner.governmentContractCountry Do
                        If NotEmpty($country) Then
                           SIL_INVOLVEDPARTYbusinessCustomer $silBusinessCustomer := CAST(SIL_INVOLVEDPARTYbusinessCustomer, CreateSkeletonDataClass(SIL_INVOLVEDPARTYbusinessCustomer));
                           $silBusinessCustomer.country := INT_SILMappingCMNtoSIL.createSILCountry($country);
                           $silBusinessCustomer.isGovernmental := true;
                           $silBusinessNatureDetails.businessCustomers.addElement($silBusinessCustomer);
                        End
                     End
                  End
               End
               //1610 IF($sowBusinessOwner.isOwnershipGreater25()!=null,$silOrganization.:=$sowBUsinessOwner.isOwnershipGreater25());
               IF($sowBusinessOwner.isPubliclyTradedCompany != null, $silOrganization.listedStockExchangeIndicator := $sowBusinessOwner.isPubliclyTradedCompany);
               SIL_INVOLVEDPARTYorganization $silSubOrganization := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
               SIL_INVOLVEDPARTYinvolvedPartyRelationship $silRelation := CAST(SIL_INVOLVEDPARTYinvolvedPartyRelationship, CreateSkeletonDataClass(SIL_INVOLVEDPARTYinvolvedPartyRelationship));
               $silRelation.relationshipType := 'TradingPartner';
               $silBusinessOwner.involvedPartyRelationships.addElement($silRelation);
               $silRelation.party := $silSubOrganization;
               If NotEmpty($sowBusinessOwner.tradingLocation) Then
                  $silSubOrganization.addresses.addElement(INT_SILMappingCMNtoSIL.createSILCountryAddress($sowBusinessOwner.tradingLocation, INT_SILEnumerations.getCountryTypeOperation()));
               End
               If $sowBusinessOwner.tradingPartners != null Then
                  SIL_INVOLVEDPARTYorganizationName $organizationName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
                  $organizationName.fullName := $sowBusinessOwner.tradingPartners;
                  $silSubOrganization.names.addElement($organizationName);
               End
               // IF($sowBusinessOwner.isAllNegativeNewsSearches != null, $silOrganization. := $sowBusinessOwner.isAllNegativeNewsSearches);
               If LIB_Validator.validateNotEmptyIndexed($sowBusinessOwner.evidences) Then
                  CMN_hyperlink $cmnEvidences;
                  ForEach $cmnEvidences In $sowBusinessOwner.evidences Do
                     //1978
                     //1692
                  End
               End
            End
         End
      End
   End
   Return $silBusinessWealthDetails;
End]]></definition>
        </method>
        <method name="createSILPhoneAddress" userId="pezzi" uuid="00000000-29d7-9a00-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILPhoneAddress'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILPhoneAddress(CMN_Phone $cmnPhone) : SIL_INVOLVEDPARTYtelephoneNumber Begin
   SIL_INVOLVEDPARTYtelephoneNumber $silPhone := CAST(SIL_INVOLVEDPARTYtelephoneNumber, CreateSkeletonDataClass(SIL_INVOLVEDPARTYtelephoneNumber));
   If $cmnPhone == null Then
      LIB_Logger.integrationWarn('[INT_SILMapping]: CMN_Phone for SIL_INVOLVEDPARTYtelephoneNumber is null, generating empty SIL Object');
      Return $silPhone;
   End
   IF(not EMPTY($cmnPhone.getSILID()), $silPhone.addressId := $cmnPhone.getSILID());
   IF(not EMPTY($cmnPhone.type), $silPhone.type := LIST($cmnPhone.type, 'CMN_PhoneTypes__selector', 'sil_Id', 'id'));
   IF(not EMPTY($cmnPhone.status), $silPhone.status := $cmnPhone.status);
   If not EMPTY($cmnPhone.country) Then
      $silPhone.country := CAST(SIL_STATICcountry, CreateSkeletonDataClass(SIL_STATICcountry));
      $silPhone.country.code := LIST($cmnPhone.country, 'CMN_Countries__selector', 'sil_Id');
   End
   IF(not EMPTY($cmnPhone.extensionNumber), $silPhone.extension := $cmnPhone.extensionNumber);
   IF(not EMPTY($cmnPhone.prefix), $silPhone.prefix := $cmnPhone.prefix);
   IF(not EMPTY($cmnPhone.number), $silPhone.number := $cmnPhone.number);
   IF(not EMPTY($cmnPhone.internationalNumber), $silPhone.internationalNumber := $cmnPhone.internationalNumber);
   IF(not EMPTY($cmnPhone.extensionNumber), $silPhone.extension := $cmnPhone.extensionNumber);
   IF(not EMPTY($cmnPhone.description), $silPhone.comment := $cmnPhone.description);
   IF($cmnPhone.preferredCallBack != null, $silPhone.preferredCallBackIndicator := $cmnPhone.preferredCallBack);
   IF($cmnPhone.isMain != null, $silPhone.isPrimary := $cmnPhone.isMain);
   Return $silPhone;
End]]></definition>
        </method>
        <method name="createSILPledge" userId="pezzi" uuid="00000000-259e-2493-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILPledge'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILPledge(CMN_BusinessRelationship $businessRelationship) : Indexed SIL_ACCOUNTpledgeAgreement Begin
   Indexed SIL_ACCOUNTpledgeAgreement $pledges := NewIndexed(SIL_ACCOUNTpledgeAgreement);
   If $businessRelationship != null && $businessRelationship.optionalServices != null Then
      CMN_AvailableOptionCategory $availableOptionCategory;
      String $optionID := '';
      $optionID := 'generalPledgeThird';
      /*If $availableOption.id == 'generalDeedPledge' Then
      ElseIf $availableOption.id == 'generalPledgeThird' Then
      ElseIf $availableOption.id == 'generalAgreementTradeOperation' Then
      ElseIf $availableOption.id == 'guaranteeLetter' Thenf
      End*/
      SIL_ACCOUNTpledgeAgreement $silPledge := CAST(SIL_ACCOUNTpledgeAgreement, CreateSkeletonDataClass(SIL_ACCOUNTpledgeAgreement));
      SIL_INVOLVEDPARTYcustomerRole $silRole := CAST(SIL_INVOLVEDPARTYcustomerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcustomerRole));
      $silPledge.borrowers.addElement($silRole);
      $pledges.addElement($silPledge);
      If $businessRelationship.optionalServices.isOptionSelected($optionID) Then
         CMN_OptionalServiceThirdPartyPledge $optionalService := CAST(CMN_OptionalServiceThirdPartyPledge, $businessRelationship.optionalServices.getOptionalService($optionID));
         If NotEmpty($optionalService.firstNames) Then
            SIL_INVOLVEDPARTYindividual $silindividual := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
            SIL_INVOLVEDPARTYindividualName $silIndName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
            $silIndName.firstName := $optionalService.firstNames;
            $silIndName.lastName := $optionalService.surname;
            $silindividual.names.addElement($silIndName);
            $silindividual.id := $optionalService.clientId;
            $silRole.party := $silindividual;
         ElseIf NotEmpty($optionalService.surname) Then
            SIL_INVOLVEDPARTYorganization $silOrg := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
            SIL_INVOLVEDPARTYorganizationName $silOrgName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
            $silOrgName.businessName := $optionalService.surname;
            $silOrg.names.addElement($silOrgName);
            $silOrg.id := $optionalService.clientId;
            $silRole.party := $silOrg;
         End
         $silPledge.amount := $optionalService.maxAmount;
         IF(NotEmpty($optionalService.currency), $silPledge.currency := INT_SILMappingCMNtoSIL.createSILCurrency($optionalService.currency));
         $silPledge.reason := $optionalService.reasonOfPledge;
      End
   End
   Return $pledges;
End]]></definition>
        </method>
        <method name="createSILPortfolios" userId="pezzi" uuid="00000000-7aae-ae05-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILPortfolios'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILPortfolios(CMN_BusinessRelationship $cmnBusinessRelationship) : Indexed SIL_ACCOUNTportfolio Begin
   Indexed SIL_ACCOUNTportfolio $silPortfolios := NewIndexed(SIL_ACCOUNTportfolio);
   If LIB_Validator.validateNotEmptyIndexed($cmnBusinessRelationship.portfolios) Then
      CMN_Portfolio $portfolio;
      ForEach $portfolio In $cmnBusinessRelationship.portfolios Do
         SIL_ACCOUNTportfolio $silPortfolio := CAST(SIL_ACCOUNTportfolio, CreateSkeletonDataClass(SIL_ACCOUNTportfolio));
         $silPortfolio.investmentStrategy := CAST(SIL_ACCOUNTportfolioInvestmentStrategyDetails, CreateSkeletonDataClass(SIL_ACCOUNTportfolioInvestmentStrategyDetails));
         IF(NotEmpty($portfolio.mandateCategory), $silPortfolio.mandateType := LIST($portfolio.mandateCategory, 'CMN_MandateCategory__selector', 'sil_Id'));
         IF(NotEmpty($portfolio.mandateManagedBy), $silPortfolio.managedBy := LIST($portfolio.mandateManagedBy, 'CMN_MandateManagedBy__selector', 'sil_Id'));
         IF(NotEmpty($portfolio.mandateType), $silPortfolio.mandateSubType := LIST($portfolio.mandateType, 'CMN_Mandates__selector', 'sil_Id'));
         IF(NotEmpty($portfolio.profile), $silPortfolio.mandateProfileType := LIST($portfolio.profile, 'CMN_MandateType__selector', 'sil_Id'));
         String $cmnDocMandate := '';
         If $portfolio.mandateType == '1' Then
         ElseIf $portfolio.mandateType == '4' Then
            If $portfolio.profile == '1' Then
               $cmnDocMandate := LIST($portfolio.docMandate, 'CMN_W35coreInvestments__selector', 'sil_Id');
            ElseIf $portfolio.profile == '2' Then
               $cmnDocMandate := LIST($portfolio.docMandate, 'CMN_W35specialistInvestments__selector', 'sil_Id');
            End
         End
         IF(NotEmpty($cmnDocMandate), $silPortfolio.mandateProfileSubType := $cmnDocMandate);
         IF(NotEmpty($portfolio.currency), $silPortfolio.defaultCurrency := INT_SILMappingCMNtoSIL.createSILCurrency($portfolio.currency));
         INT_SILMappingCMNtoSILVariationFactory__selector().createSILPortfolios($portfolio, $silPortfolio);
         //IF(NotEmpty($portfolio.hedged_unhedged_flag), $silPortfolio. := $portfolio.hedged_unhedged_flag);
         //IF($portfolio.mandatory != null, $silPortfolio. := $portfolio.docMandate);
         //IF(NotEmpty($portfolio.strategyType), $silPortfolio. := $portfolio.strategyType);
         $silPortfolios.addElement($silPortfolio);
      End
   End
   If $cmnBusinessRelationship.portfolioLoanAndDepositFlag != null Then
      SIL_ACCOUNTportfolio $silPortfolio := CAST(SIL_ACCOUNTportfolio, CreateSkeletonDataClass(SIL_ACCOUNTportfolio));
      $silPortfolio.loanDepositOnlyIndicator := $cmnBusinessRelationship.portfolioLoanAndDepositFlag;
      $silPortfolios.addElement($silPortfolio);
   End
   Return $silPortfolios;
End]]></definition>
        </method>
        <method name="createSILPostalAddress" userId="pezzi" uuid="00000000-39c9-bc8f-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILPostalAddress'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILPostalAddress(CMN_MailAddress $cmnAddress) : SIL_INVOLVEDPARTYpostalAddress Begin
   SIL_INVOLVEDPARTYpostalAddress $silAddress := CAST(SIL_INVOLVEDPARTYpostalAddress, CreateSkeletonDataClass(SIL_INVOLVEDPARTYpostalAddress));
   If $cmnAddress == null Then
      LIB_Logger.integrationWarn('[INT_SILMapping]: CMN_MailAddress is null, generating empty SIL_PostalAddress');
      Return $silAddress;
   End
   IF($cmnAddress.getSILID() != null, $silAddress.addressId := $cmnAddress.getSILID());
   IF($cmnAddress.isMain != null, $silAddress.isPrimary := $cmnAddress.isMain);
   IF($cmnAddress.co != null, $silAddress.co := $cmnAddress.co);
   IF($cmnAddress.street != null, $silAddress.street := $cmnAddress.street);
   IF($cmnAddress.streetNumber != null, $silAddress.streetNumber := $cmnAddress.streetNumber);
   IF($cmnAddress.complementCity != null, $silAddress.state := $cmnAddress.complementCity);
   IF($cmnAddress.poBox != null, $silAddress.poBox := $cmnAddress.poBox);
   IF($cmnAddress.zip != null, $silAddress.zipcode := $cmnAddress.zip);
   IF($cmnAddress.city != null, $silAddress.city := $cmnAddress.city);
   IF($cmnAddress.building != null, $silAddress.building := $cmnAddress.building);
   IF($cmnAddress.district != null, $silAddress.district := $cmnAddress.district);
   IF(NotEmpty($cmnAddress.country), $silAddress.country := INT_SILMappingCMNtoSIL.createSILCountry($cmnAddress.country));
   IF($cmnAddress.validFrom != null, $silAddress.validFrom := $cmnAddress.validFrom);
   IF($cmnAddress.validTo != null, $silAddress.validTo := $cmnAddress.validTo);
   Return $silAddress;
End]]></definition>
        </method>
        <method name="createSILProfessionalActivity" userId="pezzi" uuid="00000000-0d71-dfb0-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILProfessionalActivity'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILProfessionalActivity(CMN_Party $cmnParty) : Indexed SIL_SOWincomeWealthDetails Begin
   Indexed SIL_SOWincomeWealthDetails $silIncomeWealthDetails := NewIndexed(SIL_SOWincomeWealthDetails);
   If $cmnParty == null || not ISA($cmnParty, CMN_PhysicalPerson) Then
      Return $silIncomeWealthDetails;
   End
   /********************************** CREATE SIL PROFESSIONAL ACTIVITY ********************************/
   CMN_KycSow $cmnPhysicalPersonKycSow;
   CMN_PhysicalPersonKycProfile $cmnPhysicalPersonKycProfile;
   If $cmnParty.kycProfile != null Then
      $cmnPhysicalPersonKycProfile := CAST(CMN_PhysicalPerson, $cmnParty).getKYCProfile();
      If $cmnPhysicalPersonKycProfile.sourceOfWealth != null Then
         $cmnPhysicalPersonKycSow := $cmnPhysicalPersonKycProfile.sourceOfWealth;
         /************************************** SoW Employement **********************/
         If $cmnPhysicalPersonKycSow != null && LIB_Validator.validateNotEmptyIndexed($cmnPhysicalPersonKycSow.sowEmployment) Then
            For Integer $i := 1 Condition $i <= $cmnPhysicalPersonKycSow.sowEmployment.size() Step $i := $i + 1 Do
               CMN_KycSowEmployment $sowEmployment := $cmnPhysicalPersonKycSow.sowEmployment[$i];
               If $sowEmployment == null Then
                  Continue;
               End
               //
               SIL_SOWincomeWealthDetails $silIncomeWealthDetail := CAST(SIL_SOWincomeWealthDetails, CreateSkeletonDataClass(SIL_SOWincomeWealthDetails));
               IF(NotEmpty($sowEmployment.getSILID()), $silIncomeWealthDetail.id := $sowEmployment.getSILID());
               IF($sowEmployment.approximateAverage != null, $silIncomeWealthDetail.netWorthEstimatedAmount := $sowEmployment.approximateAverage);
               //Defect 4454
               $silIncomeWealthDetail.netWorthEstimatedAmountCurrency := CAST(SIL_STATICcurrency, CreateSkeletonDataClass(SIL_STATICcurrency));
               $silIncomeWealthDetail.netWorthEstimatedAmountCurrency.code := 'USD';
               If LIB_Validator.validateNotEmptyIndexed($sowEmployment.countriesBusinessExposure) Then
                  CMN_KycBusinessExposure $cmnKycBusinessExposure;
                  ForEach $cmnKycBusinessExposure In $sowEmployment.countriesBusinessExposure Do
                     If $cmnKycBusinessExposure != null && NotEmpty($cmnKycBusinessExposure.businessExposure) Then
                        SIL_SOWsowCountry $silSOWCountry := INT_SILMappingCMNtoSIL.createSILSowCountry($cmnKycBusinessExposure.businessExposure, null, null);
                        $silIncomeWealthDetail.countriesContribution.addElement($silSOWCountry);
                     End
                  End
               End
               SIL_INVOLVEDPARTYindividual $silIndividual := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
               $silIncomeWealthDetail.party := $silIndividual;
               SIL_INVOLVEDPARTYemployeeRole $customerEmployment := CAST(SIL_INVOLVEDPARTYemployeeRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYemployeeRole));
               $silIndividual.roles.addElement($customerEmployment);
               $silIncomeWealthDetails.addElement($silIncomeWealthDetail);
               IF(NotEmpty($sowEmployment.employmentStatus), $customerEmployment.employmentStatus := LIST($sowEmployment.employmentStatus, 'SIL_EmploymentStatus', 'id', 'cmn_id'));
               If NotEmpty($sowEmployment.professionalTitle) Then
                  $customerEmployment.employmentRole := INT_SILMatchingTools.matchCMNIdToSILEmploymentRolesId($sowEmployment.professionalTitle);
               End
               IF(NotEmpty($sowEmployment.position), $customerEmployment.positionTitle := LIST($sowEmployment.position, 'COB_KycEmploymentPositionTitle', 'sil_Id'));
               IF($sowEmployment.positionSince != null, $customerEmployment.validFrom := $sowEmployment.positionSince);
               If $sowEmployment.isCurrentEmployment Then
                  $customerEmployment.validTo := null;
               ElseIf $sowEmployment.positionUntil != null Then
                  $customerEmployment.validTo := $sowEmployment.positionUntil;
               End
               If $sowEmployment.positionSince != null Then
                  Date $since := $sowEmployment.positionSince;
                  Date $until := NOW();
                  If $sowEmployment.positionUntil != null Then
                     $until := $sowEmployment.positionUntil;
                  ElseIf not $sowEmployment.isCurrentEmployment Then
                     $customerEmployment.inPositionNbYears := 0;
                  End
                  Double $diff := TIMEDIFF($since, $until, 'y');
                  $customerEmployment.inPositionNbYears := TOINTEGER($diff);
               Else
                  $customerEmployment.inPositionNbYears := 0;
               End
               SIL_INVOLVEDPARTYorganization $silOrganization := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
               $silOrganization.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName);
               SIL_INVOLVEDPARTYorganizationName $silOrganizationName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
               IF($sowEmployment.employerName != null, $silOrganizationName.businessName := $sowEmployment.employerName);
               $silOrganization.names.addElement($silOrganizationName);
               $silOrganization.addresses := NewIndexed(SIL_INVOLVEDPARTYaddress);
               SIL_INVOLVEDPARTYpostalAddress $silPostalAddress := CAST(SIL_INVOLVEDPARTYpostalAddress, CreateSkeletonDataClass(SIL_INVOLVEDPARTYpostalAddress));
               $silOrganization.addresses.addElement($silPostalAddress);
               If $sowEmployment.employerStreet != null Then
                  $silPostalAddress.street := $sowEmployment.employerStreet;
               End
               If $sowEmployment.employerCity != null Then
                  $silPostalAddress.city := $sowEmployment.employerCity;
               End
               If NotEmpty($sowEmployment.employerCountry) Then
                  $silPostalAddress.country := INT_SILMappingCMNtoSIL.createSILCountry($sowEmployment.employerCountry);
               End
               IF($sowEmployment.employerBusinessDescription != null, $silOrganization.businessDescription := $sowEmployment.employerBusinessDescription);
               IF($sowEmployment.employeeNumber != null, $silOrganization.numberOfEmployees := $sowEmployment.employeeNumber);
               INT_SILMatchingTools.matchCMNMainBusinessToSILOrganization($sowEmployment.mainBusiness, $silOrganization);
               IF($silOrganization.businessNatureDetails == null, $silOrganization.businessNatureDetails := NewIndexed(SIL_INVOLVEDPARTYbusinessNatureDetails));
               IF($silOrganization.businessNatureDetails.size() == 0, $silOrganization.businessNatureDetails[1] := CAST(SIL_INVOLVEDPARTYbusinessNatureDetails, CreateSkeletonDataClass(SIL_INVOLVEDPARTYbusinessNatureDetails)));
               SIL_INVOLVEDPARTYbusinessNatureDetails $silBusinessNatureDetails := $silOrganization.businessNatureDetails[1];
               If $sowEmployment.isGovContractLicense != null Then
                  $silBusinessNatureDetails.isInvolvedInGovernmentContract := $sowEmployment.isGovContractLicense;
               End
               If LIB_Validator.validateNotEmptyIndexed($sowEmployment.revenuesCountries) Then
                  $silBusinessNatureDetails.businessCustomers := NewIndexed(SIL_INVOLVEDPARTYbusinessCustomer);
                  SIL_INVOLVEDPARTYbusinessCustomer $silBusinessCustomer;
                  ForEach String $country In $sowEmployment.revenuesCountries Do
                     If NotEmpty($country) Then
                        $silBusinessCustomer := CAST(SIL_INVOLVEDPARTYbusinessCustomer, CreateSkeletonDataClass(SIL_INVOLVEDPARTYbusinessCustomer));
                        $silBusinessCustomer.isGovernmental := true;
                        $silBusinessCustomer.country := INT_SILMappingCMNtoSIL.createSILCountry($country);
                        $silBusinessNatureDetails.businessCustomers.addElement($silBusinessCustomer);
                     End
                  End
               End
               $customerEmployment.inContext := $silOrganization;
            End
         End
      End
   End
   Return $silIncomeWealthDetails;
End]]></definition>
        </method>
        <method name="createSILRelationships" userId="pezzi" uuid="ffffffff-f2d9-c121-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'connected Party Screen'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILRelationships(CMN_Party $cmnParty, Indexed SIL_INVOLVEDPARTYinvolvedPartyRelationship $silPartyStructure := null) : Indexed SIL_INVOLVEDPARTYinvolvedPartyRelationship Begin
   If $silPartyStructure == null Then
      $silPartyStructure := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyRelationship);
   End
   If $cmnParty == null Then
      Return $silPartyStructure;
   End
   /******************************************* CONNECTED PARTIES SCREEN ********************************************/
   If LIB_Validator.validateNotEmptyIndexed($cmnParty.kycProfile.connectedParties.connectedParty) Then
      CMN_ConnectedParty $cmnConnectedParty;
      ForEach $cmnConnectedParty In $cmnParty.kycProfile.connectedParties.connectedParty Do
         SIL_INVOLVEDPARTYinvolvedPartyRelationship $silINVOLVEDPARTYinvolvedPartyRelationship := CAST(SIL_INVOLVEDPARTYinvolvedPartyRelationship, CreateSkeletonDataClass(SIL_INVOLVEDPARTYinvolvedPartyRelationship));
         IF(NotEmpty($cmnConnectedParty.getSILID()), $silINVOLVEDPARTYinvolvedPartyRelationship.id := $cmnConnectedParty.getSILID());
         If $cmnConnectedParty != null Then
            If NotEmpty($cmnConnectedParty.firstName) or NotEmpty($cmnConnectedParty.lastName) or $cmnConnectedParty.isIndividual() Then
               $silINVOLVEDPARTYinvolvedPartyRelationship.party := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
               $silINVOLVEDPARTYinvolvedPartyRelationship.party.names := NewIndexed(SIL_INVOLVEDPARTYindividualName);
               SIL_INVOLVEDPARTYindividualName $silIndividualName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
               If $cmnConnectedParty.lastName != null Then
                  $silIndividualName.lastName := $cmnConnectedParty.lastName;
               End
               If $cmnConnectedParty.firstName != null Then
                  $silIndividualName.firstName := $cmnConnectedParty.firstName;
               End
               If $cmnConnectedParty.getFullName() != null Then
                  $silIndividualName.fullName := $cmnConnectedParty.getFullName();
               End
               $silINVOLVEDPARTYinvolvedPartyRelationship.party.names.addElement($silIndividualName);
            ElseIf NotEmpty($cmnConnectedParty.businessName) or $cmnConnectedParty.isOrganization() Then
               $silINVOLVEDPARTYinvolvedPartyRelationship.party := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
               $silINVOLVEDPARTYinvolvedPartyRelationship.party.names := NewIndexed(SIL_INVOLVEDPARTYorganizationName);
               SIL_INVOLVEDPARTYorganizationName $silOrganizationName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
               If $cmnConnectedParty.businessName != null Then
                  $silOrganizationName.businessName := $cmnConnectedParty.businessName;
               End
               If $cmnConnectedParty.getFullName() != null Then
                  $silOrganizationName.fullName := $cmnConnectedParty.getFullName();
               End
               $silINVOLVEDPARTYinvolvedPartyRelationship.party.names.addElement($silOrganizationName);
            End
            If $silINVOLVEDPARTYinvolvedPartyRelationship.party != null && $cmnConnectedParty.idCRM != null Then
               $silINVOLVEDPARTYinvolvedPartyRelationship.party.id := $cmnConnectedParty.idCRM;
            Else
               Continue;
            End
            /*String $relationshipSubType := LIST($cmnConnectedParty.typeRelationship, 'SIL_KYCPartyRelationType', 'relationshipSubType', 'cmn_Id');
            If NotEmpty($relationshipSubType) Then
               $silINVOLVEDPARTYinvolvedPartyRelationship.relationshipSubType := $relationshipSubType;
            End
            String $relationshipRole := LIST($cmnConnectedParty.typeRelationship, 'SIL_KYCPartyRelationType', 'relationshipRole', 'cmn_Id');
            If NotEmpty($relationshipRole) Then
               $silINVOLVEDPARTYinvolvedPartyRelationship.relationshipRole := $relationshipRole;
            End*/
            String $relationshipType := LIST($cmnConnectedParty.typeRelationship, 'CMN_KYCPartyRelationType', 'sil_Id', 'id');
            If NotEmpty($relationshipType) Then
               $silINVOLVEDPARTYinvolvedPartyRelationship.relationshipType := $relationshipType;
            End
            $silPartyStructure.addElement($silINVOLVEDPARTYinvolvedPartyRelationship);
         End
      End
   End
   Return $silPartyStructure;
End]]></definition>
        </method>
        <method name="createSILScreeningScreening" userId="pezzi" uuid="ffffffff-da3a-447a-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILScreeningScreening'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILScreeningScreening(CMN_Party $cmnParty, Indexed SIL_INVOLVEDPARTYSCREENINGscreening $silScreeningScreenings := null) : Indexed SIL_INVOLVEDPARTYSCREENINGscreening Begin
   IF(not LIB_Validator.validateNotEmptyIndexed($silScreeningScreenings), $silScreeningScreenings := NewIndexed(SIL_INVOLVEDPARTYSCREENINGscreening));
   If $cmnParty != null Then
      /*SIL_INVOLVEDPARTYSCREENINGdatabaseScreening $silGeneralScreening := CAST(SIL_INVOLVEDPARTYSCREENINGdatabaseScreening, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGdatabaseScreening));
      //
      //IF($cmnParty.kycProfile.screening.commentGovernmentInfluence != null, $silGeneralScreening. := $cmnParty.kycProfile.screening.commentGovernmentInfluence);
      //
      $silScreeningScreenings.addElement($silGeneralScreening);
      If $cmnParty.kycProfile.screening.isSubjectToNegativeNews Then
         If LIB_Validator.validateNotEmptyIndexed($cmnParty.kycProfile.screening.connectedPartyNegativeNews) Then
            CMN_ConnectedPartyNegativeNews $cmnConnectedPartyNegativeNews;
            SIL_INVOLVEDPARTYSCREENINGnegativeMediaFinding $silINVOLVEDPARTYSCREENINGnegativeMediaScreening;
            ForEach $cmnConnectedPartyNegativeNews In $cmnParty.kycProfile.screening.connectedPartyNegativeNews Do
               $silINVOLVEDPARTYSCREENINGnegativeMediaScreening := CAST(SIL_INVOLVEDPARTYSCREENINGnegativeMediaFinding, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGnegativeMediaFinding));
               $silINVOLVEDPARTYSCREENINGnegativeMediaScreening.name :='GenericScreening';
               IF(NotEmpty($cmnConnectedPartyNegativeNews.getSILID()), $silINVOLVEDPARTYSCREENINGnegativeMediaScreening.id := $cmnConnectedPartyNegativeNews.getSILID());
               //$silINVOLVEDPARTYSCREENINGnegativeMediaScreening.isSubjectToNegativeMedia := true;
               IF($cmnConnectedPartyNegativeNews.eventType != null, $silINVOLVEDPARTYSCREENINGnegativeMediaScreening.type := LIST($cmnConnectedPartyNegativeNews.eventType, 'CMN_ComplianceEventType', 'sil_Id'));
               IF($cmnConnectedPartyNegativeNews.year != null, $silINVOLVEDPARTYSCREENINGnegativeMediaScreening.year := TOSTRING($cmnConnectedPartyNegativeNews.year));
               IF(NotEmpty($cmnConnectedPartyNegativeNews.reason), $silINVOLVEDPARTYSCREENINGnegativeMediaScreening.subType := LIST($cmnConnectedPartyNegativeNews.reason, 'CMN_ComplianceReasons', 'sil_Id'));
               IF($cmnConnectedPartyNegativeNews.comment != null, $silINVOLVEDPARTYSCREENINGnegativeMediaScreening.description := $cmnConnectedPartyNegativeNews.comment);
               $silGeneralScreening.findings.addElement($silINVOLVEDPARTYSCREENINGnegativeMediaScreening);
            End
         End
      End*/
      SIL_INVOLVEDPARTYSCREENINGdatabaseScreening $silScreeningScreening;
      /***** General Information *****/
      $silScreeningScreening := CAST(SIL_INVOLVEDPARTYSCREENINGdatabaseScreening, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGdatabaseScreening));
      $silScreeningScreenings.addElement($silScreeningScreening);
      $silScreeningScreening.name := 'GenericScreening';
      IF($cmnParty.kycProfile.screening.hasParentConfirmed != null, $silScreeningScreening.compliantWithHSBCPolicyIndicator := $cmnParty.kycProfile.screening.hasParentConfirmed);
      //IF($cmnParty.kycProfile.screening.hasConfirmed != null, $silScreeningScreening.compliantWithHSBCPolicyIndicator := $cmnParty.kycProfile.screening.hasConfirmed);
      IF($cmnParty.kycProfile.screening.isSubjectToNegativeNews != null, $silScreeningScreening.isSubjectToNegativeMedia := $cmnParty.kycProfile.screening.isSubjectToNegativeNews);
      If $cmnParty.type.isTrustOrFoundation() Then
         $silScreeningScreening.party := CAST(SIL_INVOLVEDPARTYtrust, CreateSkeletonDataClass(SIL_INVOLVEDPARTYtrust));
      ElseIf $cmnParty.type.isLegalEntity() Then
         $silScreeningScreening.party := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
      ElseIf $cmnParty.type.isPhysicalPerson() Then
         $silScreeningScreening.party := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
      End
      IF($cmnParty.kycProfile.screening.regOIndicator != null, $silScreeningScreening.party.subjectToRegulationOIndicator := $cmnParty.kycProfile.screening.regOIndicator);
      If $cmnParty.kycProfile.screening.regOIndicator Then
         IF($cmnParty.kycProfile.screening.regOComment != null, $silScreeningScreening.party.regulationOComment := $cmnParty.kycProfile.screening.regOComment);
      End
      IF($cmnParty.kycProfile.screening.hasInfluence != null, $silScreeningScreening.party.influenceGovernmentIndicator := $cmnParty.kycProfile.screening.hasInfluence);
      IF($cmnParty.kycProfile.screening.commentGovernmentInfluence != null, $silScreeningScreening.party.influenceGovernmentDescription := $cmnParty.kycProfile.screening.commentGovernmentInfluence);
      If LIB_Validator.validateNotEmptyIndexed($cmnParty.kycProfile.screening.sanctionedCountries) Then
         ForEach String $cmnCountryCode In $cmnParty.kycProfile.screening.sanctionedCountries Do
            SIL_INVOLVEDPARTYcountryAddress $silCountryAddress := CAST(SIL_INVOLVEDPARTYcountryAddress, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcountryAddress));
            $silCountryAddress.type := INT_SILEnumerations.getCountryTypeExposure();
            $silCountryAddress.country := CAST(SIL_STATICcountry, CreateSkeletonDataClass(SIL_STATICcountry));
            $silCountryAddress.country.code := LIST($cmnCountryCode, 'SIL_SanctionedCountries', 'sil_Id');
            $silCountryAddress.country.sanctionedIndicator := true;
            IF(NotEmpty($cmnParty.kycProfile.screening.sanctionedCountriesComment), $silCountryAddress.comment := $cmnParty.kycProfile.screening.sanctionedCountriesComment);
            $silScreeningScreening.party.addresses.addElement($silCountryAddress);
         End
      ElseIf $cmnParty.kycProfile.screening.hasNoneSanctionedCountry Then
         SIL_INVOLVEDPARTYcountryAddress $silCountryAddress := CAST(SIL_INVOLVEDPARTYcountryAddress, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcountryAddress));
         $silCountryAddress.type := INT_SILEnumerations.getCountryTypeExposure();
         $silCountryAddress.country := CAST(SIL_STATICcountry, CreateSkeletonDataClass(SIL_STATICcountry));
         $silCountryAddress.country.code := LIST('none', 'SIL_SanctionedCountries', 'sil_Id');
         $silCountryAddress.country.sanctionedIndicator := true;
         $silScreeningScreening.party.addresses.addElement($silCountryAddress);
      End
      If $cmnParty.negativeNews != null Then
         /************************************* Negative News Screening ********************************************/
         CMN_NegativeNews $cmnNegativeNews := $cmnParty.negativeNews;
         Indexed CMN_NegativeNewsRecord $negativeNews := $cmnNegativeNews.getNegativeNewsRecordSet().negativeNewsRecords;
         /*CMN_NegativeNewsRecordSet $historyRecordSet;
         ForEach $historyRecordSet In $cmnNegativeNews.getNegativeNewsRecordSet().negativeNewsHistory Do
            $negativeNews.addAll($historyRecordSet.getNegativeNewsRecords());
         End*/
         If LIB_Validator.validateNotEmptyIndexed($negativeNews) Then
            CMN_NegativeNewsRecord $cmnNegativeNewsRecord;
            //
            ForEach $cmnNegativeNewsRecord In $negativeNews Do
               If $cmnNegativeNewsRecord != null and NotEmpty(LIST($cmnNegativeNewsRecord.id, 'COB_NegativeNews', 'sil_id', 'id')) and EMPTY($cmnNegativeNewsRecord.getSILID()) Then
                  $silScreeningScreening := CAST(SIL_INVOLVEDPARTYSCREENINGdatabaseScreening, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGdatabaseScreening));
                  $silScreeningScreening.name := LIST($cmnNegativeNewsRecord.id, 'COB_NegativeNews', 'sil_id', 'id');
                  IF(NotEmpty($cmnNegativeNewsRecord.selectedQuestion), $silScreeningScreening.status := LIST($cmnNegativeNewsRecord.selectedQuestion, 'CMN_NegativeNewsChoices__selector', 'sil_id', 'id'));
                  If $cmnNegativeNewsRecord.id == 'other' Then
                     IF(NotEmpty($cmnNegativeNewsRecord.title), $silScreeningScreening.description := $cmnNegativeNewsRecord.title);
                  ElseIf $cmnNegativeNewsRecord.id == 'worldcheck' Then
                     IF(NotEmpty($cmnNegativeNewsRecord.worldcheckID), $silScreeningScreening.referenceId := $cmnNegativeNewsRecord.worldcheckID);
                  End
                  If $cmnNegativeNewsRecord.performer != null Then
                     SIL_INVOLVEDPARTYemployeeRole $silScreener := CAST(SIL_INVOLVEDPARTYemployeeRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYemployeeRole));
                     SIL_INVOLVEDPARTYindividual $individual := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
                     SIL_INVOLVEDPARTYindividualName $name := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
                     IF(NotEmpty($cmnNegativeNewsRecord.performer.firstName), $name.firstName := $cmnNegativeNewsRecord.performer.firstName);
                     IF(NotEmpty($cmnNegativeNewsRecord.performer.lastName), $name.lastName := $cmnNegativeNewsRecord.performer.lastName);
                     IF(NotEmpty($cmnNegativeNewsRecord.performer.getFullName()), $name.fullName := $cmnNegativeNewsRecord.performer.getFullName());
                     $individual.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName);
                     $individual.names.addElement($name);
                     $silScreener.party := $individual;
                     $silScreeningScreening.screener := $silScreener;
                     IF($cmnParty.kycProfile.screening != null, $silScreeningScreening.screener.party.hasComplianceIssueIndicator := $cmnParty.kycProfile.screening.hasLegalOrRegulatoryIssues);
                  End
                  IF($cmnNegativeNewsRecord.date != null, $silScreeningScreening.date := $cmnNegativeNewsRecord.date);
                  IF(NotEmpty($cmnNegativeNewsRecord.comment), $silScreeningScreening.comment := $cmnNegativeNewsRecord.comment);
                  IF(NotEmpty($cmnNegativeNewsRecord.hyperlink), $silScreeningScreening.evidenceLink := $cmnNegativeNewsRecord.hyperlink);
                  $silScreeningScreenings.addElement($silScreeningScreening);
               End
            End
         End
      End
      /************************************* Screening references ********************************************/
      /* If LIB_Validator.validateNotEmptyIndexed($cmnParty.kycProfile.screening.worldCheckKeyword) Then
         CMN_WorldCheckKeyword $cmnWorldCheckKeyword;
         IF($silGeneralScreening == null, $silGeneralScreening := CAST(SIL_INVOLVEDPARTYSCREENINGdatabaseScreening, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGdatabaseScreening)));
         IF(not LIB_Validator.validateNotEmptyIndexed($silGeneralScreening.findings), $silGeneralScreening.findings := NewIndexed(SIL_INVOLVEDPARTYSCREENINGfinding));
         ForEach $cmnWorldCheckKeyword In $cmnParty.kycProfile.screening.worldCheckKeyword Do
            SIL_INVOLVEDPARTYSCREENINGnegativeMediaFinding $silINVOLVEDPARTYSCREENINGfinding := CAST(SIL_INVOLVEDPARTYSCREENINGnegativeMediaFinding, CreateSkeletonDataClass(SIL_INVOLVEDPARTYSCREENINGnegativeMediaFinding));
            IF($cmnWorldCheckKeyword.description != null, $silINVOLVEDPARTYSCREENINGfinding.description := $cmnWorldCheckKeyword.description);
            IF($cmnWorldCheckKeyword.keyword != null, $silINVOLVEDPARTYSCREENINGfinding.type := $cmnWorldCheckKeyword.keyword);
         End
      End*/
   End
   Return $silScreeningScreenings;
End]]></definition>
        </method>
        <method name="createSILSearchIndividual" userId="pezzi" uuid="ffffffff-a7f3-b0bb-0000-000000000000">
            <definition><![CDATA[/**
	Return an instance of SIL_SearchIndividual. If nothing is specified, the first 10 results are provided.
*/
StaticFunction createSILSearchIndividual(String $firstName := '*', String $lastName := '*', String $identifier := null, Date $birthDate := null, String $placeOfBirth := null, String $countryOfBirth := null, Integer $maxCount := LIB_ConfigHelper.getMaxCountQueries()) : SIL_TOOLSsearchInvolvedParty Begin
   SIL_TOOLSsearchInvolvedParty $silSearchIndividual := CAST(SIL_TOOLSsearchInvolvedParty, CreateSkeletonDataClass(SIL_TOOLSsearchInvolvedParty));
   //SIL_TOOLSsearchParameter $parameter;
   $silSearchIndividual.firstName := $firstName;
   $silSearchIndividual.lastName := $lastName;
   IF($birthDate != null, $silSearchIndividual.birthDate := $birthDate);
   //$silSearchIndividual.searchType := 'I';
   //$silSearchIndividual.maxCount := $maxCount;
   //$silSearchIndividual.parameters := NewIndexed(SIL_parameter);
   // Mandatory is first and last name
   //$silSearchIndividual.parameters.addElement(INT_SILMappingCMNtoSIL.createSILSearchParamter('LAST_NAME', $lastName));
   //$silSearchIndividual.parameters.addElement(INT_SILMappingCMNtoSIL.createSILSearchParamter('FIRST_NAME', $firstName));
   //IF($birthDate != null, $silSearchIndividual.parameters.addElement(INT_SILMappingCMNtoSIL.createSILSearchParamter('BIRTH_DATE', TOSTRING($birthDate))));
   //IF($placeOfBirth != null, $silSearchIndividual.parameters.addElement(INT_SILMappingCMNtoSIL.createSILSearchParamter('PLACE_OF_BIRTH', $placeOfBirth)));
   //IF($identifier != null, $silSearchIndividual.parameters.addElement(INT_SILMappingCMNtoSIL.createSILSearchParamter('IDENTIFIER', $identifier)));
   Return $silSearchIndividual;
End
/* From Technical Design: 
The SIL Resource takes a SearchInvolvedParty as parameter. This object contains key-value pairs. The following data are provided to the SIL (for Individual):
- Party first name
- Party last name
- Party birth date (optional)
- Place of birth (optional)
- Country of birth (optional)
Request Content example:
{
	"@class" : "com.hsbc.pb.common.model.v2_0.tools.search.SearchInvolvedParty",
	"parameters" : [
		{
			"@class" : "com.hsbc.pb.common.model.v2_0.tools.search.SearchParameter",
			"key" : "FIRST_NAME",
			"value" : "Mickey"
		}, {
			"@class" : "com.hsbc.pb.common.model.v2_0.tools.search.SearchParameter",
			"key" : "LAST_NAME",
			"value" : "Mouse"
		}		
	],
	"maxCount" : 25,
	"searchType" : "I"
}
*/]]></definition>
        </method>
        <method name="createSILSearchParamter" userId="pezzi" uuid="ffffffff-c599-ef16-0000-000000000000">
            <definition><![CDATA[/**
	Create an stripped down instance of a SIL_SearchParameter.
    @param $key is the key of the search parameter 
    @param $value is the value to the corresponding key
    @return SIL_
*/
StaticFunction createSILSearchParamter(String $key, String $value := '*') : SIL_TOOLSsearchParameter Begin
   SIL_TOOLSsearchParameter $silSearchParameter := CAST(SIL_TOOLSsearchParameter, CreateSkeletonDataClass(SIL_TOOLSsearchParameter));
   If EMPTY($key) Then
      LIB_Logger.integrationWarn('[INT_SILMapping]: Missing key for search parameter');
      Return $silSearchParameter;
   End
   $silSearchParameter.key := $key;
   $silSearchParameter.value := $value;
   Return $silSearchParameter;
End]]></definition>
        </method>
        <method name="createSILSOW" userId="cucumazzo" uuid="00000000-591a-b101-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILSOW'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILSOW(CMN_Party $cmnParty) : Indexed SIL_SOWindividualSourceOfWealth Begin
   Indexed SIL_SOWindividualSourceOfWealth $silSourceOfWealth := NewIndexed(SIL_SOWindividualSourceOfWealth);
   If $cmnParty == null and $cmnParty.type.isLegalEntity() Then
      Return null;
   End
   CMN_PhysicalPerson $cmnPhysical := CAST(CMN_PhysicalPerson, $cmnParty);
   CMN_KycSow $cmnPhysicalPersonKycSow := $cmnPhysical.getKYCProfile().sourceOfWealth;
   /************************************** Source Of Wealths **********************/
   SIL_SOWtotalWealth $silGenericSourceOfWealth := CAST(SIL_SOWtotalWealth, CreateSkeletonDataClass(SIL_SOWtotalWealth));
   IF($cmnPhysicalPersonKycSow.description != null, $silGenericSourceOfWealth.description := $cmnPhysicalPersonKycSow.description);
   /************************************** Employee ROLE SOW **********************/
   $silGenericSourceOfWealth.party := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
   SIL_INVOLVEDPARTYemployeeRole $employeeRole := CAST(SIL_INVOLVEDPARTYemployeeRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYemployeeRole));
   $silGenericSourceOfWealth.party.roles.addElement($employeeRole);
   If LIB_Validator.validateNotEmptyIndexed($cmnPhysicalPersonKycSow.customerOccupationStatus) && NotEmpty($cmnPhysicalPersonKycSow.customerOccupationStatus[1]) Then
      $employeeRole.employmentStatus := LIST($cmnPhysicalPersonKycSow.customerOccupationStatus[1], 'SIL_EmploymentStatus', 'id', 'cmn_id');
   End
   IF($cmnPhysicalPersonKycSow.educationalBackground != null, $silGenericSourceOfWealth.party.educationalBackground := $cmnPhysicalPersonKycSow.educationalBackground);
   If LIB_Validator.validateNotEmptyIndexed($cmnPhysicalPersonKycSow.sowCountries) Then
      CMN_KycSowCountries $cmnKycSowCountries;
      SIL_INVOLVEDPARTYcountryAddress $silCountryAddress;
      ForEach $cmnKycSowCountries In $cmnPhysicalPersonKycSow.sowCountries Do
         $silCountryAddress := INT_SILMappingCMNtoSIL.createSILCountryAddress($cmnKycSowCountries.country, INT_SILEnumerations.getCountryTypeSourceOfWealth());
         $silCountryAddress.comment := $cmnKycSowCountries.comment;
         //$silCountryAddress.percentage := $cmnKycSowCountries.rate;
         $silGenericSourceOfWealth.party.addresses.addElement($silCountryAddress);
      End
   End
   $silSourceOfWealth.addElement($silGenericSourceOfWealth);
   /************************************** SoW Employement **********************/
   If LIB_Validator.validateNotEmptyIndexed($cmnPhysicalPersonKycSow.sowEmployment) Then
      Indexed SIL_SOWincomeWealthDetails $silIncomeWealthDetailss := INT_SILMappingCMNtoSIL.createSILProfessionalActivity($cmnParty);
      $silSourceOfWealth.addAll($silIncomeWealthDetailss);
   End
   /************************************** SoW Owned Business **********************/
   If LIB_Validator.validateNotEmptyIndexed($cmnPhysicalPersonKycSow.sowBusinessOwner) Then
      Indexed SIL_SOWbusinessWealthDetails $silBusinessWealthDetails := INT_SILMappingCMNtoSIL.createSILOwnedBusiness($cmnParty);
      $silSourceOfWealth.addAll($silBusinessWealthDetails);
   End
   /************************************** SoW Donation **********************/
   If LIB_Validator.validateNotEmptyIndexed($cmnPhysicalPersonKycSow.sowInheritanceDonation) Then
      CMN_KycSowInheritanceDonation $cmnkycSowInheritanceDonation;
      ForEach $cmnkycSowInheritanceDonation In $cmnPhysicalPersonKycSow.sowInheritanceDonation Do
         If $cmnkycSowInheritanceDonation == null Then
            Continue;
         End
         SIL_SOWinheritanceWealthDetails $silInheritanceWealthDetails := CAST(SIL_SOWinheritanceWealthDetails, CreateSkeletonDataClass(SIL_SOWinheritanceWealthDetails));
         $silInheritanceWealthDetails.contributors := NewIndexed(SIL_SOWsowContributor);
         SIL_SOWsowContributor $silSOWContributor := CAST(SIL_SOWsowContributor, CreateSkeletonDataClass(SIL_SOWsowContributor));
         $silSOWContributor.contributor := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
         $silSOWContributor.contributor.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName);
         SIL_INVOLVEDPARTYindividualName $silContributorIndividualName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
         If $cmnkycSowInheritanceDonation.lastName != null Then
            $silContributorIndividualName.lastName := $cmnkycSowInheritanceDonation.lastName;
         End
         If $cmnkycSowInheritanceDonation.firstName != null Then
            $silContributorIndividualName.firstName := $cmnkycSowInheritanceDonation.firstName;
         End
         $silSOWContributor.contributor.names.addElement($silContributorIndividualName);
         $silInheritanceWealthDetails.contributors.addElement($silSOWContributor);
         IF($cmnkycSowInheritanceDonation.relationshipType != null, $silInheritanceWealthDetails.relationshipWithDonator := $cmnkycSowInheritanceDonation.relationshipType);
         IF($cmnkycSowInheritanceDonation.receivedDate != null, $silInheritanceWealthDetails.dateOfInheritance := $cmnkycSowInheritanceDonation.receivedDate);
         IF($cmnkycSowInheritanceDonation.totalValue != null, $silInheritanceWealthDetails.netWorthEstimatedAmount := $cmnkycSowInheritanceDonation.totalValue);
         IF($cmnkycSowInheritanceDonation.assetType != null, $silInheritanceWealthDetails.typeOfAssetDonated := $cmnkycSowInheritanceDonation.assetType);
         IF($cmnkycSowInheritanceDonation.originalWealthDescription != null, $silInheritanceWealthDetails.originalWealthDescription := $cmnkycSowInheritanceDonation.originalWealthDescription);
         If LIB_Validator.validateNotEmptyIndexed($cmnkycSowInheritanceDonation.countriesBusinessExposure) Then
            CMN_KycBusinessExposure $cmnKycBusinessExposure;
            ForEach $cmnKycBusinessExposure In $cmnkycSowInheritanceDonation.countriesBusinessExposure Do
               If $cmnKycBusinessExposure != null Then
                  SIL_SOWsowCountry $silSowCountry := INT_SILMappingCMNtoSIL.createSILSowCountry($cmnKycBusinessExposure.businessExposure, null, $cmnKycBusinessExposure.comments);
                  $silInheritanceWealthDetails.countriesContribution.addElement($silSowCountry);
               End
            End
         End
         ForEach CMN_hyperlink $cmnLink In $cmnkycSowInheritanceDonation.evidences Do
            SIL_CMSdocument $silDocument := INT_SILMappingCMNtoSIL.createSILDocument($cmnLink.hyperlink, $cmnLink.description);
            $silInheritanceWealthDetails.verificationDocuments.addElement($silDocument);
         End
         $silSourceOfWealth.addElement($silInheritanceWealthDetails);
      End
   End
   /************************************** SoW Family **********************/
   If LIB_Validator.validateNotEmptyIndexed($cmnPhysicalPersonKycSow.sowFamilyRelationsRoyalty) Then
      CMN_KycSowFamilyRelationsRoyalty $cmnSowFamilyRelationsRoyalty;
      ForEach $cmnSowFamilyRelationsRoyalty In $cmnPhysicalPersonKycSow.sowFamilyRelationsRoyalty Do
         If $cmnSowFamilyRelationsRoyalty == null Then
            Continue;
         End
         SIL_SOWfamilyWealthDetails $silFamilyWealthDetails := CAST(SIL_SOWfamilyWealthDetails, CreateSkeletonDataClass(SIL_SOWfamilyWealthDetails));
         IF($cmnSowFamilyRelationsRoyalty.estimatedValue != null, $silFamilyWealthDetails.netWorthEstimatedAmount := $cmnSowFamilyRelationsRoyalty.estimatedValue);
         IF($cmnSowFamilyRelationsRoyalty.originalWealthDescription != null, $silFamilyWealthDetails.originalWealthDescription := $cmnSowFamilyRelationsRoyalty.originalWealthDescription);
         IF($cmnSowFamilyRelationsRoyalty.originAndProvenanceSow != null, $silFamilyWealthDetails.originAndProvenance := $cmnSowFamilyRelationsRoyalty.originAndProvenanceSow);
         If LIB_Validator.validateNotEmptyIndexed($cmnSowFamilyRelationsRoyalty.countriesBusinessExposure) Then
            CMN_KycBusinessExposure $cmnKycBusinessExposure;
            ForEach $cmnKycBusinessExposure In $cmnSowFamilyRelationsRoyalty.countriesBusinessExposure Do
               If $cmnKycBusinessExposure != null Then
                  SIL_SOWsowCountry $silSowCountry := INT_SILMappingCMNtoSIL.createSILSowCountry($cmnKycBusinessExposure.businessExposure, null, $cmnKycBusinessExposure.comments);
                  $silFamilyWealthDetails.countriesContribution.addElement($silSowCountry);
               End
            End
         End
         ForEach CMN_hyperlink $cmnLink In $cmnSowFamilyRelationsRoyalty.evidences Do
            SIL_CMSdocument $silDocument := INT_SILMappingCMNtoSIL.createSILDocument($cmnLink.hyperlink, $cmnLink.description);
            $silFamilyWealthDetails.verificationDocuments.addElement($silDocument);
         End
         $silSourceOfWealth.addElement($silFamilyWealthDetails);
      End
   End
   /************************************** SoW Other **********************/
   If LIB_Validator.validateNotEmptyIndexed($cmnPhysicalPersonKycSow.sowOthers) Then
      CMN_KycSowOthers $cmnKycSowOthers;
      ForEach $cmnKycSowOthers In $cmnPhysicalPersonKycSow.sowOthers Do
         If $cmnKycSowOthers == null Then
            Continue;
         End
         SIL_SOWotherWealthDetails $silOtherWealthDetails := CAST(SIL_SOWotherWealthDetails, CreateSkeletonDataClass(SIL_SOWotherWealthDetails));
         IF($cmnKycSowOthers.dateReceived != null, $silOtherWealthDetails.dateReceived := $cmnKycSowOthers.dateReceived);
         IF($cmnKycSowOthers.estimatedValue != null, $silOtherWealthDetails.netWorthEstimatedAmount := $cmnKycSowOthers.estimatedValue);
         IF($cmnKycSowOthers.originalWealthDescription != null, $silOtherWealthDetails.originalWealthDescription := $cmnKycSowOthers.originalWealthDescription);
         IF($cmnKycSowOthers.originAndProvenanceSow != null, $silOtherWealthDetails.originAndProvenance := $cmnKycSowOthers.originAndProvenanceSow);
         If LIB_Validator.validateNotEmptyIndexed($cmnKycSowOthers.countriesBusinessExposure) Then
            CMN_KycBusinessExposure $cmnKycBusinessExposure;
            ForEach $cmnKycBusinessExposure In $cmnKycSowOthers.countriesBusinessExposure Do
               If $cmnKycBusinessExposure != null Then
                  SIL_SOWsowCountry $silSowCountry := INT_SILMappingCMNtoSIL.createSILSowCountry($cmnKycBusinessExposure.businessExposure, null, $cmnKycBusinessExposure.comments);
                  $silOtherWealthDetails.countriesContribution.addElement($silSowCountry);
               End
            End
         End
         ForEach CMN_hyperlink $cmnLink In $cmnKycSowOthers.evidences Do
            SIL_CMSdocument $silDocument := INT_SILMappingCMNtoSIL.createSILDocument($cmnLink.hyperlink, $cmnLink.description);
            $silOtherWealthDetails.verificationDocuments.addElement($silDocument);
         End
         $silSourceOfWealth.addElement($silOtherWealthDetails);
      End
   End
   Return $silSourceOfWealth;
End]]></definition>
        </method>
        <method name="createSILSowCountry" userId="pezzi" uuid="00000000-4e90-c755-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILSowCountry'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILSowCountry(String $countryCode, Double $percent, String $comment) : SIL_SOWsowCountry Begin
   SIL_SOWsowCountry $silSowCountry := CAST(SIL_SOWsowCountry, CreateSkeletonDataClass(SIL_SOWsowCountry));
   IF(NotEmpty($countryCode), $silSowCountry.country := INT_SILMappingCMNtoSIL.createSILCountry($countryCode));
   IF($comment != null, $silSowCountry.comment := $comment);
   IF($percent != null, $silSowCountry.contributionPercent := $percent);
   Return $silSowCountry;
End]]></definition>
        </method>
        <method name="createSILSpecialCategoryCustomer" userId="pezzi" uuid="00000000-43a0-fe3b-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILCustomerRoleClassifications'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILSpecialCategoryCustomer(CMN_Party $cmnParty) : SIL_CUSTOMERCLASSIFICATIONspecialCategoryCustomer Begin
   CMN_PEPSCCDetails $pepDetails := $cmnParty.kycProfile.pepSCCDetails;
   SIL_CUSTOMERCLASSIFICATIONspecialCategoryCustomer $specialCategoryCustomer;
   /********************************** PEP SCCDetails **********************************/
   If $pepDetails != null Then
      SIL_CUSTOMERCLASSIFICATIONpepCustomer $pepCustomer;
      If $pepDetails.pepTypeSCCConnectedParty != null && $pepDetails.pepTypeSCCConnectedParty.contains('SCC01') Then
         $specialCategoryCustomer := CAST(SIL_CUSTOMERCLASSIFICATIONpepCustomer, CreateSkeletonDataClass(SIL_CUSTOMERCLASSIFICATIONpepCustomer));
         $pepCustomer := CAST(SIL_CUSTOMERCLASSIFICATIONpepCustomer, $specialCategoryCustomer);
      Else
         $specialCategoryCustomer := CAST(SIL_CUSTOMERCLASSIFICATIONspecialCategoryCustomer, CreateSkeletonDataClass(SIL_CUSTOMERCLASSIFICATIONspecialCategoryCustomer));
      End
      /************* GENERAL SCC *************/
      IF(NotEmpty($pepDetails.getSILID()), $specialCategoryCustomer.id := $pepDetails.getSILID());
      IF($pepDetails.isPartyScc != null, $specialCategoryCustomer.sccIndicator := $pepDetails.isPartyScc);
      IF($pepDetails.basicReasonForSCCDesignation != null, $specialCategoryCustomer.sccDescription := $pepDetails.basicReasonForSCCDesignation);
      IF(NotEmpty($pepDetails.finalPEPCategory), $specialCategoryCustomer.finalPEPCategory := LIST($pepDetails.finalPEPCategory, 'CMN_KYCPEPCategory', 'sil_id'));
      If LIB_Validator.validateNotEmptyIndexed($pepDetails.automaticDetectedSCCReasons) Then
         $specialCategoryCustomer.autoSCCReasons := NewIndexed(SIL_CUSTOMERCLASSIFICATIONsccCategory);
         SIL_CUSTOMERCLASSIFICATIONsccCategory $sccCategory;
         ForEach String $automatedDetectedSCCReason In UNIQUE($pepDetails.automaticDetectedSCCReasons) Do
            $sccCategory := CAST(SIL_CUSTOMERCLASSIFICATIONsccCategory, CreateSkeletonDataClass(SIL_CUSTOMERCLASSIFICATIONsccCategory));
            $sccCategory.type := LIST($automatedDetectedSCCReason, 'CMN_KYCSccConnectedParty', 'SIL_Id');
            $specialCategoryCustomer.autoSCCReasons.addElement($sccCategory);
         End
      End
      $specialCategoryCustomer.sccOverrides := NewIndexed(SIL_CUSTOMERCLASSIFICATIONsccOverride);
      $specialCategoryCustomer.sccOverrides[1] := CAST(SIL_CUSTOMERCLASSIFICATIONsccOverride, CreateSkeletonDataClass(SIL_CUSTOMERCLASSIFICATIONsccOverride));
      If $cmnParty.kycProfile.pepSCCDetails.fccSccOverride Then
         IF($cmnParty.kycProfile.pepSCCDetails.complianceOverrideSCCStatus != null, $specialCategoryCustomer.sccOverrides[1].sccIndicator := $cmnParty.kycProfile.pepSCCDetails.complianceOverrideSCCStatus);
         IF(NotEmpty($cmnParty.kycProfile.pepSCCDetails.fccSccOverrideReason), $specialCategoryCustomer.sccOverrides[1].overrideReason := LIST($cmnParty.kycProfile.pepSCCDetails.fccSccOverrideReason, 'CMN_KYCSCCOverrideReasons', 'sil_id', 'id'));
         IF($cmnParty.kycProfile.pepSCCDetails.sccOverrideDescription != null, $specialCategoryCustomer.sccOverrides[1].overrideDescription := $cmnParty.kycProfile.pepSCCDetails.sccOverrideDescription);
         $specialCategoryCustomer.sccOverrides[1].overrideIndicator := true;
      Else
         $specialCategoryCustomer.sccOverrides[1].overrideIndicator := false;
      End
      SIL_STATICcountry $silCountry;
      If SIZE($pepDetails.pepTypeSCCConnectedParty) > 0 Then
         If $pepDetails.pepTypeSCCConnectedParty.contains('SCC01') Then
            $pepCustomer.pepCustomerInformation := CAST(SIL_CUSTOMERCLASSIFICATIONpepInformation, CreateSkeletonDataClass(SIL_CUSTOMERCLASSIFICATIONpepInformation));
            IF($pepDetails.pepReason != null, $pepCustomer.pepCustomerInformation.pepReason := LIST($pepDetails.pepReason, 'CMN_KYCAssociatedPepReason', 'sil_id'));
            IF($pepDetails.pepDescriptionHeld != null, $pepCustomer.pepCustomerInformation.pepDescription := $pepDetails.pepDescriptionHeld);
            IF($pepDetails.startAppointedPEPDate != null, $pepCustomer.pepCustomerInformation.startDate := $pepDetails.startAppointedPEPDate);
            IF($pepDetails.endAppointedPEPDate != null, $pepCustomer.pepCustomerInformation.endDate := $pepDetails.endAppointedPEPDate);
            If NotEmpty($pepDetails.countryPoliticalExposure) Then
               $silCountry := INT_SILMappingCMNtoSIL.createSILCountry($pepDetails.countryPoliticalExposure);
               If $silCountry != null and $pepDetails.isAppHighRiskjurisdiction != null Then
                  $silCountry.highRiskJuridictionIndicator := $pepDetails.isAppHighRiskjurisdiction;
               End
               IF(NotEmpty($pepDetails.countryPoliticalExposure), $pepCustomer.pepCustomerInformation.relatedCountry := $silCountry);
            End
         End
         If $pepDetails.pepTypeSCCConnectedParty.contains('SCC02') Then
            $specialCategoryCustomer.relatedParties := NewIndexed(SIL_CUSTOMERCLASSIFICATIONpepRelatedParty);
            SIL_CUSTOMERCLASSIFICATIONpepRelatedParty $pepRelatedParty := CAST(SIL_CUSTOMERCLASSIFICATIONpepRelatedParty, CreateSkeletonDataClass(SIL_CUSTOMERCLASSIFICATIONpepRelatedParty));
            $specialCategoryCustomer.relatedParties.addElement($pepRelatedParty);
            $pepRelatedParty.pepRelatedPartyInformation := NewIndexed(SIL_CUSTOMERCLASSIFICATIONpepInformation);
            SIL_CUSTOMERCLASSIFICATIONpepInformation $pepRelatedPartyInformation := CAST(SIL_CUSTOMERCLASSIFICATIONpepInformation, CreateSkeletonDataClass(SIL_CUSTOMERCLASSIFICATIONpepInformation));
            $pepRelatedParty.pepRelatedPartyInformation.addElement($pepRelatedPartyInformation);
            IF($pepDetails.associatedPEPReason != null, $pepRelatedPartyInformation.pepReason := LIST($pepDetails.associatedPEPReason, 'CMN_KYCAssociatedPepReason', 'sil_id'));
            IF($pepDetails.associatedPEPDescription != null, $pepRelatedPartyInformation.pepDescription := $pepDetails.associatedPEPDescription);
            IF($pepDetails.associatedStartPEPDate != null, $pepRelatedPartyInformation.startDate := $pepDetails.associatedStartPEPDate);
            IF($pepDetails.associatedEndPEPDate != null, $pepRelatedPartyInformation.endDate := $pepDetails.associatedEndPEPDate);
            IF($pepDetails.hasAssociatedPepControl != null, $pepRelatedParty.hasEffectiveControlOverCompanyIndicator := $pepDetails.hasAssociatedPepControl);
            IF($pepDetails.hasAssociatedPepConflicts != null, $pepRelatedParty.hasEthicalConflictWithCustomerIndicator := $pepDetails.hasAssociatedPepConflicts);
            IF($pepDetails.associatedPepPositionTimeHeld != null, $pepRelatedParty.notInLastPEPPositionSince := $pepDetails.associatedPepPositionTimeHeld);
            IF($pepDetails.associatedPepCustomerRelation != null, $pepRelatedParty.ethicalConflictWithCustomerDescription := $pepDetails.associatedPepCustomerRelation);
            If NotEmpty($pepDetails.associatedMainCountryRelate) Then
               $silCountry := INT_SILMappingCMNtoSIL.createSILCountry($pepDetails.associatedMainCountryRelate);
               If $silCountry != null and $pepDetails.isAssHighRiskjurisdiction != null Then
                  $silCountry.highRiskJuridictionIndicator := $pepDetails.isAssHighRiskjurisdiction;
               End
               IF(NotEmpty($pepDetails.associatedMainCountryRelate), $pepRelatedPartyInformation.relatedCountry := $silCountry);
            End
            If NotEmpty($pepDetails.associatedPEPPosition) && $cmnParty.type.isLegalEntity() Then
               $pepRelatedParty.involvedParty := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
               SIL_INVOLVEDPARTYemployeeRole $silEmployeeRole := CAST(SIL_INVOLVEDPARTYemployeeRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYemployeeRole));
               $pepRelatedParty.involvedParty.roles.addElement($silEmployeeRole);
               SIL_INVOLVEDPARTYinvolvedPartyRelationship $silRelation := CAST(SIL_INVOLVEDPARTYinvolvedPartyRelationship, CreateSkeletonDataClass(SIL_INVOLVEDPARTYinvolvedPartyRelationship));
               $pepRelatedParty.involvedParty.roles[1].involvedPartyRelationships.addElement($silRelation);
               $silRelation.relationshipRole := LIST($pepDetails.associatedPEPPosition, 'CMN_AssociatedPepRoles', 'sil_Id');
               IF($pepDetails.relationEntityDescription != null, $silRelation.details := $pepDetails.relationEntityDescription);
            ElseIf NotEmpty($pepDetails.relationshipPEPToCustomer) && $cmnParty.type.isPhysicalPerson() Then
               $pepRelatedParty.involvedParty := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
               SIL_INVOLVEDPARTYemployeeRole $silEmployeeRole := CAST(SIL_INVOLVEDPARTYemployeeRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYemployeeRole));
               $pepRelatedParty.involvedParty.roles.addElement($silEmployeeRole);
               SIL_INVOLVEDPARTYinvolvedPartyRelationship $silRelation := CAST(SIL_INVOLVEDPARTYinvolvedPartyRelationship, CreateSkeletonDataClass(SIL_INVOLVEDPARTYinvolvedPartyRelationship));
               $pepRelatedParty.involvedParty.roles[1].involvedPartyRelationships.addElement($silRelation);
               $silRelation.relationshipType := LIST($pepDetails.relationshipPEPToCustomer, 'CMN_KYCPEPRelationship', 'sil_Id');
               If $pepDetails.relationshipPEPToCustomer == 'other' Then
                  $silRelation.relationshipSubType := $pepDetails.relationshipPEPToCustomerOther;
               End
               IF($pepDetails.relationshipDescription != null, $silRelation.details := $pepDetails.relationshipDescription);
            End
            IF($pepDetails.isAssociatedExistBankPartner != null, $pepRelatedParty.isAnExistingCustomer := $pepDetails.isAssociatedExistBankPartner);
            If NotEmpty($pepDetails.associatedPEPID) Then
               IF($pepRelatedParty.involvedParty == null, $pepRelatedParty.involvedParty := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual)));
               $pepRelatedParty.involvedParty.id := $pepDetails.associatedPEPID;
            End
            SIL_INVOLVEDPARTYindividualName $silIndividualName := null;
            If $pepDetails.associatedPEPName != null Then
               IF($pepRelatedParty.involvedParty == null, $pepRelatedParty.involvedParty := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual)));
               IF(LIB_Validator.validateNotEmptyIndexed($pepRelatedParty.involvedParty.names), $pepRelatedParty.involvedParty.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName));
               IF($silIndividualName == null, $silIndividualName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName)));
               $silIndividualName.firstName := $pepDetails.associatedPEPName;
               $silIndividualName.fullName := $pepDetails.associatedPEPName;
            End
            If $pepDetails.associatedPEPLastName != null Then
               IF($pepRelatedParty.involvedParty == null, $pepRelatedParty.involvedParty := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual)));
               IF(LIB_Validator.validateNotEmptyIndexed($pepRelatedParty.involvedParty.names), $pepRelatedParty.involvedParty.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName));
               If $silIndividualName == null Then
                  $silIndividualName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
                  $silIndividualName.fullName := $pepDetails.associatedPEPLastName;
               Else
                  $silIndividualName.fullName := JOIN($pepDetails.associatedPEPName, ' ', $pepDetails.associatedPEPLastName);
               End
               $silIndividualName.lastName := $pepDetails.associatedPEPLastName;
            End
            If $silIndividualName != null Then
               $pepRelatedParty.involvedParty.names.addElement($silIndividualName);
            End
            If NotEmpty($pepDetails.associatedPEPNationality) Then
               IF($pepRelatedParty.involvedParty == null, $pepRelatedParty.involvedParty := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual)));
               IF(LIB_Validator.validateNotEmptyIndexed($pepRelatedParty.involvedParty.nationalities), $pepRelatedParty.involvedParty.nationalities := NewIndexed(SIL_STATICcountry));
               $silCountry := INT_SILMappingCMNtoSIL.createSILCountry($pepDetails.associatedPEPNationality);
               $pepRelatedParty.involvedParty.nationalities.addElement($silCountry);
            End
         Else
            $specialCategoryCustomer.relatedParties := null;
         End
      End
      Indexed String $cmnSCCReasons := UNION($pepDetails.typeSCCConnectedParty, $pepDetails.pepTypeSCCConnectedParty);
      If LIB_Validator.validateNotEmptyIndexed($cmnSCCReasons) Then
         $specialCategoryCustomer.manualSCCReasons := NewIndexed(SIL_CUSTOMERCLASSIFICATIONsccCategory);
         SIL_CUSTOMERCLASSIFICATIONsccCategory $sccCategory;
         ForEach String $sccType In $cmnSCCReasons Do
            $sccCategory := CAST(SIL_CUSTOMERCLASSIFICATIONsccCategory, CreateSkeletonDataClass(SIL_CUSTOMERCLASSIFICATIONsccCategory));
            $sccCategory.type := LIST($sccType, 'CMN_KYCSccConnectedParty', 'SIL_Id');
            $specialCategoryCustomer.manualSCCReasons.addElement($sccCategory);
         End
      End
   End
   Return $specialCategoryCustomer;
End]]></definition>
        </method>
        <method name="createSILTaxIdentificationNumberFromCMNCRSObligation" userId="pezzi" uuid="ffffffff-bd57-3790-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILTaxIdentificationNumberFromCMNCRSObligation'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILTaxIdentificationNumberFromCMNCRSObligation(CMN_CRSObligation $cmnCRSObligation) : SIL_INVOLVEDPARTYtaxIdentificationNumber Begin
   If $cmnCRSObligation == null Then
      Return null;
   End
   SIL_INVOLVEDPARTYtaxIdentificationNumber $silTaxIdentificationNumber;
   If NotEmpty($cmnCRSObligation.getGIIN()) Then
      $silTaxIdentificationNumber := CAST(SIL_INVOLVEDPARTYtaxIdentificationNumber, CreateSkeletonDataClass(SIL_INVOLVEDPARTYtaxIdentificationNumber));
      $silTaxIdentificationNumber.type := 'GIN';
      $silTaxIdentificationNumber.identificationNumber := $cmnCRSObligation.getGIIN();
   End
   Return $silTaxIdentificationNumber;
End]]></definition>
        </method>
        <method name="createSILTaxIdentificationNumberFromCMNResidencyForTaxPurposes" userId="pezzi" uuid="ffffffff-b872-5c9f-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILTaxIdentificationNumber'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILTaxIdentificationNumberFromCMNResidencyForTaxPurposes(CMN_ResidencyForTaxPurposes $cmnResidencyForTaxPurposes, String $type) : SIL_INVOLVEDPARTYtaxIdentificationNumber Begin
   If $cmnResidencyForTaxPurposes == null Then
      Return null;
   End
   SIL_INVOLVEDPARTYtaxIdentificationNumber $silTaxIdentificationNumber := CAST(SIL_INVOLVEDPARTYtaxIdentificationNumber, CreateSkeletonDataClass(SIL_INVOLVEDPARTYtaxIdentificationNumber));
   $silTaxIdentificationNumber.type := $type;
   If NotEmpty($cmnResidencyForTaxPurposes.country) Then
      $silTaxIdentificationNumber.country := INT_SILMappingCMNtoSIL.createSILCountry($cmnResidencyForTaxPurposes.country);
   End
   IF(NotEmpty($cmnResidencyForTaxPurposes.type), $silTaxIdentificationNumber.TaxResidentOption := LIST($cmnResidencyForTaxPurposes.type, 'COB_ResidencyForTaxPurpose', 'sil_Id'));
   If EQUAL($cmnResidencyForTaxPurposes.type, 'tin') and $cmnResidencyForTaxPurposes.tin != null Then
      $silTaxIdentificationNumber.identificationNumber := $cmnResidencyForTaxPurposes.tin;
   End
   If EQUAL($cmnResidencyForTaxPurposes.type, 'tin') Then
      $silTaxIdentificationNumber.identificationNumber := $cmnResidencyForTaxPurposes.tin;
   ElseIf EQUAL($cmnResidencyForTaxPurposes.type, 'noCountryTin') Then
   ElseIf EQUAL($cmnResidencyForTaxPurposes.type, 'obtainTin') Then
      IF($cmnResidencyForTaxPurposes.reason != null, $silTaxIdentificationNumber.reasonOfUnableToObtainTIN := LIST($cmnResidencyForTaxPurposes.reason, 'CMN_UnableObtainTINReasons', 'sil_Id'));
      IF($cmnResidencyForTaxPurposes.reason == 'otherReason', $silTaxIdentificationNumber.reasonOfUnableToObtainTINDescription := $cmnResidencyForTaxPurposes.commentReason);
   ElseIf EQUAL($cmnResidencyForTaxPurposes.type, 'localLawNoTin') Then
   End
   /* If $cmnResidencyForTaxPurposes.noCountryTaxReason != null Then
      $. := $cmnResidencyForTaxPurposes.noCountryTaxReason;
   End
   
   If $cmnResidencyForTaxPurposes.reason != null Then
      $. := $cmnResidencyForTaxPurposes.reason;
   End
   If $cmnResidencyForTaxPurposes.commentReason != null Then
      $. := $cmnResidencyForTaxPurposess.commentReason;
   End*/
   Return $silTaxIdentificationNumber;
End]]></definition>
        </method>
        <method name="createSILTaxInformation" userId="pezzi" uuid="00000000-2b69-015b-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILTaxInformation'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILTaxInformation(CMN_Party $cmnParty) : SIL_INVOLVEDPARTYtaxInformation Begin
   If $cmnParty == null Then
      Return null;
   End
   /****************************************** Tax and Regulatory ****************************************/
   SIL_INVOLVEDPARTYtaxInformation $silTaxInformation := CAST(SIL_INVOLVEDPARTYtaxInformation, CreateSkeletonDataClass(SIL_INVOLVEDPARTYtaxInformation));
   $silTaxInformation.taxDetails := NewIndexed(SIL_INVOLVEDPARTYtaxDetail);
   SIL_INVOLVEDPARTYtaxIdentificationNumber $silTaxIdentificationNumber;
   CMN_TaxTransparency $cmnTaxTransparency;
   If $cmnParty.type.isPhysicalPerson() Then
      CMN_RegulatoryProfilePhysical $cmnRegulatoryProfilePhysical := CAST(CMN_PhysicalPerson, $cmnParty).regulatoryProfile;
      $cmnTaxTransparency := $cmnRegulatoryProfilePhysical.taxTransparency;
   ElseIf $cmnParty.type.isLegalEntity() Then
      CMN_RegulatoryProfileLegal $cmnRegulatoryProfileLegal := CAST(CMN_LegalEntity, $cmnParty).regulatoryProfile;
      /******************************** Tax & Regulatory ****************************************************/
      $cmnTaxTransparency := $cmnRegulatoryProfileLegal.taxTransparency;
   End
   Try
      If $cmnTaxTransparency != null Then
         If $cmnTaxTransparency.openingAccountReason != null Then
            SIL_INVOLVEDPARTYtaxDetail $taxDetail := CAST(SIL_INVOLVEDPARTYtaxDetail, CreateSkeletonDataClass(SIL_INVOLVEDPARTYtaxDetail));
            $taxDetail.bookingCentreDissemblanceOpenReason := $cmnTaxTransparency.openingAccountReason;
            $silTaxInformation.taxDetails.addElement($taxDetail);
         End
         $silTaxInformation.tins := NewIndexed(SIL_INVOLVEDPARTYtaxIdentificationNumber);
         $silTaxIdentificationNumber := INT_SILMappingCMNtoSIL.createSILTaxIdentificationNumberFromCMNResidencyForTaxPurposes($cmnTaxTransparency.residencyForTaxPurposes, 'Tax identification number');
         IF($cmnTaxTransparency.residencyForTaxPurposes.hasTaxTrasparent != null, $silTaxInformation.fiscallyTransparentEntityIndicator := $cmnTaxTransparency.residencyForTaxPurposes.hasTaxTrasparent);
         $silTaxInformation.tins.addElement($silTaxIdentificationNumber);
         If LIB_Validator.validateNotEmptyIndexed($cmnTaxTransparency.additionalResidencyInformation) Then
            For Integer $i := 1 Condition $i <= $cmnTaxTransparency.additionalResidencyInformation.size() Step $i := $i + 1 Do
               CMN_ResidencyForTaxPurposes $cmnResidencyForTaxPurposes := $cmnTaxTransparency.additionalResidencyInformation[$i];
               If $i == 1 Then
                  $silTaxIdentificationNumber := INT_SILMappingCMNtoSIL.createSILTaxIdentificationNumberFromCMNResidencyForTaxPurposes($cmnResidencyForTaxPurposes, 'Tax Residence Country (Primary)');
               Else
                  $silTaxIdentificationNumber := INT_SILMappingCMNtoSIL.createSILTaxIdentificationNumberFromCMNResidencyForTaxPurposes($cmnResidencyForTaxPurposes, 'Tax Residence Country (Additional)');
               End
               IF($silTaxIdentificationNumber != null, $silTaxInformation.tins.addElement($silTaxIdentificationNumber));
            End
         End
      End
   Catch
      LIB_Logger.integrationError('[TAX_INFORMATION] Exception store: ' & TOSTRING($exception));
   End
   If $cmnParty.type.isPhysicalPerson() Then
      CMN_RegulatoryProfilePhysical $cmnRegulatoryProfilePhysical := CAST(CMN_PhysicalPerson, $cmnParty).regulatoryProfile;
      IF(NotEmpty($cmnRegulatoryProfilePhysical.getSILID()), $silTaxInformation.id := $cmnRegulatoryProfilePhysical.getSILID());
      /************************************** FATCA **********************/
      CMN_FatcaProfilePhysical $cmnFatcaProfilePhysical := $cmnRegulatoryProfilePhysical.fatcaProfile;
      If $cmnFatcaProfilePhysical != null Then
         //***tax & regulatory ***
         IF($cmnFatcaProfilePhysical.citizen != null, $silTaxInformation.usPersonIndicator := $cmnFatcaProfilePhysical.citizen);
         /********** US POLICY *************/
         SIL_INVOLVEDPARTYusTaxPolicy $silUsTaxPolicy := CAST(SIL_INVOLVEDPARTYusTaxPolicy, CreateSkeletonDataClass(SIL_INVOLVEDPARTYusTaxPolicy));
         $silTaxInformation.taxDetails.addElement($silUsTaxPolicy);
         $silUsTaxPolicy.finalClassification := CAST(SIL_FATCAfinalClassification, CreateSkeletonDataClass(SIL_FATCAfinalClassification));
         IF(NotEmpty($cmnFatcaProfilePhysical.fatcaClassification), $silUsTaxPolicy.finalClassification.classification := LIST($cmnFatcaProfilePhysical.fatcaClassification, 'CMN_FatcaClassificationList', 'sil_Id'));
         //IF(NotEmpty($cmnFatcaProfilePhysical.fatcaClassification), $silUsTaxPolicy.finalClassification.subClassification := $cmnFatcaProfilePhysical.fatcaClassification);
         IF($cmnFatcaProfilePhysical.hasUSTins != null, $silUsTaxPolicy.hasUSTINIndicator := $cmnFatcaProfilePhysical.hasUSTins);
         IF($cmnFatcaProfilePhysical.taxpayer != null, $silUsTaxPolicy.usPresenceIndicator := $cmnFatcaProfilePhysical.taxpayer);
         IF($cmnFatcaProfilePhysical.isUSPersonForTaxPurposes != null, $silUsTaxPolicy.usPersonOtherReasonIndicator := $cmnFatcaProfilePhysical.isUSPersonForTaxPurposes);
         IF($cmnFatcaProfilePhysical.hasPartyLiveInUsFrom12Months != null, $silUsTaxPolicy.organizationUSPlaceOfBusinessIndicator := $cmnFatcaProfilePhysical.hasPartyLiveInUsFrom12Months);
         IF($cmnFatcaProfilePhysical.amountOfTimeInUSComment != null, $silUsTaxPolicy.moreThan30DaysinUSLast12MonthsDescription := $cmnFatcaProfilePhysical.amountOfTimeInUSComment);
         IF($cmnFatcaProfilePhysical.hasAddressInUS != null, $silUsTaxPolicy.nonUSEntityUSLocationIndicator := $cmnFatcaProfilePhysical.hasAddressInUS);
         IF($cmnFatcaProfilePhysical.hasConstructiveControl != null, $silUsTaxPolicy.hasConstructiveControlOfAccountIndicator := $cmnFatcaProfilePhysical.hasConstructiveControl);
         IF($cmnFatcaProfilePhysical.confirmNatureOfBusiness != null, $silUsTaxPolicy.purposeOfUSAddress := $cmnFatcaProfilePhysical.confirmNatureOfBusiness);
         IF($cmnFatcaProfilePhysical.otherUSConnection != null, $silUsTaxPolicy.usConnectionOtherComment := $cmnFatcaProfilePhysical.otherUSConnection);
         /************************************** UKRND **********************/
         CMN_UKResidentNonDomiciled $cmnUKResidentNonDomiciled := $cmnRegulatoryProfilePhysical.ukResidenceNonDomiciled;
         If $cmnUKResidentNonDomiciled != null Then
            IF($cmnUKResidentNonDomiciled.isUKResidentNoNDomiciled != null, $silTaxInformation.ukrndIndicator := $cmnUKResidentNonDomiciled.isUKResidentNoNDomiciled);
            If $cmnRegulatoryProfilePhysical.ukResidenceNonDomiciled.countryOfDomicile != null Then
               SIL_INVOLVEDPARTYukrnd $silUKRND := CAST(SIL_INVOLVEDPARTYukrnd, CreateSkeletonDataClass(SIL_INVOLVEDPARTYukrnd));
               $silTaxInformation.taxDetails.addElement($silUKRND);
               $silUKRND.accountRelevantParty := CAST(SIL_INVOLVEDPARTYcustomerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcustomerRole));
               SIL_INVOLVEDPARTYindividual $silIndividual := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
               $silUKRND.accountRelevantParty.party := $silIndividual;
               $silIndividual.domicile := $cmnUKResidentNonDomiciled.countryOfDomicile;
            End
         End
      End
   ElseIf $cmnParty.type.isLegalEntity() Then
      CMN_RegulatoryProfileLegal $cmnRegulatoryProfileLegal := CAST(CMN_LegalEntity, $cmnParty).regulatoryProfile;
      /******************************** Tax & Regulatory ****************************************************/
      CMN_CRSObligation $cmnCRSObligation := $cmnRegulatoryProfileLegal.CRSObligation;
      If $cmnCRSObligation.isCRSEntityTypeKnow Then
         SIL_INVOLVEDPARTYcrs $silCRS := CAST(SIL_INVOLVEDPARTYcrs, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcrs));
         IF(NotEmpty($cmnCRSObligation.CRSentityType), $silCRS.crsEntityTyp := LIST($cmnCRSObligation.CRSentityType, 'CMN_CRSEntityTypes', 'sil_Id'));
         If $cmnCRSObligation.CRSentityType == 'activeNFETradedCorporation' Then
            $silCRS.accountRelevantParty := CAST(SIL_INVOLVEDPARTYcustomerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcustomerRole));
            SIL_INVOLVEDPARTYorganization $silMarketOrganization := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
            $silCRS.accountRelevantParty.party := $silMarketOrganization;
            If $cmnCRSObligation.activeNFENameSecuritiesMarket != null Then
               $silMarketOrganization.stockExchangeCode := $cmnCRSObligation.activeNFENameSecuritiesMarket;
            End
            If $cmnCRSObligation.activeNFENameTradedCorp != null Then
               SIL_INVOLVEDPARTYorganizationName $silOrganizationName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
               $silOrganizationName.businessName := $cmnCRSObligation.activeNFENameTradedCorp;
               $silMarketOrganization.names.addElement($silOrganizationName);
            End
         End
         IF($cmnCRSObligation.CRSInvestmentEntitySubCat != null, $silCRS.crsEntitySubType := LIST($cmnCRSObligation.CRSInvestmentEntitySubCat, 'CMN_CRSEntitySubTypes', 'sil_Id'));
         IF($cmnCRSObligation.hasControllingPerson != null, $silCRS.organizationKnowControllingPersonIndicator := $cmnCRSObligation.hasControllingPerson);
         If $cmnCRSObligation.firstPartGIIN != null and $cmnCRSObligation.secondPartGIIN != null and $cmnCRSObligation.thirdPartGIIN != null and $cmnCRSObligation.fourthPartGIIN != null Then
            $silCRS.giinCode := $cmnCRSObligation.getGIIN();
         End
         $silTaxInformation.taxDetails.addElement($silCRS);
         If $cmnCRSObligation.hasControllingPerson && LIB_Validator.validateNotEmptyIndexed($cmnCRSObligation.financialInstControllingPerson) Then
            CMN_ControllingPerson $cmnControllingPerson;
            ForEach $cmnControllingPerson In $cmnCRSObligation.financialInstControllingPerson Do
               If NotEmpty($cmnControllingPerson.id) Then
                  SIL_INVOLVEDPARTYcontrollingPersonRole $silRole := CAST(SIL_INVOLVEDPARTYcontrollingPersonRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcontrollingPersonRole));
                  $silCRS.controllingPersons.addElement($silRole);
                  $silRole.party := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
                  SIL_INVOLVEDPARTYindividualName $silCRSName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
                  $silCRSName.firstName := $cmnControllingPerson.firstName;
                  $silCRSName.lastName := $cmnControllingPerson.lastName;
                  $silRole.party.names.addElement($silCRSName);
                  IF($cmnControllingPerson.type != null, $silRole.controllingPersonType := LIST($cmnControllingPerson.type, 'CMN_ControllingPersonType', 'sil_Id'));
               End
            End
         End
      End
      //IF($cmnCRSObligation.nonReportingCategory!=null,$silTaxInformation.:=$cmnCRSObligation.nonReportingCategory);
      If $cmnCRSObligation.CRSentityType == 'passiveNFE' Then
         If $cmnCRSObligation.hasPassiveNFEControllingPerson && LIB_Validator.validateNotEmptyIndexed($cmnCRSObligation.passiveNFEControllingPerson) Then
            CMN_ControllingPerson $cmnControllingPerson;
            ForEach $cmnControllingPerson In $cmnCRSObligation.passiveNFEControllingPerson Do
               //IF($cmnControllingPerson.id != null,   $silTaxInformation.:=$cmnControllingPerson.id);
               //IF($cmnControllingPerson.type != null,   $silTaxInformation.:=$cmnControllingPerson.type);
            End
         End
      End
      /**************************** FATCA *******************************/
      CMN_FatcaProfileLegal $cmnFatcaProfileLegal := $cmnRegulatoryProfileLegal.fatcaProfile;
      If $cmnFatcaProfileLegal != null Then
         IF($cmnFatcaProfileLegal.isEntityUS != null, $silTaxInformation.usCompanyIndicator := $cmnFatcaProfileLegal.isEntityUS);
         /********** US POLICY *************/
         SIL_INVOLVEDPARTYusTaxPolicy $silUsTaxPolicy := CAST(SIL_INVOLVEDPARTYusTaxPolicy, CreateSkeletonDataClass(SIL_INVOLVEDPARTYusTaxPolicy));
         $silTaxInformation.taxDetails.addElement($silUsTaxPolicy);
         IF($cmnFatcaProfileLegal.chapterThree != null, $silUsTaxPolicy.chapter3Status := LIST($cmnFatcaProfileLegal.chapterThree, 'CMN_ChapterThree', 'sil_Id'));
         IF($cmnFatcaProfileLegal.w8FormClassification != null, $silUsTaxPolicy.w8Classification := LIST($cmnFatcaProfileLegal.w8FormClassification, 'CMN_W8FormClassification', 'sil_Id'));
         $silUsTaxPolicy.finalClassification := CAST(SIL_FATCAfinalClassification, CreateSkeletonDataClass(SIL_FATCAfinalClassification));
         IF(NotEmpty($cmnFatcaProfileLegal.fatcaClassification), $silUsTaxPolicy.finalClassification.classification := LIST($cmnFatcaProfileLegal.fatcaClassification, 'CMN_FatcaClassificationList', 'sil_Id'));
         IF($cmnFatcaProfileLegal.isEntityActivity != null, $silUsTaxPolicy.organizationUSTaxLiableIndicator := $cmnFatcaProfileLegal.isEntityActivity);
         IF($cmnFatcaProfileLegal.descUSPersonCapacitiesTrust != null, $silUsTaxPolicy.entityContainingUSPersonDescription := $cmnFatcaProfileLegal.descUSPersonCapacitiesTrust);
         IF($cmnFatcaProfileLegal.commentsDetailUsePerson != null, $silUsTaxPolicy.entityContainingUSPersonDescription := $cmnFatcaProfileLegal.commentsDetailUsePerson);
         IF($cmnFatcaProfileLegal.hasUSPersCapacities != null, $silUsTaxPolicy.organizationUSExternalPersonRoleCode := INT_SILMatchingTools.matchCMNBooleanToSILYesNo($cmnFatcaProfileLegal.hasUSPersCapacities));
         IF($cmnFatcaProfileLegal.hasUSPersonCapacitiesTrust != null, $silUsTaxPolicy.organizationUSExternalPersonRoleCode := INT_SILMatchingTools.matchCMNBooleanToSILYesNo($cmnFatcaProfileLegal.hasUSPersonCapacitiesTrust));
         IF($cmnFatcaProfileLegal.hasUSTins != null, $silUsTaxPolicy.hasUSTINIndicator := $cmnFatcaProfileLegal.hasUSTins);
         IF($cmnFatcaProfileLegal.isformationDocuments != null, $silUsTaxPolicy.organizationUSCourtJusidictionLiableIndicator := $cmnFatcaProfileLegal.isformationDocuments);
         IF($cmnFatcaProfileLegal.isPlanEmployeesUsPerson != null, $silUsTaxPolicy.organizationPensionPlanUSPersonIndicator := $cmnFatcaProfileLegal.isPlanEmployeesUsPerson);
         IF($cmnFatcaProfileLegal.hasUSPersonCapacitiesTrust != null, $silUsTaxPolicy.organizationUSExternalPersonRoleCode := INT_SILMatchingTools.matchCMNBooleanToSILYesNo($cmnFatcaProfileLegal.hasUSPersonCapacitiesTrust));
         IF($cmnFatcaProfileLegal.isDisregardedOrTaxExempt != null, $silUsTaxPolicy.organizationUSTaxExemptionIndicator := $cmnFatcaProfileLegal.isDisregardedOrTaxExempt);
         //IF($cmnFatcaProfileLegal.formationDocumentsCountry!=null,$silOrganization.:=$cmnFatcaProfileLegal.formationDocumentsCountry);
         If $cmnFatcaProfileLegal.isDecentUsPerson != null Then
            $silUsTaxPolicy.accountRelevantParty := CAST(SIL_INVOLVEDPARTYcustomerRole, CreateSkeletonDataClass(SIL_INVOLVEDPARTYcustomerRole));
            SIL_INVOLVEDPARTYindividual $silIndividual := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
            $silUsTaxPolicy.accountRelevantParty.party := $silIndividual;
            $silIndividual.deceasedIndicator := $cmnFatcaProfileLegal.isDecentUsPerson;
            IF($silIndividual.deceasedIndicator, $silTaxInformation.usPersonIndicator := true);
         End
         IF($cmnFatcaProfileLegal.isFlowThorugh != null, $silUsTaxPolicy.organisationFlowThroughIndicator := $cmnFatcaProfileLegal.isFlowThorugh);
         IF($cmnFatcaProfileLegal.isAllBOIndividual != null, $silUsTaxPolicy.organisationFlowThroughBeneficiaryisIndividualIndicator := $cmnFatcaProfileLegal.isAllBOIndividual);
         IF($cmnFatcaProfileLegal.isAllBOIndividual && $cmnFatcaProfileLegal.isAnyUSPersonInBO != null, $silUsTaxPolicy.organisationFlowThroughBeneficiaryisUsPersonIndicator := $cmnFatcaProfileLegal.isAnyUSPersonInBO);
         IF($cmnFatcaProfileLegal.isIncorporatedUnderUSCountry != null, $silUsTaxPolicy.organizationUSEstabilshedEntityIndicator := $cmnFatcaProfileLegal.isIncorporatedUnderUSCountry);
         IF($cmnFatcaProfileLegal.isUSPrincipalPlace != null, $silUsTaxPolicy.organizationUSPlaceOfBusinessIndicator := $cmnFatcaProfileLegal.isUSPrincipalPlace);
         If $cmnFatcaProfileLegal.isUSPrincipalPlace && LIB_Validator.validateNotEmptyIndexed($cmnFatcaProfileLegal.principalPlaceCountry) Then
            ForEach String $cmnCountryCode In $cmnFatcaProfileLegal.principalPlaceCountry Do
               $silUsTaxPolicy.organizationUSPlaceOfBusinessCounties.addElement(INT_SILMappingCMNtoSIL.createSILCountry($cmnCountryCode));
            End
         End
         IF($cmnFatcaProfileLegal.isNotUSAgency != null, $silUsTaxPolicy.organizationNonUSEstabilshedEntityIndicator := $cmnFatcaProfileLegal.isNotUSAgency);
         If $cmnFatcaProfileLegal.isNotUSAgency && LIB_Validator.validateNotEmptyIndexed($cmnFatcaProfileLegal.notUSAgencyCountry) Then
            ForEach String $cmnCountryCode In $cmnFatcaProfileLegal.notUSAgencyCountry Do
               $silUsTaxPolicy.organizationNonUSEstabilshedEntityCountries.addElement(INT_SILMappingCMNtoSIL.createSILCountry($cmnCountryCode));
            End
         End
      End
   End
   IF($cmnTaxTransparency.hasTaxAdvisor != null, $silTaxInformation.taxAdvisorIndicator := $cmnTaxTransparency.hasTaxAdvisor);
   If $cmnTaxTransparency.hasTaxAdvisor Then
      SIL_INVOLVEDPARTYtaxAdvisor $silTaxAdvisor := CAST(SIL_INVOLVEDPARTYtaxAdvisor, CreateSkeletonDataClass(SIL_INVOLVEDPARTYtaxAdvisor));
      If NotEmpty($cmnTaxTransparency.taxAdvisorFirstName) or NotEmpty($cmnTaxTransparency.taxAdvisorLastName) Then
         $silTaxAdvisor.party := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
         SIL_INVOLVEDPARTYindividualName $silIndividualName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
         $silIndividualName.firstName := $cmnTaxTransparency.taxAdvisorFirstName;
         $silIndividualName.lastName := $cmnTaxTransparency.taxAdvisorLastName;
         $silTaxAdvisor.party.names.addElement($silIndividualName);
      ElseIf NotEmpty($cmnTaxTransparency.taxAdvisoTradingName) Then
         $silTaxAdvisor.party := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
         SIL_INVOLVEDPARTYorganizationName $silOrganizationName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
         $silOrganizationName.businessName := $cmnTaxTransparency.taxAdvisoTradingName;
         $silTaxAdvisor.party.names.addElement($silOrganizationName);
      End
      SIL_INVOLVEDPARTYpostalAddress $postalAddress := INT_SILMappingCMNtoSIL.createSILPostalAddress($cmnTaxTransparency.taxAdvisorProfessionalAddress);
      $postalAddress.type := LIST('generic', 'CMN_AddressTypes__selector', 'code');
      $silTaxAdvisor.party.addresses.addElement($postalAddress);
      $silTaxInformation.taxAdvisors.addElement($silTaxAdvisor);
   End
   IF($cmnTaxTransparency.hasOtherCountryConnections != null, $silTaxInformation.otherCountryConnectionIndicator := $cmnTaxTransparency.hasOtherCountryConnections);
   IF($cmnTaxTransparency.hasOtherCountryConnections && $cmnTaxTransparency.otherCountryConnections != null, $silTaxInformation.otherCountryConnectionDescription := $cmnTaxTransparency.otherCountryConnections);
   INT_SILMappingCMNtoSILVariationFactory__selector().createSILTaxInformation($cmnParty, $silTaxInformation);
   Return $silTaxInformation;
End]]></definition>
        </method>
        <method name="createSILTransfer" userId="pezzi" uuid="00000000-0d50-7045-0000-000000000000">
            <definition><![CDATA[/**
  Description of function 'createSILTransfer'.
  @param $value Description of parameter '$value'.
  @return       Description of return value.
*/
StaticFunction createSILTransfer(Double $ammount, String $transferType, CMN_KYTSourceOfFund $cmnTransfer := null, CMN_BusinessRelationship $cmnBusinessRelationship := null) : SIL_ORDERtransfer Begin
   If EMPTY($transferType) Then
      Return null;
   End
   SIL_ORDERtransfer $silOrderTransfer := CAST(SIL_ORDERtransfer, CreateSkeletonDataClass(SIL_ORDERtransfer));
   IF($ammount != null, $silOrderTransfer.amount := $ammount);
   $silOrderTransfer.type := $transferType;
   If $cmnBusinessRelationship == null || $cmnTransfer == null Then
      Return $silOrderTransfer;
   End
   IF(NotEmpty($cmnTransfer.getSILID()), $silOrderTransfer.id := $cmnTransfer.getSILID());
   /******************* Debtor Name *****************/
   $silOrderTransfer.debtorRole := CAST(SIL_INVOLVEDPARTYaccountHolder, CreateSkeletonDataClass(SIL_INVOLVEDPARTYaccountHolder));
   SIL_INVOLVEDPARTYinvolvedPartyName $debtorName;
   If EQUAL($cmnTransfer.orderingParty, 'thirdParty') Then
      $silOrderTransfer.debtorRole.party := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
      $silOrderTransfer.debtorRole.type := LIST('thirdParty', 'CMN_KYTOrderingParty', 'sil_id', 'id');
      If $cmnTransfer.thirdPartyName != null Then
         $debtorName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
         $debtorName.fullName := $cmnTransfer.thirdPartyName;
      End
   Else
      CMN_Party $debtor;
      If EQUAL($cmnTransfer.orderingParty, 'ah') Then
         $silOrderTransfer.debtorRole.type := LIST('ah', 'CMN_KYTOrderingParty', 'sil_id', 'id');
         If LIB_Validator.validateNotEmptyIndexed($cmnBusinessRelationship.getCustomers()) Then
            $debtor := $cmnBusinessRelationship.getCustomers()[1];
         End
      ElseIf EQUAL($cmnTransfer.orderingParty, 'bo') Then
         $silOrderTransfer.debtorRole.type := LIST('bo', 'CMN_KYTOrderingParty', 'sil_id', 'id');
         If LIB_Validator.validateNotEmptyIndexed($cmnBusinessRelationship.getRoleManager().getPartiesInRole('bo')) Then
            $debtor := $cmnBusinessRelationship.getRoleManager().getPartiesInRole('bo')[1];
         End
      End
      If $debtor != null Then
         If $debtor.type.isPhysicalPerson() Then
            $debtorName := CAST(SIL_INVOLVEDPARTYindividualName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividualName));
            $silOrderTransfer.debtorRole.party := CAST(SIL_INVOLVEDPARTYindividual, CreateSkeletonDataClass(SIL_INVOLVEDPARTYindividual));
            $silOrderTransfer.debtorRole.party.id := $debtor.getSILID();
         ElseIf $debtor.type.isLegalEntity() Then
            $debtorName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
            $silOrderTransfer.debtorRole.party := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
            $silOrderTransfer.debtorRole.party.id := $debtor.getSILID();
         End
         $debtorName.fullName := $debtor.getFullName();
      End
   End
   If $debtorName != null Then
      $silOrderTransfer.debtorRole.party.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName);
      $silOrderTransfer.debtorRole.party.names.addElement($debtorName);
   End
   If NotEmpty($cmnTransfer.bank) Then
      SIL_INVOLVEDPARTYinvolvedPartyName $bankName;
      $silOrderTransfer.debtorBank := CAST(SIL_INVOLVEDPARTYorganization, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganization));
      $silOrderTransfer.debtorBank.type := LIST($cmnTransfer.bank, 'SIL_KYTBank', 'sil_id');
      If $cmnTransfer.bank == CMN_KYTSourceOfFund.getHSBCBank() and NotEmpty($cmnTransfer.entity) Then
         /************* ENTITY **********************/
         $bankName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
         CAST(SIL_INVOLVEDPARTYorganizationName, $bankName).businessName := LIST($cmnTransfer.entity, 'CMN_HSBCEntities__selector', 'description', 'id');
      ElseIf $cmnTransfer.bank == CMN_KYTSourceOfFund.getOthersBank() and $cmnTransfer.bankName != null Then
         /************* Others **********************/
         $bankName := CAST(SIL_INVOLVEDPARTYorganizationName, CreateSkeletonDataClass(SIL_INVOLVEDPARTYorganizationName));
         CAST(SIL_INVOLVEDPARTYorganizationName, $bankName).businessName := $cmnTransfer.bankName;
      ElseIf NotEmpty($cmnTransfer.accountNumber) Then
         /************* PBRS **********************/
         $silOrderTransfer.subAccountSell := CAST(SIL_ACCOUNTsubAccount, CreateSkeletonDataClass(SIL_ACCOUNTsubAccount));
         $silOrderTransfer.subAccountSell.id := $cmnTransfer.accountNumber;
      End
      If $bankName != null Then
         $silOrderTransfer.debtorBank.names := NewIndexed(SIL_INVOLVEDPARTYinvolvedPartyName);
         $silOrderTransfer.debtorBank.names.addElement($bankName);
      End
   End
   IF(NotEmpty($cmnTransfer.country), $silOrderTransfer.originOfFundsCountry := INT_SILMappingCMNtoSIL.createSILCountry($cmnTransfer.country));
   Return $silOrderTransfer;
End]]></definition>
        </method>
    </methods>
</class>

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                1,966,484,0
<?xml version="1.0" encoding="UTF-8"?>
<object xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="object.xsd">
    <id>CMN_IncludePartyEnhancedVigilance.accompaniment.validation.error</id>
    <uuid>b527102f-51c9-41d3-ad79-2b5617baa5ef</uuid>
    <type>Label</type>
    <name>CMN_IncludePartyEnhancedVigilance.accompaniment.validation.error</name>
    <description/>
    <creator>segafredo</creator>
    <creationTime>1473768701514</creationTime>
    <modifier>segafredo</modifier>
    <modificationTime>1473768723455</modificationTime>
    <active>true</active>
    <versionUuid>19338f2d-72c4-4767-9c9e-7b413fc12259</versionUuid>
    <parentVersionUuid/>
    <timestamp>1475260129806</timestamp>
    <systemId>h-global-predev.appway.com</systemId>
    <copyOfUuid>fb9ac229-6458-46bb-a461-b38d9dc2fd55</copyOfUuid>
    <committed>true</committed>
    <deleted>false</deleted>
    <userId>magloire</userId>
    <metaData/>
</object>

<?xml version="1.0" encoding="UTF-8"?>
<label version="1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="label.xsd">
    <text language="de">Select the offer type</text>
    <text language="en">Select the offer type</text>
    <text language="fr">Select the offer type</text>
    <text language="it">Select the offer type</text>
    <text language="pt">Select the offer type</text>
    <text language="sp">Select the offer type</text>
</label>

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               